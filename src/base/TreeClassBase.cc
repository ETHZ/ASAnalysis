// This file was automatically generated by buchmann
// Tue May  8 15:26:27 2012
//
// DO NOT MODIFY UNLESS YOU KNOW EXACTLY WHAT YOU ARE DOING
//
#include "base/TreeClassBase.hh"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>

//____________________________________________________________________
TreeClassBase::TreeClassBase(const std::vector<std::string>& fileList)
{
    fEvent = new fwlite::ChainEvent(fileList);
    fCurRun = -1;
    Init();
}

//____________________________________________________________________
TreeClassBase::~TreeClassBase()
{
    if (!fEvent) return;
    delete fEvent;
}

//____________________________________________________________________
// Retrieve all branches ("getByLabel")
const bool TreeClassBase::GetAllByLabel(void) {

    const edm::EventBase* event = fEvent;
    bool result;

    // Load run information if run has changed
    if ( fCurRun != event->id().run() ) {
      fCurRun = event->id().run();
      const edm::RunBase& run = fEvent->getRun();

      // Get all run handles and assign to members
      result &= run.getByLabel( tExtXSecLO, hExtXSecLO );
      if ( hExtXSecLO.isValid() ) ExtXSecLO = *hExtXSecLO;
      result &= run.getByLabel( tExtXSecNLO, hExtXSecNLO );
      if ( hExtXSecNLO.isValid() ) ExtXSecNLO = *hExtXSecNLO;
      result &= run.getByLabel( tHLTLabels, hHLTLabels );
      if ( hHLTLabels.isValid() ) HLTLabels = *hHLTLabels;
      result &= run.getByLabel( tHLTNames, hHLTNames );
      if ( hHLTNames.isValid() ) HLTNames = *hHLTNames;
      result &= run.getByLabel( tIntXSec, hIntXSec );
      if ( hIntXSec.isValid() ) IntXSec = *hIntXSec;
      result &= run.getByLabel( tL1PhysMenu, hL1PhysMenu );
      if ( hL1PhysMenu.isValid() ) L1PhysMenu = *hL1PhysMenu;
      result &= run.getByLabel( tMaxElEta, hMaxElEta );
      if ( hMaxElEta.isValid() ) MaxElEta = *hMaxElEta;
      result &= run.getByLabel( tMaxGenJetEta, hMaxGenJetEta );
      if ( hMaxGenJetEta.isValid() ) MaxGenJetEta = *hMaxGenJetEta;
      result &= run.getByLabel( tMaxGenLeptEta, hMaxGenLeptEta );
      if ( hMaxGenLeptEta.isValid() ) MaxGenLeptEta = *hMaxGenLeptEta;
      result &= run.getByLabel( tMaxGenPhotEta, hMaxGenPhotEta );
      if ( hMaxGenPhotEta.isValid() ) MaxGenPhotEta = *hMaxGenPhotEta;
      result &= run.getByLabel( tMaxJEta, hMaxJEta );
      if ( hMaxJEta.isValid() ) MaxJEta = *hMaxJEta;
      result &= run.getByLabel( tMaxMuEta, hMaxMuEta );
      if ( hMaxMuEta.isValid() ) MaxMuEta = *hMaxMuEta;
      result &= run.getByLabel( tMaxNEBhits, hMaxNEBhits );
      if ( hMaxNEBhits.isValid() ) MaxNEBhits = *hMaxNEBhits;
      result &= run.getByLabel( tMaxNEles, hMaxNEles );
      if ( hMaxNEles.isValid() ) MaxNEles = *hMaxNEles;
      result &= run.getByLabel( tMaxNGenJet, hMaxNGenJet );
      if ( hMaxNGenJet.isValid() ) MaxNGenJet = *hMaxNGenJet;
      result &= run.getByLabel( tMaxNGenLep, hMaxNGenLep );
      if ( hMaxNGenLep.isValid() ) MaxNGenLep = *hMaxNGenLep;
      result &= run.getByLabel( tMaxNGenPho, hMaxNGenPho );
      if ( hMaxNGenPho.isValid() ) MaxNGenPho = *hMaxNGenPho;
      result &= run.getByLabel( tMaxNJets, hMaxNJets );
      if ( hMaxNJets.isValid() ) MaxNJets = *hMaxNJets;
      result &= run.getByLabel( tMaxNMus, hMaxNMus );
      if ( hMaxNMus.isValid() ) MaxNMus = *hMaxNMus;
      result &= run.getByLabel( tMaxNPhotons, hMaxNPhotons );
      if ( hMaxNPhotons.isValid() ) MaxNPhotons = *hMaxNPhotons;
      result &= run.getByLabel( tMaxNPileup, hMaxNPileup );
      if ( hMaxNPileup.isValid() ) MaxNPileup = *hMaxNPileup;
      result &= run.getByLabel( tMaxNSC, hMaxNSC );
      if ( hMaxNSC.isValid() ) MaxNSC = *hMaxNSC;
      result &= run.getByLabel( tMaxNTrks, hMaxNTrks );
      if ( hMaxNTrks.isValid() ) MaxNTrks = *hMaxNTrks;
      result &= run.getByLabel( tMaxNVrtx, hMaxNVrtx );
      if ( hMaxNVrtx.isValid() ) MaxNVrtx = *hMaxNVrtx;
      result &= run.getByLabel( tMaxPhotonEta, hMaxPhotonEta );
      if ( hMaxPhotonEta.isValid() ) MaxPhotonEta = *hMaxPhotonEta;
      result &= run.getByLabel( tMaxTrkEta, hMaxTrkEta );
      if ( hMaxTrkEta.isValid() ) MaxTrkEta = *hMaxTrkEta;
      result &= run.getByLabel( tMaxTrkNChi2, hMaxTrkNChi2 );
      if ( hMaxTrkNChi2.isValid() ) MaxTrkNChi2 = *hMaxTrkNChi2;
      result &= run.getByLabel( tMinEBRechitE, hMinEBRechitE );
      if ( hMinEBRechitE.isValid() ) MinEBRechitE = *hMinEBRechitE;
      result &= run.getByLabel( tMinElPt, hMinElPt );
      if ( hMinElPt.isValid() ) MinElPt = *hMinElPt;
      result &= run.getByLabel( tMinGenJetPt, hMinGenJetPt );
      if ( hMinGenJetPt.isValid() ) MinGenJetPt = *hMinGenJetPt;
      result &= run.getByLabel( tMinGenLeptPt, hMinGenLeptPt );
      if ( hMinGenLeptPt.isValid() ) MinGenLeptPt = *hMinGenLeptPt;
      result &= run.getByLabel( tMinGenPhotPt, hMinGenPhotPt );
      if ( hMinGenPhotPt.isValid() ) MinGenPhotPt = *hMinGenPhotPt;
      result &= run.getByLabel( tMinJEMfrac, hMinJEMfrac );
      if ( hMinJEMfrac.isValid() ) MinJEMfrac = *hMinJEMfrac;
      result &= run.getByLabel( tMinJPt, hMinJPt );
      if ( hMinJPt.isValid() ) MinJPt = *hMinJPt;
      result &= run.getByLabel( tMinMuPt, hMinMuPt );
      if ( hMinMuPt.isValid() ) MinMuPt = *hMinMuPt;
      result &= run.getByLabel( tMinPhotonPt, hMinPhotonPt );
      if ( hMinPhotonPt.isValid() ) MinPhotonPt = *hMinPhotonPt;
      result &= run.getByLabel( tMinRawJPt, hMinRawJPt );
      if ( hMinRawJPt.isValid() ) MinRawJPt = *hMinRawJPt;
      result &= run.getByLabel( tMinSCraw, hMinSCraw );
      if ( hMinSCraw.isValid() ) MinSCraw = *hMinSCraw;
      result &= run.getByLabel( tMinTrkNHits, hMinTrkNHits );
      if ( hMinTrkNHits.isValid() ) MinTrkNHits = *hMinTrkNHits;
      result &= run.getByLabel( tMinTrkPt, hMinTrkPt );
      if ( hMinTrkPt.isValid() ) MinTrkPt = *hMinTrkPt;
      result &= run.getByLabel( tPileUpData, hPileUpData );
      if ( hPileUpData.isValid() ) PileUpData = *hPileUpData;
      result &= run.getByLabel( tPileUpMC, hPileUpMC );
      if ( hPileUpMC.isValid() ) PileUpMC = *hPileUpMC;


    }

    // Get all event handles and assign to members
    result &= event->getByLabel( tA0, hA0 );
    if ( hA0.isValid() ) A0 = *hA0;
    result &= event->getByLabel( tBeamspotx, hBeamspotx );
    if ( hBeamspotx.isValid() ) Beamspotx = *hBeamspotx;
    result &= event->getByLabel( tBeamspoty, hBeamspoty );
    if ( hBeamspoty.isValid() ) Beamspoty = *hBeamspoty;
    result &= event->getByLabel( tBeamspotz, hBeamspotz );
    if ( hBeamspotz.isValid() ) Beamspotz = *hBeamspotz;
    result &= event->getByLabel( tCAJArea, hCAJArea );
    if ( hCAJArea.isValid() ) CAJArea = *hCAJArea;
    result &= event->getByLabel( tCAJChfrac, hCAJChfrac );
    if ( hCAJChfrac.isValid() ) CAJChfrac = *hCAJChfrac;
    result &= event->getByLabel( tCAJE, hCAJE );
    if ( hCAJE.isValid() ) CAJE = *hCAJE;
    result &= event->getByLabel( tCAJEMfrac, hCAJEMfrac );
    if ( hCAJEMfrac.isValid() ) CAJEMfrac = *hCAJEMfrac;
    result &= event->getByLabel( tCAJEt, hCAJEt );
    if ( hCAJEt.isValid() ) CAJEt = *hCAJEt;
    result &= event->getByLabel( tCAJEta, hCAJEta );
    if ( hCAJEta.isValid() ) CAJEta = *hCAJEta;
    result &= event->getByLabel( tCAJFlavour, hCAJFlavour );
    if ( hCAJFlavour.isValid() ) CAJFlavour = *hCAJFlavour;
    result &= event->getByLabel( tCAJIDHPD, hCAJIDHPD );
    if ( hCAJIDHPD.isValid() ) CAJIDHPD = *hCAJIDHPD;
    result &= event->getByLabel( tCAJIDLoose, hCAJIDLoose );
    if ( hCAJIDLoose.isValid() ) CAJIDLoose = *hCAJIDLoose;
    result &= event->getByLabel( tCAJIDRBX, hCAJIDRBX );
    if ( hCAJIDRBX.isValid() ) CAJIDRBX = *hCAJIDRBX;
    result &= event->getByLabel( tCAJIDn90Hits, hCAJIDn90Hits );
    if ( hCAJIDn90Hits.isValid() ) CAJIDn90Hits = *hCAJIDn90Hits;
    result &= event->getByLabel( tCAJIDresEMF, hCAJIDresEMF );
    if ( hCAJIDresEMF.isValid() ) CAJIDresEMF = *hCAJIDresEMF;
    result &= event->getByLabel( tCAJL1FastJetScale, hCAJL1FastJetScale );
    if ( hCAJL1FastJetScale.isValid() ) CAJL1FastJetScale = *hCAJL1FastJetScale;
    result &= event->getByLabel( tCAJNAssoTracks, hCAJNAssoTracks );
    if ( hCAJNAssoTracks.isValid() ) CAJNAssoTracks = *hCAJNAssoTracks;
    result &= event->getByLabel( tCAJNConstituents, hCAJNConstituents );
    if ( hCAJNConstituents.isValid() ) CAJNConstituents = *hCAJNConstituents;
    result &= event->getByLabel( tCAJPhi, hCAJPhi );
    if ( hCAJPhi.isValid() ) CAJPhi = *hCAJPhi;
    result &= event->getByLabel( tCAJPt, hCAJPt );
    if ( hCAJPt.isValid() ) CAJPt = *hCAJPt;
    result &= event->getByLabel( tCAJPx, hCAJPx );
    if ( hCAJPx.isValid() ) CAJPx = *hCAJPx;
    result &= event->getByLabel( tCAJPy, hCAJPy );
    if ( hCAJPy.isValid() ) CAJPy = *hCAJPy;
    result &= event->getByLabel( tCAJPz, hCAJPz );
    if ( hCAJPz.isValid() ) CAJPz = *hCAJPz;
    result &= event->getByLabel( tCAJScale, hCAJScale );
    if ( hCAJScale.isValid() ) CAJScale = *hCAJScale;
    result &= event->getByLabel( tCAJn90, hCAJn90 );
    if ( hCAJn90.isValid() ) CAJn90 = *hCAJn90;
    result &= event->getByLabel( tCANJets, hCANJets );
    if ( hCANJets.isValid() ) CANJets = *hCANJets;
    result &= event->getByLabel( tCSCTightHaloID, hCSCTightHaloID );
    if ( hCSCTightHaloID.isValid() ) CSCTightHaloID = *hCSCTightHaloID;
    result &= event->getByLabel( tConvChi2Probability, hConvChi2Probability );
    if ( hConvChi2Probability.isValid() ) ConvChi2Probability = *hConvChi2Probability;
    result &= event->getByLabel( tConvEoverP, hConvEoverP );
    if ( hConvEoverP.isValid() ) ConvEoverP = *hConvEoverP;
    result &= event->getByLabel( tConvNtracks, hConvNtracks );
    if ( hConvNtracks.isValid() ) ConvNtracks = *hConvNtracks;
    result &= event->getByLabel( tConvValidVtx, hConvValidVtx );
    if ( hConvValidVtx.isValid() ) ConvValidVtx = *hConvValidVtx;
    result &= event->getByLabel( tConvZofPrimVtxFromTrks, hConvZofPrimVtxFromTrks );
    if ( hConvZofPrimVtxFromTrks.isValid() ) ConvZofPrimVtxFromTrks = *hConvZofPrimVtxFromTrks;
    result &= event->getByLabel( tEBrechitChi2, hEBrechitChi2 );
    if ( hEBrechitChi2.isValid() ) EBrechitChi2 = *hEBrechitChi2;
    result &= event->getByLabel( tEBrechitE, hEBrechitE );
    if ( hEBrechitE.isValid() ) EBrechitE = *hEBrechitE;
    result &= event->getByLabel( tEBrechitE2oE9, hEBrechitE2oE9 );
    if ( hEBrechitE2oE9.isValid() ) EBrechitE2oE9 = *hEBrechitE2oE9;
    result &= event->getByLabel( tEBrechitE4oE1, hEBrechitE4oE1 );
    if ( hEBrechitE4oE1.isValid() ) EBrechitE4oE1 = *hEBrechitE4oE1;
    result &= event->getByLabel( tEBrechitEta, hEBrechitEta );
    if ( hEBrechitEta.isValid() ) EBrechitEta = *hEBrechitEta;
    result &= event->getByLabel( tEBrechitPhi, hEBrechitPhi );
    if ( hEBrechitPhi.isValid() ) EBrechitPhi = *hEBrechitPhi;
    result &= event->getByLabel( tEBrechitPt, hEBrechitPt );
    if ( hEBrechitPt.isValid() ) EBrechitPt = *hEBrechitPt;
    result &= event->getByLabel( tEBrechitTime, hEBrechitTime );
    if ( hEBrechitTime.isValid() ) EBrechitTime = *hEBrechitTime;
    result &= event->getByLabel( tECALEsumx, hECALEsumx );
    if ( hECALEsumx.isValid() ) ECALEsumx = *hECALEsumx;
    result &= event->getByLabel( tECALEsumy, hECALEsumy );
    if ( hECALEsumy.isValid() ) ECALEsumy = *hECALEsumy;
    result &= event->getByLabel( tECALEsumz, hECALEsumz );
    if ( hECALEsumz.isValid() ) ECALEsumz = *hECALEsumz;
    result &= event->getByLabel( tECALMET, hECALMET );
    if ( hECALMET.isValid() ) ECALMET = *hECALMET;
    result &= event->getByLabel( tECALMETEta, hECALMETEta );
    if ( hECALMETEta.isValid() ) ECALMETEta = *hECALMETEta;
    result &= event->getByLabel( tECALMETPhi, hECALMETPhi );
    if ( hECALMETPhi.isValid() ) ECALMETPhi = *hECALMETPhi;
    result &= event->getByLabel( tECALSumEt, hECALSumEt );
    if ( hECALSumEt.isValid() ) ECALSumEt = *hECALSumEt;
    result &= event->getByLabel( tEcalDeadTPFilterFlag, hEcalDeadTPFilterFlag );
    if ( hEcalDeadTPFilterFlag.isValid() ) EcalDeadTPFilterFlag = *hEcalDeadTPFilterFlag;
    result &= event->getByLabel( tElBasicClustersSize, hElBasicClustersSize );
    if ( hElBasicClustersSize.isValid() ) ElBasicClustersSize = *hElBasicClustersSize;
    result &= event->getByLabel( tElCInfoIsGsfCtfCons, hElCInfoIsGsfCtfCons );
    if ( hElCInfoIsGsfCtfCons.isValid() ) ElCInfoIsGsfCtfCons = *hElCInfoIsGsfCtfCons;
    result &= event->getByLabel( tElCInfoIsGsfCtfScPixCons, hElCInfoIsGsfCtfScPixCons );
    if ( hElCInfoIsGsfCtfScPixCons.isValid() ) ElCInfoIsGsfCtfScPixCons = *hElCInfoIsGsfCtfScPixCons;
    result &= event->getByLabel( tElCInfoIsGsfScPixCons, hElCInfoIsGsfScPixCons );
    if ( hElCInfoIsGsfScPixCons.isValid() ) ElCInfoIsGsfScPixCons = *hElCInfoIsGsfScPixCons;
    result &= event->getByLabel( tElCaloEnergy, hElCaloEnergy );
    if ( hElCaloEnergy.isValid() ) ElCaloEnergy = *hElCaloEnergy;
    result &= event->getByLabel( tElCharge, hElCharge );
    if ( hElCharge.isValid() ) ElCharge = *hElCharge;
    result &= event->getByLabel( tElChargeMisIDProb, hElChargeMisIDProb );
    if ( hElChargeMisIDProb.isValid() ) ElChargeMisIDProb = *hElChargeMisIDProb;
    result &= event->getByLabel( tElClosestCtfTrackCharge, hElClosestCtfTrackCharge );
    if ( hElClosestCtfTrackCharge.isValid() ) ElClosestCtfTrackCharge = *hElClosestCtfTrackCharge;
    result &= event->getByLabel( tElClosestCtfTrackEta, hElClosestCtfTrackEta );
    if ( hElClosestCtfTrackEta.isValid() ) ElClosestCtfTrackEta = *hElClosestCtfTrackEta;
    result &= event->getByLabel( tElClosestCtfTrackPhi, hElClosestCtfTrackPhi );
    if ( hElClosestCtfTrackPhi.isValid() ) ElClosestCtfTrackPhi = *hElClosestCtfTrackPhi;
    result &= event->getByLabel( tElClosestCtfTrackPt, hElClosestCtfTrackPt );
    if ( hElClosestCtfTrackPt.isValid() ) ElClosestCtfTrackPt = *hElClosestCtfTrackPt;
    result &= event->getByLabel( tElConvPartnerTrkCharge, hElConvPartnerTrkCharge );
    if ( hElConvPartnerTrkCharge.isValid() ) ElConvPartnerTrkCharge = *hElConvPartnerTrkCharge;
    result &= event->getByLabel( tElConvPartnerTrkDCot, hElConvPartnerTrkDCot );
    if ( hElConvPartnerTrkDCot.isValid() ) ElConvPartnerTrkDCot = *hElConvPartnerTrkDCot;
    result &= event->getByLabel( tElConvPartnerTrkDist, hElConvPartnerTrkDist );
    if ( hElConvPartnerTrkDist.isValid() ) ElConvPartnerTrkDist = *hElConvPartnerTrkDist;
    result &= event->getByLabel( tElConvPartnerTrkEta, hElConvPartnerTrkEta );
    if ( hElConvPartnerTrkEta.isValid() ) ElConvPartnerTrkEta = *hElConvPartnerTrkEta;
    result &= event->getByLabel( tElConvPartnerTrkPhi, hElConvPartnerTrkPhi );
    if ( hElConvPartnerTrkPhi.isValid() ) ElConvPartnerTrkPhi = *hElConvPartnerTrkPhi;
    result &= event->getByLabel( tElConvPartnerTrkPt, hElConvPartnerTrkPt );
    if ( hElConvPartnerTrkPt.isValid() ) ElConvPartnerTrkPt = *hElConvPartnerTrkPt;
    result &= event->getByLabel( tElD0BS, hElD0BS );
    if ( hElD0BS.isValid() ) ElD0BS = *hElD0BS;
    result &= event->getByLabel( tElD0E, hElD0E );
    if ( hElD0E.isValid() ) ElD0E = *hElD0E;
    result &= event->getByLabel( tElD0PV, hElD0PV );
    if ( hElD0PV.isValid() ) ElD0PV = *hElD0PV;
    result &= event->getByLabel( tElDR03EcalRecHitSumEt, hElDR03EcalRecHitSumEt );
    if ( hElDR03EcalRecHitSumEt.isValid() ) ElDR03EcalRecHitSumEt = *hElDR03EcalRecHitSumEt;
    result &= event->getByLabel( tElDR03HcalTowerSumEt, hElDR03HcalTowerSumEt );
    if ( hElDR03HcalTowerSumEt.isValid() ) ElDR03HcalTowerSumEt = *hElDR03HcalTowerSumEt;
    result &= event->getByLabel( tElDR03TkSumPt, hElDR03TkSumPt );
    if ( hElDR03TkSumPt.isValid() ) ElDR03TkSumPt = *hElDR03TkSumPt;
    result &= event->getByLabel( tElDR04EcalRecHitSumEt, hElDR04EcalRecHitSumEt );
    if ( hElDR04EcalRecHitSumEt.isValid() ) ElDR04EcalRecHitSumEt = *hElDR04EcalRecHitSumEt;
    result &= event->getByLabel( tElDR04HcalTowerSumEt, hElDR04HcalTowerSumEt );
    if ( hElDR04HcalTowerSumEt.isValid() ) ElDR04HcalTowerSumEt = *hElDR04HcalTowerSumEt;
    result &= event->getByLabel( tElDR04TkSumPt, hElDR04TkSumPt );
    if ( hElDR04TkSumPt.isValid() ) ElDR04TkSumPt = *hElDR04TkSumPt;
    result &= event->getByLabel( tElDeltaEtaSeedClusterAtCalo, hElDeltaEtaSeedClusterAtCalo );
    if ( hElDeltaEtaSeedClusterAtCalo.isValid() ) ElDeltaEtaSeedClusterAtCalo = *hElDeltaEtaSeedClusterAtCalo;
    result &= event->getByLabel( tElDeltaEtaSuperClusterAtVtx, hElDeltaEtaSuperClusterAtVtx );
    if ( hElDeltaEtaSuperClusterAtVtx.isValid() ) ElDeltaEtaSuperClusterAtVtx = *hElDeltaEtaSuperClusterAtVtx;
    result &= event->getByLabel( tElDeltaPhiSeedClusterAtCalo, hElDeltaPhiSeedClusterAtCalo );
    if ( hElDeltaPhiSeedClusterAtCalo.isValid() ) ElDeltaPhiSeedClusterAtCalo = *hElDeltaPhiSeedClusterAtCalo;
    result &= event->getByLabel( tElDeltaPhiSuperClusterAtVtx, hElDeltaPhiSuperClusterAtVtx );
    if ( hElDeltaPhiSuperClusterAtVtx.isValid() ) ElDeltaPhiSuperClusterAtVtx = *hElDeltaPhiSuperClusterAtVtx;
    result &= event->getByLabel( tElDzBS, hElDzBS );
    if ( hElDzBS.isValid() ) ElDzBS = *hElDzBS;
    result &= event->getByLabel( tElDzE, hElDzE );
    if ( hElDzE.isValid() ) ElDzE = *hElDzE;
    result &= event->getByLabel( tElDzPV, hElDzPV );
    if ( hElDzPV.isValid() ) ElDzPV = *hElDzPV;
    result &= event->getByLabel( tElE, hElE );
    if ( hElE.isValid() ) ElE = *hElE;
    result &= event->getByLabel( tElE1OverE9, hElE1OverE9 );
    if ( hElE1OverE9.isValid() ) ElE1OverE9 = *hElE1OverE9;
    result &= event->getByLabel( tElE1x5, hElE1x5 );
    if ( hElE1x5.isValid() ) ElE1x5 = *hElE1x5;
    result &= event->getByLabel( tElE2x5Max, hElE2x5Max );
    if ( hElE2x5Max.isValid() ) ElE2x5Max = *hElE2x5Max;
    result &= event->getByLabel( tElE5x5, hElE5x5 );
    if ( hElE5x5.isValid() ) ElE5x5 = *hElE5x5;
    result &= event->getByLabel( tElESuperClusterOverP, hElESuperClusterOverP );
    if ( hElESuperClusterOverP.isValid() ) ElESuperClusterOverP = *hElESuperClusterOverP;
    result &= event->getByLabel( tElEcalDriven, hElEcalDriven );
    if ( hElEcalDriven.isValid() ) ElEcalDriven = *hElEcalDriven;
    result &= event->getByLabel( tElEcalEnergyError, hElEcalEnergyError );
    if ( hElEcalEnergyError.isValid() ) ElEcalEnergyError = *hElEcalEnergyError;
    result &= event->getByLabel( tElEleMomentumError, hElEleMomentumError );
    if ( hElEleMomentumError.isValid() ) ElEleMomentumError = *hElEleMomentumError;
    result &= event->getByLabel( tElEt, hElEt );
    if ( hElEt.isValid() ) ElEt = *hElEt;
    result &= event->getByLabel( tElEta, hElEta );
    if ( hElEta.isValid() ) ElEta = *hElEta;
    result &= event->getByLabel( tElEventelPFIsoValueCharged03PFIdStandard, hElEventelPFIsoValueCharged03PFIdStandard );
    if ( hElEventelPFIsoValueCharged03PFIdStandard.isValid() ) ElEventelPFIsoValueCharged03PFIdStandard = *hElEventelPFIsoValueCharged03PFIdStandard;
    result &= event->getByLabel( tElEventelPFIsoValueCharged04PFIdStandard, hElEventelPFIsoValueCharged04PFIdStandard );
    if ( hElEventelPFIsoValueCharged04PFIdStandard.isValid() ) ElEventelPFIsoValueCharged04PFIdStandard = *hElEventelPFIsoValueCharged04PFIdStandard;
    result &= event->getByLabel( tElEventelPFIsoValueGamma03PFIdStandard, hElEventelPFIsoValueGamma03PFIdStandard );
    if ( hElEventelPFIsoValueGamma03PFIdStandard.isValid() ) ElEventelPFIsoValueGamma03PFIdStandard = *hElEventelPFIsoValueGamma03PFIdStandard;
    result &= event->getByLabel( tElEventelPFIsoValueGamma04PFIdStandard, hElEventelPFIsoValueGamma04PFIdStandard );
    if ( hElEventelPFIsoValueGamma04PFIdStandard.isValid() ) ElEventelPFIsoValueGamma04PFIdStandard = *hElEventelPFIsoValueGamma04PFIdStandard;
    result &= event->getByLabel( tElEventelPFIsoValueNeutral03PFIdStandard, hElEventelPFIsoValueNeutral03PFIdStandard );
    if ( hElEventelPFIsoValueNeutral03PFIdStandard.isValid() ) ElEventelPFIsoValueNeutral03PFIdStandard = *hElEventelPFIsoValueNeutral03PFIdStandard;
    result &= event->getByLabel( tElEventelPFIsoValueNeutral04PFIdStandard, hElEventelPFIsoValueNeutral04PFIdStandard );
    if ( hElEventelPFIsoValueNeutral04PFIdStandard.isValid() ) ElEventelPFIsoValueNeutral04PFIdStandard = *hElEventelPFIsoValueNeutral04PFIdStandard;
    result &= event->getByLabel( tElGenE, hElGenE );
    if ( hElGenE.isValid() ) ElGenE = *hElGenE;
    result &= event->getByLabel( tElGenEta, hElGenEta );
    if ( hElGenEta.isValid() ) ElGenEta = *hElGenEta;
    result &= event->getByLabel( tElGenGME, hElGenGME );
    if ( hElGenGME.isValid() ) ElGenGME = *hElGenGME;
    result &= event->getByLabel( tElGenGMEta, hElGenGMEta );
    if ( hElGenGMEta.isValid() ) ElGenGMEta = *hElGenGMEta;
    result &= event->getByLabel( tElGenGMID, hElGenGMID );
    if ( hElGenGMID.isValid() ) ElGenGMID = *hElGenGMID;
    result &= event->getByLabel( tElGenGMPhi, hElGenGMPhi );
    if ( hElGenGMPhi.isValid() ) ElGenGMPhi = *hElGenGMPhi;
    result &= event->getByLabel( tElGenGMPt, hElGenGMPt );
    if ( hElGenGMPt.isValid() ) ElGenGMPt = *hElGenGMPt;
    result &= event->getByLabel( tElGenGMStatus, hElGenGMStatus );
    if ( hElGenGMStatus.isValid() ) ElGenGMStatus = *hElGenGMStatus;
    result &= event->getByLabel( tElGenID, hElGenID );
    if ( hElGenID.isValid() ) ElGenID = *hElGenID;
    result &= event->getByLabel( tElGenME, hElGenME );
    if ( hElGenME.isValid() ) ElGenME = *hElGenME;
    result &= event->getByLabel( tElGenMEta, hElGenMEta );
    if ( hElGenMEta.isValid() ) ElGenMEta = *hElGenMEta;
    result &= event->getByLabel( tElGenMID, hElGenMID );
    if ( hElGenMID.isValid() ) ElGenMID = *hElGenMID;
    result &= event->getByLabel( tElGenMPhi, hElGenMPhi );
    if ( hElGenMPhi.isValid() ) ElGenMPhi = *hElGenMPhi;
    result &= event->getByLabel( tElGenMPt, hElGenMPt );
    if ( hElGenMPt.isValid() ) ElGenMPt = *hElGenMPt;
    result &= event->getByLabel( tElGenMStatus, hElGenMStatus );
    if ( hElGenMStatus.isValid() ) ElGenMStatus = *hElGenMStatus;
    result &= event->getByLabel( tElGenPhi, hElGenPhi );
    if ( hElGenPhi.isValid() ) ElGenPhi = *hElGenPhi;
    result &= event->getByLabel( tElGenPt, hElGenPt );
    if ( hElGenPt.isValid() ) ElGenPt = *hElGenPt;
    result &= event->getByLabel( tElGenStatus, hElGenStatus );
    if ( hElGenStatus.isValid() ) ElGenStatus = *hElGenStatus;
    result &= event->getByLabel( tElGood, hElGood );
    if ( hElGood.isValid() ) ElGood = *hElGood;
    result &= event->getByLabel( tElGsfTkEta, hElGsfTkEta );
    if ( hElGsfTkEta.isValid() ) ElGsfTkEta = *hElGsfTkEta;
    result &= event->getByLabel( tElGsfTkPhi, hElGsfTkPhi );
    if ( hElGsfTkPhi.isValid() ) ElGsfTkPhi = *hElGsfTkPhi;
    result &= event->getByLabel( tElGsfTkPt, hElGsfTkPt );
    if ( hElGsfTkPt.isValid() ) ElGsfTkPt = *hElGsfTkPt;
    result &= event->getByLabel( tElHcalOverEcal, hElHcalOverEcal );
    if ( hElHcalOverEcal.isValid() ) ElHcalOverEcal = *hElHcalOverEcal;
    result &= event->getByLabel( tElIDLoose, hElIDLoose );
    if ( hElIDLoose.isValid() ) ElIDLoose = *hElIDLoose;
    result &= event->getByLabel( tElIDMva, hElIDMva );
    if ( hElIDMva.isValid() ) ElIDMva = *hElIDMva;
    result &= event->getByLabel( tElIDRobustLoose, hElIDRobustLoose );
    if ( hElIDRobustLoose.isValid() ) ElIDRobustLoose = *hElIDRobustLoose;
    result &= event->getByLabel( tElIDRobustTight, hElIDRobustTight );
    if ( hElIDRobustTight.isValid() ) ElIDRobustTight = *hElIDRobustTight;
    result &= event->getByLabel( tElIDTight, hElIDTight );
    if ( hElIDTight.isValid() ) ElIDTight = *hElIDTight;
    result &= event->getByLabel( tElIDsimpleWP80relIso, hElIDsimpleWP80relIso );
    if ( hElIDsimpleWP80relIso.isValid() ) ElIDsimpleWP80relIso = *hElIDsimpleWP80relIso;
    result &= event->getByLabel( tElIDsimpleWP85relIso, hElIDsimpleWP85relIso );
    if ( hElIDsimpleWP85relIso.isValid() ) ElIDsimpleWP85relIso = *hElIDsimpleWP85relIso;
    result &= event->getByLabel( tElIDsimpleWP90relIso, hElIDsimpleWP90relIso );
    if ( hElIDsimpleWP90relIso.isValid() ) ElIDsimpleWP90relIso = *hElIDsimpleWP90relIso;
    result &= event->getByLabel( tElIDsimpleWP95relIso, hElIDsimpleWP95relIso );
    if ( hElIDsimpleWP95relIso.isValid() ) ElIDsimpleWP95relIso = *hElIDsimpleWP95relIso;
    result &= event->getByLabel( tElIDsimpleWPrelIso, hElIDsimpleWPrelIso );
    if ( hElIDsimpleWPrelIso.isValid() ) ElIDsimpleWPrelIso = *hElIDsimpleWPrelIso;
    result &= event->getByLabel( tElInGap, hElInGap );
    if ( hElInGap.isValid() ) ElInGap = *hElInGap;
    result &= event->getByLabel( tElIsIso, hElIsIso );
    if ( hElIsIso.isValid() ) ElIsIso = *hElIsIso;
    result &= event->getByLabel( tElNBrems, hElNBrems );
    if ( hElNBrems.isValid() ) ElNBrems = *hElNBrems;
    result &= event->getByLabel( tElNChi2, hElNChi2 );
    if ( hElNChi2.isValid() ) ElNChi2 = *hElNChi2;
    result &= event->getByLabel( tElNumberOfMissingInnerHits, hElNumberOfMissingInnerHits );
    if ( hElNumberOfMissingInnerHits.isValid() ) ElNumberOfMissingInnerHits = *hElNumberOfMissingInnerHits;
    result &= event->getByLabel( tElPassConversionVeto, hElPassConversionVeto );
    if ( hElPassConversionVeto.isValid() ) ElPassConversionVeto = *hElPassConversionVeto;
    result &= event->getByLabel( tElPfIsoChHad03, hElPfIsoChHad03 );
    if ( hElPfIsoChHad03.isValid() ) ElPfIsoChHad03 = *hElPfIsoChHad03;
    result &= event->getByLabel( tElPfIsoNeHad03, hElPfIsoNeHad03 );
    if ( hElPfIsoNeHad03.isValid() ) ElPfIsoNeHad03 = *hElPfIsoNeHad03;
    result &= event->getByLabel( tElPfIsoPhoton03, hElPfIsoPhoton03 );
    if ( hElPfIsoPhoton03.isValid() ) ElPfIsoPhoton03 = *hElPfIsoPhoton03;
    result &= event->getByLabel( tElPhi, hElPhi );
    if ( hElPhi.isValid() ) ElPhi = *hElPhi;
    result &= event->getByLabel( tElPt, hElPt );
    if ( hElPt.isValid() ) ElPt = *hElPt;
    result &= event->getByLabel( tElPtE, hElPtE );
    if ( hElPtE.isValid() ) ElPtE = *hElPtE;
    result &= event->getByLabel( tElPx, hElPx );
    if ( hElPx.isValid() ) ElPx = *hElPx;
    result &= event->getByLabel( tElPy, hElPy );
    if ( hElPy.isValid() ) ElPy = *hElPy;
    result &= event->getByLabel( tElPz, hElPz );
    if ( hElPz.isValid() ) ElPz = *hElPz;
    result &= event->getByLabel( tElRelIso03, hElRelIso03 );
    if ( hElRelIso03.isValid() ) ElRelIso03 = *hElRelIso03;
    result &= event->getByLabel( tElRelIso04, hElRelIso04 );
    if ( hElRelIso04.isValid() ) ElRelIso04 = *hElRelIso04;
    result &= event->getByLabel( tElS4OverS1, hElS4OverS1 );
    if ( hElS4OverS1.isValid() ) ElS4OverS1 = *hElS4OverS1;
    result &= event->getByLabel( tElSCEta, hElSCEta );
    if ( hElSCEta.isValid() ) ElSCEta = *hElSCEta;
    result &= event->getByLabel( tElSCindex, hElSCindex );
    if ( hElSCindex.isValid() ) ElSCindex = *hElSCindex;
    result &= event->getByLabel( tElScPixCharge, hElScPixCharge );
    if ( hElScPixCharge.isValid() ) ElScPixCharge = *hElScPixCharge;
    result &= event->getByLabel( tElScSeedSeverity, hElScSeedSeverity );
    if ( hElScSeedSeverity.isValid() ) ElScSeedSeverity = *hElScSeedSeverity;
    result &= event->getByLabel( tElSigmaIetaIeta, hElSigmaIetaIeta );
    if ( hElSigmaIetaIeta.isValid() ) ElSigmaIetaIeta = *hElSigmaIetaIeta;
    result &= event->getByLabel( tElTheta, hElTheta );
    if ( hElTheta.isValid() ) ElTheta = *hElTheta;
    result &= event->getByLabel( tElTrackerDriven, hElTrackerDriven );
    if ( hElTrackerDriven.isValid() ) ElTrackerDriven = *hElTrackerDriven;
    result &= event->getByLabel( tElTrkMomAtVtx, hElTrkMomAtVtx );
    if ( hElTrkMomAtVtx.isValid() ) ElTrkMomAtVtx = *hElTrkMomAtVtx;
    result &= event->getByLabel( tElTrkMomentumError, hElTrkMomentumError );
    if ( hElTrkMomentumError.isValid() ) ElTrkMomentumError = *hElTrkMomentumError;
    result &= event->getByLabel( tElelectronPFIsoChHad03, hElelectronPFIsoChHad03 );
    if ( hElelectronPFIsoChHad03.isValid() ) ElelectronPFIsoChHad03 = *hElelectronPFIsoChHad03;
    result &= event->getByLabel( tElelectronPFIsoChHad04, hElelectronPFIsoChHad04 );
    if ( hElelectronPFIsoChHad04.isValid() ) ElelectronPFIsoChHad04 = *hElelectronPFIsoChHad04;
    result &= event->getByLabel( tElelectronPFIsoNHad03, hElelectronPFIsoNHad03 );
    if ( hElelectronPFIsoNHad03.isValid() ) ElelectronPFIsoNHad03 = *hElelectronPFIsoNHad03;
    result &= event->getByLabel( tElelectronPFIsoNHad04, hElelectronPFIsoNHad04 );
    if ( hElelectronPFIsoNHad04.isValid() ) ElelectronPFIsoNHad04 = *hElelectronPFIsoNHad04;
    result &= event->getByLabel( tElelectronPFIsoPhoton03, hElelectronPFIsoPhoton03 );
    if ( hElelectronPFIsoPhoton03.isValid() ) ElelectronPFIsoPhoton03 = *hElelectronPFIsoPhoton03;
    result &= event->getByLabel( tElelectronPFIsoPhoton04, hElelectronPFIsoPhoton04 );
    if ( hElelectronPFIsoPhoton04.isValid() ) ElelectronPFIsoPhoton04 = *hElelectronPFIsoPhoton04;
    result &= event->getByLabel( tElelectronRadPFIsoChHad03, hElelectronRadPFIsoChHad03 );
    if ( hElelectronRadPFIsoChHad03.isValid() ) ElelectronRadPFIsoChHad03 = *hElelectronRadPFIsoChHad03;
    result &= event->getByLabel( tElelectronRadPFIsoChHad04, hElelectronRadPFIsoChHad04 );
    if ( hElelectronRadPFIsoChHad04.isValid() ) ElelectronRadPFIsoChHad04 = *hElelectronRadPFIsoChHad04;
    result &= event->getByLabel( tElelectronRadPFIsoNHad03, hElelectronRadPFIsoNHad03 );
    if ( hElelectronRadPFIsoNHad03.isValid() ) ElelectronRadPFIsoNHad03 = *hElelectronRadPFIsoNHad03;
    result &= event->getByLabel( tElelectronRadPFIsoNHad04, hElelectronRadPFIsoNHad04 );
    if ( hElelectronRadPFIsoNHad04.isValid() ) ElelectronRadPFIsoNHad04 = *hElelectronRadPFIsoNHad04;
    result &= event->getByLabel( tElelectronRadPFIsoPhoton03, hElelectronRadPFIsoPhoton03 );
    if ( hElelectronRadPFIsoPhoton03.isValid() ) ElelectronRadPFIsoPhoton03 = *hElelectronRadPFIsoPhoton03;
    result &= event->getByLabel( tElelectronRadPFIsoPhoton04, hElelectronRadPFIsoPhoton04 );
    if ( hElelectronRadPFIsoPhoton04.isValid() ) ElelectronRadPFIsoPhoton04 = *hElelectronRadPFIsoPhoton04;
    result &= event->getByLabel( tElfbrem, hElfbrem );
    if ( hElfbrem.isValid() ) Elfbrem = *hElfbrem;
    result &= event->getByLabel( tEvent, hEvent );
    if ( hEvent.isValid() ) Event = *hEvent;
    result &= event->getByLabel( tGenJetE, hGenJetE );
    if ( hGenJetE.isValid() ) GenJetE = *hGenJetE;
    result &= event->getByLabel( tGenJetEmE, hGenJetEmE );
    if ( hGenJetEmE.isValid() ) GenJetEmE = *hGenJetEmE;
    result &= event->getByLabel( tGenJetEta, hGenJetEta );
    if ( hGenJetEta.isValid() ) GenJetEta = *hGenJetEta;
    result &= event->getByLabel( tGenJetHadE, hGenJetHadE );
    if ( hGenJetHadE.isValid() ) GenJetHadE = *hGenJetHadE;
    result &= event->getByLabel( tGenJetInvE, hGenJetInvE );
    if ( hGenJetInvE.isValid() ) GenJetInvE = *hGenJetInvE;
    result &= event->getByLabel( tGenJetPhi, hGenJetPhi );
    if ( hGenJetPhi.isValid() ) GenJetPhi = *hGenJetPhi;
    result &= event->getByLabel( tGenJetPt, hGenJetPt );
    if ( hGenJetPt.isValid() ) GenJetPt = *hGenJetPt;
    result &= event->getByLabel( tGenLeptonEta, hGenLeptonEta );
    if ( hGenLeptonEta.isValid() ) GenLeptonEta = *hGenLeptonEta;
    result &= event->getByLabel( tGenLeptonGMEta, hGenLeptonGMEta );
    if ( hGenLeptonGMEta.isValid() ) GenLeptonGMEta = *hGenLeptonGMEta;
    result &= event->getByLabel( tGenLeptonGMID, hGenLeptonGMID );
    if ( hGenLeptonGMID.isValid() ) GenLeptonGMID = *hGenLeptonGMID;
    result &= event->getByLabel( tGenLeptonGMPhi, hGenLeptonGMPhi );
    if ( hGenLeptonGMPhi.isValid() ) GenLeptonGMPhi = *hGenLeptonGMPhi;
    result &= event->getByLabel( tGenLeptonGMPt, hGenLeptonGMPt );
    if ( hGenLeptonGMPt.isValid() ) GenLeptonGMPt = *hGenLeptonGMPt;
    result &= event->getByLabel( tGenLeptonGMStatus, hGenLeptonGMStatus );
    if ( hGenLeptonGMStatus.isValid() ) GenLeptonGMStatus = *hGenLeptonGMStatus;
    result &= event->getByLabel( tGenLeptonID, hGenLeptonID );
    if ( hGenLeptonID.isValid() ) GenLeptonID = *hGenLeptonID;
    result &= event->getByLabel( tGenLeptonMEta, hGenLeptonMEta );
    if ( hGenLeptonMEta.isValid() ) GenLeptonMEta = *hGenLeptonMEta;
    result &= event->getByLabel( tGenLeptonMID, hGenLeptonMID );
    if ( hGenLeptonMID.isValid() ) GenLeptonMID = *hGenLeptonMID;
    result &= event->getByLabel( tGenLeptonMPhi, hGenLeptonMPhi );
    if ( hGenLeptonMPhi.isValid() ) GenLeptonMPhi = *hGenLeptonMPhi;
    result &= event->getByLabel( tGenLeptonMPt, hGenLeptonMPt );
    if ( hGenLeptonMPt.isValid() ) GenLeptonMPt = *hGenLeptonMPt;
    result &= event->getByLabel( tGenLeptonMStatus, hGenLeptonMStatus );
    if ( hGenLeptonMStatus.isValid() ) GenLeptonMStatus = *hGenLeptonMStatus;
    result &= event->getByLabel( tGenLeptonPhi, hGenLeptonPhi );
    if ( hGenLeptonPhi.isValid() ) GenLeptonPhi = *hGenLeptonPhi;
    result &= event->getByLabel( tGenLeptonPt, hGenLeptonPt );
    if ( hGenLeptonPt.isValid() ) GenLeptonPt = *hGenLeptonPt;
    result &= event->getByLabel( tGenMET, hGenMET );
    if ( hGenMET.isValid() ) GenMET = *hGenMET;
    result &= event->getByLabel( tGenMETphi, hGenMETphi );
    if ( hGenMETphi.isValid() ) GenMETphi = *hGenMETphi;
    result &= event->getByLabel( tGenMETpx, hGenMETpx );
    if ( hGenMETpx.isValid() ) GenMETpx = *hGenMETpx;
    result &= event->getByLabel( tGenMETpy, hGenMETpy );
    if ( hGenMETpy.isValid() ) GenMETpy = *hGenMETpy;
    result &= event->getByLabel( tGenPhotonEta, hGenPhotonEta );
    if ( hGenPhotonEta.isValid() ) GenPhotonEta = *hGenPhotonEta;
    result &= event->getByLabel( tGenPhotonMotherID, hGenPhotonMotherID );
    if ( hGenPhotonMotherID.isValid() ) GenPhotonMotherID = *hGenPhotonMotherID;
    result &= event->getByLabel( tGenPhotonMotherStatus, hGenPhotonMotherStatus );
    if ( hGenPhotonMotherStatus.isValid() ) GenPhotonMotherStatus = *hGenPhotonMotherStatus;
    result &= event->getByLabel( tGenPhotonPartonMindR, hGenPhotonPartonMindR );
    if ( hGenPhotonPartonMindR.isValid() ) GenPhotonPartonMindR = *hGenPhotonPartonMindR;
    result &= event->getByLabel( tGenPhotonPhi, hGenPhotonPhi );
    if ( hGenPhotonPhi.isValid() ) GenPhotonPhi = *hGenPhotonPhi;
    result &= event->getByLabel( tGenPhotonPt, hGenPhotonPt );
    if ( hGenPhotonPt.isValid() ) GenPhotonPt = *hGenPhotonPt;
    result &= event->getByLabel( tGenWeight, hGenWeight );
    if ( hGenWeight.isValid() ) GenWeight = *hGenWeight;
    result &= event->getByLabel( tGoodEvent, hGoodEvent );
    if ( hGoodEvent.isValid() ) GoodEvent = *hGoodEvent;
    result &= event->getByLabel( tHBHENoiseFlag, hHBHENoiseFlag );
    if ( hHBHENoiseFlag.isValid() ) HBHENoiseFlag = *hHBHENoiseFlag;
    result &= event->getByLabel( tHBHENoiseFlagIso, hHBHENoiseFlagIso );
    if ( hHBHENoiseFlagIso.isValid() ) HBHENoiseFlagIso = *hHBHENoiseFlagIso;
    result &= event->getByLabel( tHCALEsumx, hHCALEsumx );
    if ( hHCALEsumx.isValid() ) HCALEsumx = *hHCALEsumx;
    result &= event->getByLabel( tHCALEsumy, hHCALEsumy );
    if ( hHCALEsumy.isValid() ) HCALEsumy = *hHCALEsumy;
    result &= event->getByLabel( tHCALEsumz, hHCALEsumz );
    if ( hHCALEsumz.isValid() ) HCALEsumz = *hHCALEsumz;
    result &= event->getByLabel( tHCALMET, hHCALMET );
    if ( hHCALMET.isValid() ) HCALMET = *hHCALMET;
    result &= event->getByLabel( tHCALMETPhi, hHCALMETPhi );
    if ( hHCALMETPhi.isValid() ) HCALMETPhi = *hHCALMETPhi;
    result &= event->getByLabel( tHCALMETeta, hHCALMETeta );
    if ( hHCALMETeta.isValid() ) HCALMETeta = *hHCALMETeta;
    result &= event->getByLabel( tHCALSumEt, hHCALSumEt );
    if ( hHCALSumEt.isValid() ) HCALSumEt = *hHCALSumEt;
    result &= event->getByLabel( tHLTObjectEta0, hHLTObjectEta0 );
    if ( hHLTObjectEta0.isValid() ) HLTObjectEta0 = *hHLTObjectEta0;
    result &= event->getByLabel( tHLTObjectEta1, hHLTObjectEta1 );
    if ( hHLTObjectEta1.isValid() ) HLTObjectEta1 = *hHLTObjectEta1;
    result &= event->getByLabel( tHLTObjectEta2, hHLTObjectEta2 );
    if ( hHLTObjectEta2.isValid() ) HLTObjectEta2 = *hHLTObjectEta2;
    result &= event->getByLabel( tHLTObjectEta3, hHLTObjectEta3 );
    if ( hHLTObjectEta3.isValid() ) HLTObjectEta3 = *hHLTObjectEta3;
    result &= event->getByLabel( tHLTObjectEta4, hHLTObjectEta4 );
    if ( hHLTObjectEta4.isValid() ) HLTObjectEta4 = *hHLTObjectEta4;
    result &= event->getByLabel( tHLTObjectEta5, hHLTObjectEta5 );
    if ( hHLTObjectEta5.isValid() ) HLTObjectEta5 = *hHLTObjectEta5;
    result &= event->getByLabel( tHLTObjectEta6, hHLTObjectEta6 );
    if ( hHLTObjectEta6.isValid() ) HLTObjectEta6 = *hHLTObjectEta6;
    result &= event->getByLabel( tHLTObjectEta7, hHLTObjectEta7 );
    if ( hHLTObjectEta7.isValid() ) HLTObjectEta7 = *hHLTObjectEta7;
    result &= event->getByLabel( tHLTObjectEta8, hHLTObjectEta8 );
    if ( hHLTObjectEta8.isValid() ) HLTObjectEta8 = *hHLTObjectEta8;
    result &= event->getByLabel( tHLTObjectEta9, hHLTObjectEta9 );
    if ( hHLTObjectEta9.isValid() ) HLTObjectEta9 = *hHLTObjectEta9;
    result &= event->getByLabel( tHLTObjectID0, hHLTObjectID0 );
    if ( hHLTObjectID0.isValid() ) HLTObjectID0 = *hHLTObjectID0;
    result &= event->getByLabel( tHLTObjectID1, hHLTObjectID1 );
    if ( hHLTObjectID1.isValid() ) HLTObjectID1 = *hHLTObjectID1;
    result &= event->getByLabel( tHLTObjectID2, hHLTObjectID2 );
    if ( hHLTObjectID2.isValid() ) HLTObjectID2 = *hHLTObjectID2;
    result &= event->getByLabel( tHLTObjectID3, hHLTObjectID3 );
    if ( hHLTObjectID3.isValid() ) HLTObjectID3 = *hHLTObjectID3;
    result &= event->getByLabel( tHLTObjectID4, hHLTObjectID4 );
    if ( hHLTObjectID4.isValid() ) HLTObjectID4 = *hHLTObjectID4;
    result &= event->getByLabel( tHLTObjectID5, hHLTObjectID5 );
    if ( hHLTObjectID5.isValid() ) HLTObjectID5 = *hHLTObjectID5;
    result &= event->getByLabel( tHLTObjectID6, hHLTObjectID6 );
    if ( hHLTObjectID6.isValid() ) HLTObjectID6 = *hHLTObjectID6;
    result &= event->getByLabel( tHLTObjectID7, hHLTObjectID7 );
    if ( hHLTObjectID7.isValid() ) HLTObjectID7 = *hHLTObjectID7;
    result &= event->getByLabel( tHLTObjectID8, hHLTObjectID8 );
    if ( hHLTObjectID8.isValid() ) HLTObjectID8 = *hHLTObjectID8;
    result &= event->getByLabel( tHLTObjectID9, hHLTObjectID9 );
    if ( hHLTObjectID9.isValid() ) HLTObjectID9 = *hHLTObjectID9;
    result &= event->getByLabel( tHLTObjectPhi0, hHLTObjectPhi0 );
    if ( hHLTObjectPhi0.isValid() ) HLTObjectPhi0 = *hHLTObjectPhi0;
    result &= event->getByLabel( tHLTObjectPhi1, hHLTObjectPhi1 );
    if ( hHLTObjectPhi1.isValid() ) HLTObjectPhi1 = *hHLTObjectPhi1;
    result &= event->getByLabel( tHLTObjectPhi2, hHLTObjectPhi2 );
    if ( hHLTObjectPhi2.isValid() ) HLTObjectPhi2 = *hHLTObjectPhi2;
    result &= event->getByLabel( tHLTObjectPhi3, hHLTObjectPhi3 );
    if ( hHLTObjectPhi3.isValid() ) HLTObjectPhi3 = *hHLTObjectPhi3;
    result &= event->getByLabel( tHLTObjectPhi4, hHLTObjectPhi4 );
    if ( hHLTObjectPhi4.isValid() ) HLTObjectPhi4 = *hHLTObjectPhi4;
    result &= event->getByLabel( tHLTObjectPhi5, hHLTObjectPhi5 );
    if ( hHLTObjectPhi5.isValid() ) HLTObjectPhi5 = *hHLTObjectPhi5;
    result &= event->getByLabel( tHLTObjectPhi6, hHLTObjectPhi6 );
    if ( hHLTObjectPhi6.isValid() ) HLTObjectPhi6 = *hHLTObjectPhi6;
    result &= event->getByLabel( tHLTObjectPhi7, hHLTObjectPhi7 );
    if ( hHLTObjectPhi7.isValid() ) HLTObjectPhi7 = *hHLTObjectPhi7;
    result &= event->getByLabel( tHLTObjectPhi8, hHLTObjectPhi8 );
    if ( hHLTObjectPhi8.isValid() ) HLTObjectPhi8 = *hHLTObjectPhi8;
    result &= event->getByLabel( tHLTObjectPhi9, hHLTObjectPhi9 );
    if ( hHLTObjectPhi9.isValid() ) HLTObjectPhi9 = *hHLTObjectPhi9;
    result &= event->getByLabel( tHLTObjectPt0, hHLTObjectPt0 );
    if ( hHLTObjectPt0.isValid() ) HLTObjectPt0 = *hHLTObjectPt0;
    result &= event->getByLabel( tHLTObjectPt1, hHLTObjectPt1 );
    if ( hHLTObjectPt1.isValid() ) HLTObjectPt1 = *hHLTObjectPt1;
    result &= event->getByLabel( tHLTObjectPt2, hHLTObjectPt2 );
    if ( hHLTObjectPt2.isValid() ) HLTObjectPt2 = *hHLTObjectPt2;
    result &= event->getByLabel( tHLTObjectPt3, hHLTObjectPt3 );
    if ( hHLTObjectPt3.isValid() ) HLTObjectPt3 = *hHLTObjectPt3;
    result &= event->getByLabel( tHLTObjectPt4, hHLTObjectPt4 );
    if ( hHLTObjectPt4.isValid() ) HLTObjectPt4 = *hHLTObjectPt4;
    result &= event->getByLabel( tHLTObjectPt5, hHLTObjectPt5 );
    if ( hHLTObjectPt5.isValid() ) HLTObjectPt5 = *hHLTObjectPt5;
    result &= event->getByLabel( tHLTObjectPt6, hHLTObjectPt6 );
    if ( hHLTObjectPt6.isValid() ) HLTObjectPt6 = *hHLTObjectPt6;
    result &= event->getByLabel( tHLTObjectPt7, hHLTObjectPt7 );
    if ( hHLTObjectPt7.isValid() ) HLTObjectPt7 = *hHLTObjectPt7;
    result &= event->getByLabel( tHLTObjectPt8, hHLTObjectPt8 );
    if ( hHLTObjectPt8.isValid() ) HLTObjectPt8 = *hHLTObjectPt8;
    result &= event->getByLabel( tHLTObjectPt9, hHLTObjectPt9 );
    if ( hHLTObjectPt9.isValid() ) HLTObjectPt9 = *hHLTObjectPt9;
    result &= event->getByLabel( tHLTPrescale, hHLTPrescale );
    if ( hHLTPrescale.isValid() ) HLTPrescale = *hHLTPrescale;
    result &= event->getByLabel( tHLTResults, hHLTResults );
    if ( hHLTResults.isValid() ) HLTResults = *hHLTResults;
    result &= event->getByLabel( tJArea, hJArea );
    if ( hJArea.isValid() ) JArea = *hJArea;
    result &= event->getByLabel( tJBetaStar, hJBetaStar );
    if ( hJBetaStar.isValid() ) JBetaStar = *hJBetaStar;
    result &= event->getByLabel( tJChargedEmFrac, hJChargedEmFrac );
    if ( hJChargedEmFrac.isValid() ) JChargedEmFrac = *hJChargedEmFrac;
    result &= event->getByLabel( tJChargedHadFrac, hJChargedHadFrac );
    if ( hJChargedHadFrac.isValid() ) JChargedHadFrac = *hJChargedHadFrac;
    result &= event->getByLabel( tJChargedMuEnergyFrac, hJChargedMuEnergyFrac );
    if ( hJChargedMuEnergyFrac.isValid() ) JChargedMuEnergyFrac = *hJChargedMuEnergyFrac;
    result &= event->getByLabel( tJE, hJE );
    if ( hJE.isValid() ) JE = *hJE;
    result &= event->getByLabel( tJEcorr, hJEcorr );
    if ( hJEcorr.isValid() ) JEcorr = *hJEcorr;
    result &= event->getByLabel( tJEt, hJEt );
    if ( hJEt.isValid() ) JEt = *hJEt;
    result &= event->getByLabel( tJEta, hJEta );
    if ( hJEta.isValid() ) JEta = *hJEta;
    result &= event->getByLabel( tJEtaRms, hJEtaRms );
    if ( hJEtaRms.isValid() ) JEtaRms = *hJEtaRms;
    result &= event->getByLabel( tJGenJetIndex, hJGenJetIndex );
    if ( hJGenJetIndex.isValid() ) JGenJetIndex = *hJGenJetIndex;
    result &= event->getByLabel( tJGood, hJGood );
    if ( hJGood.isValid() ) JGood = *hJGood;
    result &= event->getByLabel( tJHFEMFrac, hJHFEMFrac );
    if ( hJHFEMFrac.isValid() ) JHFEMFrac = *hJHFEMFrac;
    result &= event->getByLabel( tJHFHadFrac, hJHFHadFrac );
    if ( hJHFHadFrac.isValid() ) JHFHadFrac = *hJHFHadFrac;
    result &= event->getByLabel( tJMass, hJMass );
    if ( hJMass.isValid() ) JMass = *hJMass;
    result &= event->getByLabel( tJNAssoTracks, hJNAssoTracks );
    if ( hJNAssoTracks.isValid() ) JNAssoTracks = *hJNAssoTracks;
    result &= event->getByLabel( tJNConstituents, hJNConstituents );
    if ( hJNConstituents.isValid() ) JNConstituents = *hJNConstituents;
    result &= event->getByLabel( tJNNeutrals, hJNNeutrals );
    if ( hJNNeutrals.isValid() ) JNNeutrals = *hJNNeutrals;
    result &= event->getByLabel( tJNeutralEmFrac, hJNeutralEmFrac );
    if ( hJNeutralEmFrac.isValid() ) JNeutralEmFrac = *hJNeutralEmFrac;
    result &= event->getByLabel( tJNeutralHadFrac, hJNeutralHadFrac );
    if ( hJNeutralHadFrac.isValid() ) JNeutralHadFrac = *hJNeutralHadFrac;
    result &= event->getByLabel( tJPhi, hJPhi );
    if ( hJPhi.isValid() ) JPhi = *hJPhi;
    result &= event->getByLabel( tJPhiRms, hJPhiRms );
    if ( hJPhiRms.isValid() ) JPhiRms = *hJPhiRms;
    result &= event->getByLabel( tJPhoFrac, hJPhoFrac );
    if ( hJPhoFrac.isValid() ) JPhoFrac = *hJPhoFrac;
    result &= event->getByLabel( tJPt, hJPt );
    if ( hJPt.isValid() ) JPt = *hJPt;
    result &= event->getByLabel( tJPtD, hJPtD );
    if ( hJPtD.isValid() ) JPtD = *hJPtD;
    result &= event->getByLabel( tJPx, hJPx );
    if ( hJPx.isValid() ) JPx = *hJPx;
    result &= event->getByLabel( tJPy, hJPy );
    if ( hJPy.isValid() ) JPy = *hJPy;
    result &= event->getByLabel( tJPz, hJPz );
    if ( hJPz.isValid() ) JPz = *hJPz;
    result &= event->getByLabel( tJRMSCand, hJRMSCand );
    if ( hJRMSCand.isValid() ) JRMSCand = *hJRMSCand;
    result &= event->getByLabel( tJVtxExx, hJVtxExx );
    if ( hJVtxExx.isValid() ) JVtxExx = *hJVtxExx;
    result &= event->getByLabel( tJVtxEyx, hJVtxEyx );
    if ( hJVtxEyx.isValid() ) JVtxEyx = *hJVtxEyx;
    result &= event->getByLabel( tJVtxEyy, hJVtxEyy );
    if ( hJVtxEyy.isValid() ) JVtxEyy = *hJVtxEyy;
    result &= event->getByLabel( tJVtxEzx, hJVtxEzx );
    if ( hJVtxEzx.isValid() ) JVtxEzx = *hJVtxEzx;
    result &= event->getByLabel( tJVtxEzy, hJVtxEzy );
    if ( hJVtxEzy.isValid() ) JVtxEzy = *hJVtxEzy;
    result &= event->getByLabel( tJVtxEzz, hJVtxEzz );
    if ( hJVtxEzz.isValid() ) JVtxEzz = *hJVtxEzz;
    result &= event->getByLabel( tJVtxNChi2, hJVtxNChi2 );
    if ( hJVtxNChi2.isValid() ) JVtxNChi2 = *hJVtxNChi2;
    result &= event->getByLabel( tJVtxx, hJVtxx );
    if ( hJVtxx.isValid() ) JVtxx = *hJVtxx;
    result &= event->getByLabel( tJVtxy, hJVtxy );
    if ( hJVtxy.isValid() ) JVtxy = *hJVtxy;
    result &= event->getByLabel( tJVtxz, hJVtxz );
    if ( hJVtxz.isValid() ) JVtxz = *hJVtxz;
    result &= event->getByLabel( tJeMinDR, hJeMinDR );
    if ( hJeMinDR.isValid() ) JeMinDR = *hJeMinDR;
    result &= event->getByLabel( tJnewPFCombinedSecondaryVertexBPFJetTags, hJnewPFCombinedSecondaryVertexBPFJetTags );
    if ( hJnewPFCombinedSecondaryVertexBPFJetTags.isValid() ) JnewPFCombinedSecondaryVertexBPFJetTags = *hJnewPFCombinedSecondaryVertexBPFJetTags;
    result &= event->getByLabel( tJnewPFCombinedSecondaryVertexMVABPFJetTags, hJnewPFCombinedSecondaryVertexMVABPFJetTags );
    if ( hJnewPFCombinedSecondaryVertexMVABPFJetTags.isValid() ) JnewPFCombinedSecondaryVertexMVABPFJetTags = *hJnewPFCombinedSecondaryVertexMVABPFJetTags;
    result &= event->getByLabel( tJnewPFJetBProbabilityBPFJetTags, hJnewPFJetBProbabilityBPFJetTags );
    if ( hJnewPFJetBProbabilityBPFJetTags.isValid() ) JnewPFJetBProbabilityBPFJetTags = *hJnewPFJetBProbabilityBPFJetTags;
    result &= event->getByLabel( tJnewPFJetProbabilityBPFJetTags, hJnewPFJetProbabilityBPFJetTags );
    if ( hJnewPFJetProbabilityBPFJetTags.isValid() ) JnewPFJetProbabilityBPFJetTags = *hJnewPFJetProbabilityBPFJetTags;
    result &= event->getByLabel( tJnewPFSimpleSecondaryVertexHighEffBJetTags, hJnewPFSimpleSecondaryVertexHighEffBJetTags );
    if ( hJnewPFSimpleSecondaryVertexHighEffBJetTags.isValid() ) JnewPFSimpleSecondaryVertexHighEffBJetTags = *hJnewPFSimpleSecondaryVertexHighEffBJetTags;
    result &= event->getByLabel( tJnewPFSimpleSecondaryVertexHighPurBJetTags, hJnewPFSimpleSecondaryVertexHighPurBJetTags );
    if ( hJnewPFSimpleSecondaryVertexHighPurBJetTags.isValid() ) JnewPFSimpleSecondaryVertexHighPurBJetTags = *hJnewPFSimpleSecondaryVertexHighPurBJetTags;
    result &= event->getByLabel( tJnewPFTrackCountingHighEffBJetTags, hJnewPFTrackCountingHighEffBJetTags );
    if ( hJnewPFTrackCountingHighEffBJetTags.isValid() ) JnewPFTrackCountingHighEffBJetTags = *hJnewPFTrackCountingHighEffBJetTags;
    result &= event->getByLabel( tJnewPFTrackCountingHighPurBJetTags, hJnewPFTrackCountingHighPurBJetTags );
    if ( hJnewPFTrackCountingHighPurBJetTags.isValid() ) JnewPFTrackCountingHighPurBJetTags = *hJnewPFTrackCountingHighPurBJetTags;
    result &= event->getByLabel( tJtrk1px, hJtrk1px );
    if ( hJtrk1px.isValid() ) Jtrk1px = *hJtrk1px;
    result &= event->getByLabel( tJtrk1py, hJtrk1py );
    if ( hJtrk1py.isValid() ) Jtrk1py = *hJtrk1py;
    result &= event->getByLabel( tJtrk1pz, hJtrk1pz );
    if ( hJtrk1pz.isValid() ) Jtrk1pz = *hJtrk1pz;
    result &= event->getByLabel( tJtrk2px, hJtrk2px );
    if ( hJtrk2px.isValid() ) Jtrk2px = *hJtrk2px;
    result &= event->getByLabel( tJtrk2py, hJtrk2py );
    if ( hJtrk2py.isValid() ) Jtrk2py = *hJtrk2py;
    result &= event->getByLabel( tJtrk2pz, hJtrk2pz );
    if ( hJtrk2pz.isValid() ) Jtrk2pz = *hJtrk2pz;
    result &= event->getByLabel( tJtrk3px, hJtrk3px );
    if ( hJtrk3px.isValid() ) Jtrk3px = *hJtrk3px;
    result &= event->getByLabel( tJtrk3py, hJtrk3py );
    if ( hJtrk3py.isValid() ) Jtrk3py = *hJtrk3py;
    result &= event->getByLabel( tJtrk3pz, hJtrk3pz );
    if ( hJtrk3pz.isValid() ) Jtrk3pz = *hJtrk3pz;
    result &= event->getByLabel( tL1PhysResults, hL1PhysResults );
    if ( hL1PhysResults.isValid() ) L1PhysResults = *hL1PhysResults;
    result &= event->getByLabel( tL1TechResults, hL1TechResults );
    if ( hL1TechResults.isValid() ) L1TechResults = *hL1TechResults;
    result &= event->getByLabel( tLumiSection, hLumiSection );
    if ( hLumiSection.isValid() ) LumiSection = *hLumiSection;
    result &= event->getByLabel( tM0, hM0 );
    if ( hM0.isValid() ) M0 = *hM0;
    result &= event->getByLabel( tM12, hM12 );
    if ( hM12.isValid() ) M12 = *hM12;
    result &= event->getByLabel( tMETR12, hMETR12 );
    if ( hMETR12.isValid() ) METR12 = *hMETR12;
    result &= event->getByLabel( tMETR21, hMETR21 );
    if ( hMETR21.isValid() ) METR21 = *hMETR21;
    result &= event->getByLabel( tMassChi, hMassChi );
    if ( hMassChi.isValid() ) MassChi = *hMassChi;
    result &= event->getByLabel( tMassGlu, hMassGlu );
    if ( hMassGlu.isValid() ) MassGlu = *hMassGlu;
    result &= event->getByLabel( tMassLSP, hMassLSP );
    if ( hMassLSP.isValid() ) MassLSP = *hMassLSP;
    result &= event->getByLabel( tMaxElExceed, hMaxElExceed );
    if ( hMaxElExceed.isValid() ) MaxElExceed = *hMaxElExceed;
    result &= event->getByLabel( tMaxGenJetExceed, hMaxGenJetExceed );
    if ( hMaxGenJetExceed.isValid() ) MaxGenJetExceed = *hMaxGenJetExceed;
    result &= event->getByLabel( tMaxGenLepExceed, hMaxGenLepExceed );
    if ( hMaxGenLepExceed.isValid() ) MaxGenLepExceed = *hMaxGenLepExceed;
    result &= event->getByLabel( tMaxGenPartExceed, hMaxGenPartExceed );
    if ( hMaxGenPartExceed.isValid() ) MaxGenPartExceed = *hMaxGenPartExceed;
    result &= event->getByLabel( tMaxGenPhoExceed, hMaxGenPhoExceed );
    if ( hMaxGenPhoExceed.isValid() ) MaxGenPhoExceed = *hMaxGenPhoExceed;
    result &= event->getByLabel( tMaxJetExceed, hMaxJetExceed );
    if ( hMaxJetExceed.isValid() ) MaxJetExceed = *hMaxJetExceed;
    result &= event->getByLabel( tMaxMuExceed, hMaxMuExceed );
    if ( hMaxMuExceed.isValid() ) MaxMuExceed = *hMaxMuExceed;
    result &= event->getByLabel( tMaxPhotonsExceed, hMaxPhotonsExceed );
    if ( hMaxPhotonsExceed.isValid() ) MaxPhotonsExceed = *hMaxPhotonsExceed;
    result &= event->getByLabel( tMaxTrkExceed, hMaxTrkExceed );
    if ( hMaxTrkExceed.isValid() ) MaxTrkExceed = *hMaxTrkExceed;
    result &= event->getByLabel( tMaxUncJetExceed, hMaxUncJetExceed );
    if ( hMaxUncJetExceed.isValid() ) MaxUncJetExceed = *hMaxUncJetExceed;
    result &= event->getByLabel( tMaxVerticesExceed, hMaxVerticesExceed );
    if ( hMaxVerticesExceed.isValid() ) MaxVerticesExceed = *hMaxVerticesExceed;
    result &= event->getByLabel( tMuCaloComp, hMuCaloComp );
    if ( hMuCaloComp.isValid() ) MuCaloComp = *hMuCaloComp;
    result &= event->getByLabel( tMuCharge, hMuCharge );
    if ( hMuCharge.isValid() ) MuCharge = *hMuCharge;
    result &= event->getByLabel( tMuD0BS, hMuD0BS );
    if ( hMuD0BS.isValid() ) MuD0BS = *hMuD0BS;
    result &= event->getByLabel( tMuD0E, hMuD0E );
    if ( hMuD0E.isValid() ) MuD0E = *hMuD0E;
    result &= event->getByLabel( tMuD0PV, hMuD0PV );
    if ( hMuD0PV.isValid() ) MuD0PV = *hMuD0PV;
    result &= event->getByLabel( tMuDzBS, hMuDzBS );
    if ( hMuDzBS.isValid() ) MuDzBS = *hMuDzBS;
    result &= event->getByLabel( tMuDzE, hMuDzE );
    if ( hMuDzE.isValid() ) MuDzE = *hMuDzE;
    result &= event->getByLabel( tMuDzPV, hMuDzPV );
    if ( hMuDzPV.isValid() ) MuDzPV = *hMuDzPV;
    result &= event->getByLabel( tMuE, hMuE );
    if ( hMuE.isValid() ) MuE = *hMuE;
    result &= event->getByLabel( tMuEem, hMuEem );
    if ( hMuEem.isValid() ) MuEem = *hMuEem;
    result &= event->getByLabel( tMuEhad, hMuEhad );
    if ( hMuEhad.isValid() ) MuEhad = *hMuEhad;
    result &= event->getByLabel( tMuEt, hMuEt );
    if ( hMuEt.isValid() ) MuEt = *hMuEt;
    result &= event->getByLabel( tMuEta, hMuEta );
    if ( hMuEta.isValid() ) MuEta = *hMuEta;
    result &= event->getByLabel( tMuGenE, hMuGenE );
    if ( hMuGenE.isValid() ) MuGenE = *hMuGenE;
    result &= event->getByLabel( tMuGenEta, hMuGenEta );
    if ( hMuGenEta.isValid() ) MuGenEta = *hMuGenEta;
    result &= event->getByLabel( tMuGenGME, hMuGenGME );
    if ( hMuGenGME.isValid() ) MuGenGME = *hMuGenGME;
    result &= event->getByLabel( tMuGenGMEta, hMuGenGMEta );
    if ( hMuGenGMEta.isValid() ) MuGenGMEta = *hMuGenGMEta;
    result &= event->getByLabel( tMuGenGMID, hMuGenGMID );
    if ( hMuGenGMID.isValid() ) MuGenGMID = *hMuGenGMID;
    result &= event->getByLabel( tMuGenGMPhi, hMuGenGMPhi );
    if ( hMuGenGMPhi.isValid() ) MuGenGMPhi = *hMuGenGMPhi;
    result &= event->getByLabel( tMuGenGMPt, hMuGenGMPt );
    if ( hMuGenGMPt.isValid() ) MuGenGMPt = *hMuGenGMPt;
    result &= event->getByLabel( tMuGenGMStatus, hMuGenGMStatus );
    if ( hMuGenGMStatus.isValid() ) MuGenGMStatus = *hMuGenGMStatus;
    result &= event->getByLabel( tMuGenID, hMuGenID );
    if ( hMuGenID.isValid() ) MuGenID = *hMuGenID;
    result &= event->getByLabel( tMuGenME, hMuGenME );
    if ( hMuGenME.isValid() ) MuGenME = *hMuGenME;
    result &= event->getByLabel( tMuGenMEta, hMuGenMEta );
    if ( hMuGenMEta.isValid() ) MuGenMEta = *hMuGenMEta;
    result &= event->getByLabel( tMuGenMID, hMuGenMID );
    if ( hMuGenMID.isValid() ) MuGenMID = *hMuGenMID;
    result &= event->getByLabel( tMuGenMPhi, hMuGenMPhi );
    if ( hMuGenMPhi.isValid() ) MuGenMPhi = *hMuGenMPhi;
    result &= event->getByLabel( tMuGenMPt, hMuGenMPt );
    if ( hMuGenMPt.isValid() ) MuGenMPt = *hMuGenMPt;
    result &= event->getByLabel( tMuGenMStatus, hMuGenMStatus );
    if ( hMuGenMStatus.isValid() ) MuGenMStatus = *hMuGenMStatus;
    result &= event->getByLabel( tMuGenPhi, hMuGenPhi );
    if ( hMuGenPhi.isValid() ) MuGenPhi = *hMuGenPhi;
    result &= event->getByLabel( tMuGenPt, hMuGenPt );
    if ( hMuGenPt.isValid() ) MuGenPt = *hMuGenPt;
    result &= event->getByLabel( tMuGenStatus, hMuGenStatus );
    if ( hMuGenStatus.isValid() ) MuGenStatus = *hMuGenStatus;
    result &= event->getByLabel( tMuGood, hMuGood );
    if ( hMuGood.isValid() ) MuGood = *hMuGood;
    result &= event->getByLabel( tMuInnerTkNChi2, hMuInnerTkNChi2 );
    if ( hMuInnerTkNChi2.isValid() ) MuInnerTkNChi2 = *hMuInnerTkNChi2;
    result &= event->getByLabel( tMuInnerTkPt, hMuInnerTkPt );
    if ( hMuInnerTkPt.isValid() ) MuInnerTkPt = *hMuInnerTkPt;
    result &= event->getByLabel( tMuIsAllArbitrated, hMuIsAllArbitrated );
    if ( hMuIsAllArbitrated.isValid() ) MuIsAllArbitrated = *hMuIsAllArbitrated;
    result &= event->getByLabel( tMuIsAllStaMuons, hMuIsAllStaMuons );
    if ( hMuIsAllStaMuons.isValid() ) MuIsAllStaMuons = *hMuIsAllStaMuons;
    result &= event->getByLabel( tMuIsAllTrkMuons, hMuIsAllTrkMuons );
    if ( hMuIsAllTrkMuons.isValid() ) MuIsAllTrkMuons = *hMuIsAllTrkMuons;
    result &= event->getByLabel( tMuIsGMPT, hMuIsGMPT );
    if ( hMuIsGMPT.isValid() ) MuIsGMPT = *hMuIsGMPT;
    result &= event->getByLabel( tMuIsGMStaChiComp, hMuIsGMStaChiComp );
    if ( hMuIsGMStaChiComp.isValid() ) MuIsGMStaChiComp = *hMuIsGMStaChiComp;
    result &= event->getByLabel( tMuIsGMTkChiComp, hMuIsGMTkChiComp );
    if ( hMuIsGMTkChiComp.isValid() ) MuIsGMTkChiComp = *hMuIsGMTkChiComp;
    result &= event->getByLabel( tMuIsGMTkKinkTight, hMuIsGMTkKinkTight );
    if ( hMuIsGMTkKinkTight.isValid() ) MuIsGMTkKinkTight = *hMuIsGMTkKinkTight;
    result &= event->getByLabel( tMuIsGlobalMuon, hMuIsGlobalMuon );
    if ( hMuIsGlobalMuon.isValid() ) MuIsGlobalMuon = *hMuIsGlobalMuon;
    result &= event->getByLabel( tMuIsIso, hMuIsIso );
    if ( hMuIsIso.isValid() ) MuIsIso = *hMuIsIso;
    result &= event->getByLabel( tMuIsPFMuon, hMuIsPFMuon );
    if ( hMuIsPFMuon.isValid() ) MuIsPFMuon = *hMuIsPFMuon;
    result &= event->getByLabel( tMuIsTM2DCompLoose, hMuIsTM2DCompLoose );
    if ( hMuIsTM2DCompLoose.isValid() ) MuIsTM2DCompLoose = *hMuIsTM2DCompLoose;
    result &= event->getByLabel( tMuIsTM2DCompTight, hMuIsTM2DCompTight );
    if ( hMuIsTM2DCompTight.isValid() ) MuIsTM2DCompTight = *hMuIsTM2DCompTight;
    result &= event->getByLabel( tMuIsTMLSAngLoose, hMuIsTMLSAngLoose );
    if ( hMuIsTMLSAngLoose.isValid() ) MuIsTMLSAngLoose = *hMuIsTMLSAngLoose;
    result &= event->getByLabel( tMuIsTMLSAngTight, hMuIsTMLSAngTight );
    if ( hMuIsTMLSAngTight.isValid() ) MuIsTMLSAngTight = *hMuIsTMLSAngTight;
    result &= event->getByLabel( tMuIsTMLSLoose, hMuIsTMLSLoose );
    if ( hMuIsTMLSLoose.isValid() ) MuIsTMLSLoose = *hMuIsTMLSLoose;
    result &= event->getByLabel( tMuIsTMLSOptLowPtLoose, hMuIsTMLSOptLowPtLoose );
    if ( hMuIsTMLSOptLowPtLoose.isValid() ) MuIsTMLSOptLowPtLoose = *hMuIsTMLSOptLowPtLoose;
    result &= event->getByLabel( tMuIsTMLSTight, hMuIsTMLSTight );
    if ( hMuIsTMLSTight.isValid() ) MuIsTMLSTight = *hMuIsTMLSTight;
    result &= event->getByLabel( tMuIsTMOneStationAngLoose, hMuIsTMOneStationAngLoose );
    if ( hMuIsTMOneStationAngLoose.isValid() ) MuIsTMOneStationAngLoose = *hMuIsTMOneStationAngLoose;
    result &= event->getByLabel( tMuIsTMOneStationAngTight, hMuIsTMOneStationAngTight );
    if ( hMuIsTMOneStationAngTight.isValid() ) MuIsTMOneStationAngTight = *hMuIsTMOneStationAngTight;
    result &= event->getByLabel( tMuIsTMOneStationLoose, hMuIsTMOneStationLoose );
    if ( hMuIsTMOneStationLoose.isValid() ) MuIsTMOneStationLoose = *hMuIsTMOneStationLoose;
    result &= event->getByLabel( tMuIsTMOneStationTight, hMuIsTMOneStationTight );
    if ( hMuIsTMOneStationTight.isValid() ) MuIsTMOneStationTight = *hMuIsTMOneStationTight;
    result &= event->getByLabel( tMuIsTrackerMuon, hMuIsTrackerMuon );
    if ( hMuIsTrackerMuon.isValid() ) MuIsTrackerMuon = *hMuIsTrackerMuon;
    result &= event->getByLabel( tMuIsTrkMuonArbitrated, hMuIsTrkMuonArbitrated );
    if ( hMuIsTrkMuonArbitrated.isValid() ) MuIsTrkMuonArbitrated = *hMuIsTrkMuonArbitrated;
    result &= event->getByLabel( tMuIso03EMVetoEt, hMuIso03EMVetoEt );
    if ( hMuIso03EMVetoEt.isValid() ) MuIso03EMVetoEt = *hMuIso03EMVetoEt;
    result &= event->getByLabel( tMuIso03EmEt, hMuIso03EmEt );
    if ( hMuIso03EmEt.isValid() ) MuIso03EmEt = *hMuIso03EmEt;
    result &= event->getByLabel( tMuIso03HadEt, hMuIso03HadEt );
    if ( hMuIso03HadEt.isValid() ) MuIso03HadEt = *hMuIso03HadEt;
    result &= event->getByLabel( tMuIso03HadVetoEt, hMuIso03HadVetoEt );
    if ( hMuIso03HadVetoEt.isValid() ) MuIso03HadVetoEt = *hMuIso03HadVetoEt;
    result &= event->getByLabel( tMuIso03SumPt, hMuIso03SumPt );
    if ( hMuIso03SumPt.isValid() ) MuIso03SumPt = *hMuIso03SumPt;
    result &= event->getByLabel( tMuIso05EmEt, hMuIso05EmEt );
    if ( hMuIso05EmEt.isValid() ) MuIso05EmEt = *hMuIso05EmEt;
    result &= event->getByLabel( tMuIso05HadEt, hMuIso05HadEt );
    if ( hMuIso05HadEt.isValid() ) MuIso05HadEt = *hMuIso05HadEt;
    result &= event->getByLabel( tMuIso05SumPt, hMuIso05SumPt );
    if ( hMuIso05SumPt.isValid() ) MuIso05SumPt = *hMuIso05SumPt;
    result &= event->getByLabel( tMuJESCorrMET, hMuJESCorrMET );
    if ( hMuJESCorrMET.isValid() ) MuJESCorrMET = *hMuJESCorrMET;
    result &= event->getByLabel( tMuJESCorrMETphi, hMuJESCorrMETphi );
    if ( hMuJESCorrMETphi.isValid() ) MuJESCorrMETphi = *hMuJESCorrMETphi;
    result &= event->getByLabel( tMuJESCorrMETpx, hMuJESCorrMETpx );
    if ( hMuJESCorrMETpx.isValid() ) MuJESCorrMETpx = *hMuJESCorrMETpx;
    result &= event->getByLabel( tMuJESCorrMETpy, hMuJESCorrMETpy );
    if ( hMuJESCorrMETpy.isValid() ) MuJESCorrMETpy = *hMuJESCorrMETpy;
    result &= event->getByLabel( tMuNChambers, hMuNChambers );
    if ( hMuNChambers.isValid() ) MuNChambers = *hMuNChambers;
    result &= event->getByLabel( tMuNChi2, hMuNChi2 );
    if ( hMuNChi2.isValid() ) MuNChi2 = *hMuNChi2;
    result &= event->getByLabel( tMuNGlHits, hMuNGlHits );
    if ( hMuNGlHits.isValid() ) MuNGlHits = *hMuNGlHits;
    result &= event->getByLabel( tMuNMatches, hMuNMatches );
    if ( hMuNMatches.isValid() ) MuNMatches = *hMuNMatches;
    result &= event->getByLabel( tMuNMuHits, hMuNMuHits );
    if ( hMuNMuHits.isValid() ) MuNMuHits = *hMuNMuHits;
    result &= event->getByLabel( tMuNPxHits, hMuNPxHits );
    if ( hMuNPxHits.isValid() ) MuNPxHits = *hMuNPxHits;
    result &= event->getByLabel( tMuNSiLayers, hMuNSiLayers );
    if ( hMuNSiLayers.isValid() ) MuNSiLayers = *hMuNSiLayers;
    result &= event->getByLabel( tMuNTkHits, hMuNTkHits );
    if ( hMuNTkHits.isValid() ) MuNTkHits = *hMuNTkHits;
    result &= event->getByLabel( tMuPfIsoR03ChHad, hMuPfIsoR03ChHad );
    if ( hMuPfIsoR03ChHad.isValid() ) MuPfIsoR03ChHad = *hMuPfIsoR03ChHad;
    result &= event->getByLabel( tMuPfIsoR03NeHadHighThresh, hMuPfIsoR03NeHadHighThresh );
    if ( hMuPfIsoR03NeHadHighThresh.isValid() ) MuPfIsoR03NeHadHighThresh = *hMuPfIsoR03NeHadHighThresh;
    result &= event->getByLabel( tMuPfIsoR03PhotonHighThresh, hMuPfIsoR03PhotonHighThresh );
    if ( hMuPfIsoR03PhotonHighThresh.isValid() ) MuPfIsoR03PhotonHighThresh = *hMuPfIsoR03PhotonHighThresh;
    result &= event->getByLabel( tMuPfIsoR03SumPUPt, hMuPfIsoR03SumPUPt );
    if ( hMuPfIsoR03SumPUPt.isValid() ) MuPfIsoR03SumPUPt = *hMuPfIsoR03SumPUPt;
    result &= event->getByLabel( tMuPfIsoR04ChHad, hMuPfIsoR04ChHad );
    if ( hMuPfIsoR04ChHad.isValid() ) MuPfIsoR04ChHad = *hMuPfIsoR04ChHad;
    result &= event->getByLabel( tMuPfIsoR04NeHadHighThresh, hMuPfIsoR04NeHadHighThresh );
    if ( hMuPfIsoR04NeHadHighThresh.isValid() ) MuPfIsoR04NeHadHighThresh = *hMuPfIsoR04NeHadHighThresh;
    result &= event->getByLabel( tMuPfIsoR04PhotonHighThresh, hMuPfIsoR04PhotonHighThresh );
    if ( hMuPfIsoR04PhotonHighThresh.isValid() ) MuPfIsoR04PhotonHighThresh = *hMuPfIsoR04PhotonHighThresh;
    result &= event->getByLabel( tMuPfIsoR04SumPUPt, hMuPfIsoR04SumPUPt );
    if ( hMuPfIsoR04SumPUPt.isValid() ) MuPfIsoR04SumPUPt = *hMuPfIsoR04SumPUPt;
    result &= event->getByLabel( tMuPhi, hMuPhi );
    if ( hMuPhi.isValid() ) MuPhi = *hMuPhi;
    result &= event->getByLabel( tMuPt, hMuPt );
    if ( hMuPt.isValid() ) MuPt = *hMuPt;
    result &= event->getByLabel( tMuPtE, hMuPtE );
    if ( hMuPtE.isValid() ) MuPtE = *hMuPtE;
    result &= event->getByLabel( tMuPx, hMuPx );
    if ( hMuPx.isValid() ) MuPx = *hMuPx;
    result &= event->getByLabel( tMuPy, hMuPy );
    if ( hMuPy.isValid() ) MuPy = *hMuPy;
    result &= event->getByLabel( tMuPz, hMuPz );
    if ( hMuPz.isValid() ) MuPz = *hMuPz;
    result &= event->getByLabel( tMuRelIso03, hMuRelIso03 );
    if ( hMuRelIso03.isValid() ) MuRelIso03 = *hMuRelIso03;
    result &= event->getByLabel( tMuSegmComp, hMuSegmComp );
    if ( hMuSegmComp.isValid() ) MuSegmComp = *hMuSegmComp;
    result &= event->getByLabel( tMuTkD0E, hMuTkD0E );
    if ( hMuTkD0E.isValid() ) MuTkD0E = *hMuTkD0E;
    result &= event->getByLabel( tMuTkDzE, hMuTkDzE );
    if ( hMuTkDzE.isValid() ) MuTkDzE = *hMuTkDzE;
    result &= event->getByLabel( tMuTkPtE, hMuTkPtE );
    if ( hMuTkPtE.isValid() ) MuTkPtE = *hMuTkPtE;
    result &= event->getByLabel( tMumuonPFIsoChHad03, hMumuonPFIsoChHad03 );
    if ( hMumuonPFIsoChHad03.isValid() ) MumuonPFIsoChHad03 = *hMumuonPFIsoChHad03;
    result &= event->getByLabel( tMumuonPFIsoChHad04, hMumuonPFIsoChHad04 );
    if ( hMumuonPFIsoChHad04.isValid() ) MumuonPFIsoChHad04 = *hMumuonPFIsoChHad04;
    result &= event->getByLabel( tMumuonPFIsoNHad03, hMumuonPFIsoNHad03 );
    if ( hMumuonPFIsoNHad03.isValid() ) MumuonPFIsoNHad03 = *hMumuonPFIsoNHad03;
    result &= event->getByLabel( tMumuonPFIsoNHad04, hMumuonPFIsoNHad04 );
    if ( hMumuonPFIsoNHad04.isValid() ) MumuonPFIsoNHad04 = *hMumuonPFIsoNHad04;
    result &= event->getByLabel( tMumuonPFIsoPhoton03, hMumuonPFIsoPhoton03 );
    if ( hMumuonPFIsoPhoton03.isValid() ) MumuonPFIsoPhoton03 = *hMumuonPFIsoPhoton03;
    result &= event->getByLabel( tMumuonPFIsoPhoton04, hMumuonPFIsoPhoton04 );
    if ( hMumuonPFIsoPhoton04.isValid() ) MumuonPFIsoPhoton04 = *hMumuonPFIsoPhoton04;
    result &= event->getByLabel( tMumuonRadPFIsoChHad03, hMumuonRadPFIsoChHad03 );
    if ( hMumuonRadPFIsoChHad03.isValid() ) MumuonRadPFIsoChHad03 = *hMumuonRadPFIsoChHad03;
    result &= event->getByLabel( tMumuonRadPFIsoChHad04, hMumuonRadPFIsoChHad04 );
    if ( hMumuonRadPFIsoChHad04.isValid() ) MumuonRadPFIsoChHad04 = *hMumuonRadPFIsoChHad04;
    result &= event->getByLabel( tMumuonRadPFIsoNHad03, hMumuonRadPFIsoNHad03 );
    if ( hMumuonRadPFIsoNHad03.isValid() ) MumuonRadPFIsoNHad03 = *hMumuonRadPFIsoNHad03;
    result &= event->getByLabel( tMumuonRadPFIsoNHad04, hMumuonRadPFIsoNHad04 );
    if ( hMumuonRadPFIsoNHad04.isValid() ) MumuonRadPFIsoNHad04 = *hMumuonRadPFIsoNHad04;
    result &= event->getByLabel( tMumuonRadPFIsoPhoton03, hMumuonRadPFIsoPhoton03 );
    if ( hMumuonRadPFIsoPhoton03.isValid() ) MumuonRadPFIsoPhoton03 = *hMumuonRadPFIsoPhoton03;
    result &= event->getByLabel( tMumuonRadPFIsoPhoton04, hMumuonRadPFIsoPhoton04 );
    if ( hMumuonRadPFIsoPhoton04.isValid() ) MumuonRadPFIsoPhoton04 = *hMumuonRadPFIsoPhoton04;
    result &= event->getByLabel( tNCaloTowers, hNCaloTowers );
    if ( hNCaloTowers.isValid() ) NCaloTowers = *hNCaloTowers;
    result &= event->getByLabel( tNEBhits, hNEBhits );
    if ( hNEBhits.isValid() ) NEBhits = *hNEBhits;
    result &= event->getByLabel( tNEles, hNEles );
    if ( hNEles.isValid() ) NEles = *hNEles;
    result &= event->getByLabel( tNElesTot, hNElesTot );
    if ( hNElesTot.isValid() ) NElesTot = *hNElesTot;
    result &= event->getByLabel( tNGMus, hNGMus );
    if ( hNGMus.isValid() ) NGMus = *hNGMus;
    result &= event->getByLabel( tNGenJets, hNGenJets );
    if ( hNGenJets.isValid() ) NGenJets = *hNGenJets;
    result &= event->getByLabel( tNGenLeptons, hNGenLeptons );
    if ( hNGenLeptons.isValid() ) NGenLeptons = *hNGenLeptons;
    result &= event->getByLabel( tNGenPhotons, hNGenPhotons );
    if ( hNGenPhotons.isValid() ) NGenPhotons = *hNGenPhotons;
    result &= event->getByLabel( tNHLTObjs, hNHLTObjs );
    if ( hNHLTObjs.isValid() ) NHLTObjs = *hNHLTObjs;
    result &= event->getByLabel( tNJets, hNJets );
    if ( hNJets.isValid() ) NJets = *hNJets;
    result &= event->getByLabel( tNJetsTot, hNJetsTot );
    if ( hNJetsTot.isValid() ) NJetsTot = *hNJetsTot;
    result &= event->getByLabel( tNMus, hNMus );
    if ( hNMus.isValid() ) NMus = *hNMus;
    result &= event->getByLabel( tNMusTot, hNMusTot );
    if ( hNMusTot.isValid() ) NMusTot = *hNMusTot;
    result &= event->getByLabel( tNPdfs, hNPdfs );
    if ( hNPdfs.isValid() ) NPdfs = *hNPdfs;
    result &= event->getByLabel( tNPhotons, hNPhotons );
    if ( hNPhotons.isValid() ) NPhotons = *hNPhotons;
    result &= event->getByLabel( tNPhotonsTot, hNPhotonsTot );
    if ( hNPhotonsTot.isValid() ) NPhotonsTot = *hNPhotonsTot;
    result &= event->getByLabel( tNSuperClusters, hNSuperClusters );
    if ( hNSuperClusters.isValid() ) NSuperClusters = *hNSuperClusters;
    result &= event->getByLabel( tNTMus, hNTMus );
    if ( hNTMus.isValid() ) NTMus = *hNTMus;
    result &= event->getByLabel( tNTracks, hNTracks );
    if ( hNTracks.isValid() ) NTracks = *hNTracks;
    result &= event->getByLabel( tNTracksTot, hNTracksTot );
    if ( hNTracksTot.isValid() ) NTracksTot = *hNTracksTot;
    result &= event->getByLabel( tNVrtx, hNVrtx );
    if ( hNVrtx.isValid() ) NVrtx = *hNVrtx;
    result &= event->getByLabel( tNconv, hNconv );
    if ( hNconv.isValid() ) Nconv = *hNconv;
    result &= event->getByLabel( tPDFID1, hPDFID1 );
    if ( hPDFID1.isValid() ) PDFID1 = *hPDFID1;
    result &= event->getByLabel( tPDFID2, hPDFID2 );
    if ( hPDFID2.isValid() ) PDFID2 = *hPDFID2;
    result &= event->getByLabel( tPDFScalePDF, hPDFScalePDF );
    if ( hPDFScalePDF.isValid() ) PDFScalePDF = *hPDFScalePDF;
    result &= event->getByLabel( tPDFx1, hPDFx1 );
    if ( hPDFx1.isValid() ) PDFx1 = *hPDFx1;
    result &= event->getByLabel( tPDFx2, hPDFx2 );
    if ( hPDFx2.isValid() ) PDFx2 = *hPDFx2;
    result &= event->getByLabel( tPDFxPDF1, hPDFxPDF1 );
    if ( hPDFxPDF1.isValid() ) PDFxPDF1 = *hPDFxPDF1;
    result &= event->getByLabel( tPDFxPDF2, hPDFxPDF2 );
    if ( hPDFxPDF2.isValid() ) PDFxPDF2 = *hPDFxPDF2;
    result &= event->getByLabel( tPF2PAT2JArea, hPF2PAT2JArea );
    if ( hPF2PAT2JArea.isValid() ) PF2PAT2JArea = *hPF2PAT2JArea;
    result &= event->getByLabel( tPF2PAT2JChEmfrac, hPF2PAT2JChEmfrac );
    if ( hPF2PAT2JChEmfrac.isValid() ) PF2PAT2JChEmfrac = *hPF2PAT2JChEmfrac;
    result &= event->getByLabel( tPF2PAT2JChHadfrac, hPF2PAT2JChHadfrac );
    if ( hPF2PAT2JChHadfrac.isValid() ) PF2PAT2JChHadfrac = *hPF2PAT2JChHadfrac;
    result &= event->getByLabel( tPF2PAT2JChMufrac, hPF2PAT2JChMufrac );
    if ( hPF2PAT2JChMufrac.isValid() ) PF2PAT2JChMufrac = *hPF2PAT2JChMufrac;
    result &= event->getByLabel( tPF2PAT2JChMult, hPF2PAT2JChMult );
    if ( hPF2PAT2JChMult.isValid() ) PF2PAT2JChMult = *hPF2PAT2JChMult;
    result &= event->getByLabel( tPF2PAT2JE, hPF2PAT2JE );
    if ( hPF2PAT2JE.isValid() ) PF2PAT2JE = *hPF2PAT2JE;
    result &= event->getByLabel( tPF2PAT2JEt, hPF2PAT2JEt );
    if ( hPF2PAT2JEt.isValid() ) PF2PAT2JEt = *hPF2PAT2JEt;
    result &= event->getByLabel( tPF2PAT2JEta, hPF2PAT2JEta );
    if ( hPF2PAT2JEta.isValid() ) PF2PAT2JEta = *hPF2PAT2JEta;
    result &= event->getByLabel( tPF2PAT2JFlavour, hPF2PAT2JFlavour );
    if ( hPF2PAT2JFlavour.isValid() ) PF2PAT2JFlavour = *hPF2PAT2JFlavour;
    result &= event->getByLabel( tPF2PAT2JHFEMfrac, hPF2PAT2JHFEMfrac );
    if ( hPF2PAT2JHFEMfrac.isValid() ) PF2PAT2JHFEMfrac = *hPF2PAT2JHFEMfrac;
    result &= event->getByLabel( tPF2PAT2JHFHadfrac, hPF2PAT2JHFHadfrac );
    if ( hPF2PAT2JHFHadfrac.isValid() ) PF2PAT2JHFHadfrac = *hPF2PAT2JHFHadfrac;
    result &= event->getByLabel( tPF2PAT2JIDLoose, hPF2PAT2JIDLoose );
    if ( hPF2PAT2JIDLoose.isValid() ) PF2PAT2JIDLoose = *hPF2PAT2JIDLoose;
    result &= event->getByLabel( tPF2PAT2JL1FastJetScale, hPF2PAT2JL1FastJetScale );
    if ( hPF2PAT2JL1FastJetScale.isValid() ) PF2PAT2JL1FastJetScale = *hPF2PAT2JL1FastJetScale;
    result &= event->getByLabel( tPF2PAT2JNConstituents, hPF2PAT2JNConstituents );
    if ( hPF2PAT2JNConstituents.isValid() ) PF2PAT2JNConstituents = *hPF2PAT2JNConstituents;
    result &= event->getByLabel( tPF2PAT2JNeuEmfrac, hPF2PAT2JNeuEmfrac );
    if ( hPF2PAT2JNeuEmfrac.isValid() ) PF2PAT2JNeuEmfrac = *hPF2PAT2JNeuEmfrac;
    result &= event->getByLabel( tPF2PAT2JNeuHadfrac, hPF2PAT2JNeuHadfrac );
    if ( hPF2PAT2JNeuHadfrac.isValid() ) PF2PAT2JNeuHadfrac = *hPF2PAT2JNeuHadfrac;
    result &= event->getByLabel( tPF2PAT2JNeuMult, hPF2PAT2JNeuMult );
    if ( hPF2PAT2JNeuMult.isValid() ) PF2PAT2JNeuMult = *hPF2PAT2JNeuMult;
    result &= event->getByLabel( tPF2PAT2JPhi, hPF2PAT2JPhi );
    if ( hPF2PAT2JPhi.isValid() ) PF2PAT2JPhi = *hPF2PAT2JPhi;
    result &= event->getByLabel( tPF2PAT2JPhofrac, hPF2PAT2JPhofrac );
    if ( hPF2PAT2JPhofrac.isValid() ) PF2PAT2JPhofrac = *hPF2PAT2JPhofrac;
    result &= event->getByLabel( tPF2PAT2JPt, hPF2PAT2JPt );
    if ( hPF2PAT2JPt.isValid() ) PF2PAT2JPt = *hPF2PAT2JPt;
    result &= event->getByLabel( tPF2PAT2JPx, hPF2PAT2JPx );
    if ( hPF2PAT2JPx.isValid() ) PF2PAT2JPx = *hPF2PAT2JPx;
    result &= event->getByLabel( tPF2PAT2JPy, hPF2PAT2JPy );
    if ( hPF2PAT2JPy.isValid() ) PF2PAT2JPy = *hPF2PAT2JPy;
    result &= event->getByLabel( tPF2PAT2JPz, hPF2PAT2JPz );
    if ( hPF2PAT2JPz.isValid() ) PF2PAT2JPz = *hPF2PAT2JPz;
    result &= event->getByLabel( tPF2PAT2JScale, hPF2PAT2JScale );
    if ( hPF2PAT2JScale.isValid() ) PF2PAT2JScale = *hPF2PAT2JScale;
    result &= event->getByLabel( tPF2PAT2JcombinedSecondaryVertexBJetTags, hPF2PAT2JcombinedSecondaryVertexBJetTags );
    if ( hPF2PAT2JcombinedSecondaryVertexBJetTags.isValid() ) PF2PAT2JcombinedSecondaryVertexBJetTags = *hPF2PAT2JcombinedSecondaryVertexBJetTags;
    result &= event->getByLabel( tPF2PAT2JcombinedSecondaryVertexMVABJetTags, hPF2PAT2JcombinedSecondaryVertexMVABJetTags );
    if ( hPF2PAT2JcombinedSecondaryVertexMVABJetTags.isValid() ) PF2PAT2JcombinedSecondaryVertexMVABJetTags = *hPF2PAT2JcombinedSecondaryVertexMVABJetTags;
    result &= event->getByLabel( tPF2PAT2JjetBProbabilityBJetTags, hPF2PAT2JjetBProbabilityBJetTags );
    if ( hPF2PAT2JjetBProbabilityBJetTags.isValid() ) PF2PAT2JjetBProbabilityBJetTags = *hPF2PAT2JjetBProbabilityBJetTags;
    result &= event->getByLabel( tPF2PAT2JjetProbabilityBJetTags, hPF2PAT2JjetProbabilityBJetTags );
    if ( hPF2PAT2JjetProbabilityBJetTags.isValid() ) PF2PAT2JjetProbabilityBJetTags = *hPF2PAT2JjetProbabilityBJetTags;
    result &= event->getByLabel( tPF2PAT2JsimpleSecondaryVertexHighEffBJetTags, hPF2PAT2JsimpleSecondaryVertexHighEffBJetTags );
    if ( hPF2PAT2JsimpleSecondaryVertexHighEffBJetTags.isValid() ) PF2PAT2JsimpleSecondaryVertexHighEffBJetTags = *hPF2PAT2JsimpleSecondaryVertexHighEffBJetTags;
    result &= event->getByLabel( tPF2PAT2JsimpleSecondaryVertexHighPurBJetTags, hPF2PAT2JsimpleSecondaryVertexHighPurBJetTags );
    if ( hPF2PAT2JsimpleSecondaryVertexHighPurBJetTags.isValid() ) PF2PAT2JsimpleSecondaryVertexHighPurBJetTags = *hPF2PAT2JsimpleSecondaryVertexHighPurBJetTags;
    result &= event->getByLabel( tPF2PAT2JtrackCountingHighEffBJetTags, hPF2PAT2JtrackCountingHighEffBJetTags );
    if ( hPF2PAT2JtrackCountingHighEffBJetTags.isValid() ) PF2PAT2JtrackCountingHighEffBJetTags = *hPF2PAT2JtrackCountingHighEffBJetTags;
    result &= event->getByLabel( tPF2PAT2JtrackCountingHighPurBJetTags, hPF2PAT2JtrackCountingHighPurBJetTags );
    if ( hPF2PAT2JtrackCountingHighPurBJetTags.isValid() ) PF2PAT2JtrackCountingHighPurBJetTags = *hPF2PAT2JtrackCountingHighPurBJetTags;
    result &= event->getByLabel( tPF2PAT2NJets, hPF2PAT2NJets );
    if ( hPF2PAT2NJets.isValid() ) PF2PAT2NJets = *hPF2PAT2NJets;
    result &= event->getByLabel( tPF2PAT3JArea, hPF2PAT3JArea );
    if ( hPF2PAT3JArea.isValid() ) PF2PAT3JArea = *hPF2PAT3JArea;
    result &= event->getByLabel( tPF2PAT3JChEmfrac, hPF2PAT3JChEmfrac );
    if ( hPF2PAT3JChEmfrac.isValid() ) PF2PAT3JChEmfrac = *hPF2PAT3JChEmfrac;
    result &= event->getByLabel( tPF2PAT3JChHadfrac, hPF2PAT3JChHadfrac );
    if ( hPF2PAT3JChHadfrac.isValid() ) PF2PAT3JChHadfrac = *hPF2PAT3JChHadfrac;
    result &= event->getByLabel( tPF2PAT3JChMufrac, hPF2PAT3JChMufrac );
    if ( hPF2PAT3JChMufrac.isValid() ) PF2PAT3JChMufrac = *hPF2PAT3JChMufrac;
    result &= event->getByLabel( tPF2PAT3JChMult, hPF2PAT3JChMult );
    if ( hPF2PAT3JChMult.isValid() ) PF2PAT3JChMult = *hPF2PAT3JChMult;
    result &= event->getByLabel( tPF2PAT3JE, hPF2PAT3JE );
    if ( hPF2PAT3JE.isValid() ) PF2PAT3JE = *hPF2PAT3JE;
    result &= event->getByLabel( tPF2PAT3JEt, hPF2PAT3JEt );
    if ( hPF2PAT3JEt.isValid() ) PF2PAT3JEt = *hPF2PAT3JEt;
    result &= event->getByLabel( tPF2PAT3JEta, hPF2PAT3JEta );
    if ( hPF2PAT3JEta.isValid() ) PF2PAT3JEta = *hPF2PAT3JEta;
    result &= event->getByLabel( tPF2PAT3JFlavour, hPF2PAT3JFlavour );
    if ( hPF2PAT3JFlavour.isValid() ) PF2PAT3JFlavour = *hPF2PAT3JFlavour;
    result &= event->getByLabel( tPF2PAT3JHFEMfrac, hPF2PAT3JHFEMfrac );
    if ( hPF2PAT3JHFEMfrac.isValid() ) PF2PAT3JHFEMfrac = *hPF2PAT3JHFEMfrac;
    result &= event->getByLabel( tPF2PAT3JHFHadfrac, hPF2PAT3JHFHadfrac );
    if ( hPF2PAT3JHFHadfrac.isValid() ) PF2PAT3JHFHadfrac = *hPF2PAT3JHFHadfrac;
    result &= event->getByLabel( tPF2PAT3JIDLoose, hPF2PAT3JIDLoose );
    if ( hPF2PAT3JIDLoose.isValid() ) PF2PAT3JIDLoose = *hPF2PAT3JIDLoose;
    result &= event->getByLabel( tPF2PAT3JL1FastJetScale, hPF2PAT3JL1FastJetScale );
    if ( hPF2PAT3JL1FastJetScale.isValid() ) PF2PAT3JL1FastJetScale = *hPF2PAT3JL1FastJetScale;
    result &= event->getByLabel( tPF2PAT3JNConstituents, hPF2PAT3JNConstituents );
    if ( hPF2PAT3JNConstituents.isValid() ) PF2PAT3JNConstituents = *hPF2PAT3JNConstituents;
    result &= event->getByLabel( tPF2PAT3JNeuEmfrac, hPF2PAT3JNeuEmfrac );
    if ( hPF2PAT3JNeuEmfrac.isValid() ) PF2PAT3JNeuEmfrac = *hPF2PAT3JNeuEmfrac;
    result &= event->getByLabel( tPF2PAT3JNeuHadfrac, hPF2PAT3JNeuHadfrac );
    if ( hPF2PAT3JNeuHadfrac.isValid() ) PF2PAT3JNeuHadfrac = *hPF2PAT3JNeuHadfrac;
    result &= event->getByLabel( tPF2PAT3JNeuMult, hPF2PAT3JNeuMult );
    if ( hPF2PAT3JNeuMult.isValid() ) PF2PAT3JNeuMult = *hPF2PAT3JNeuMult;
    result &= event->getByLabel( tPF2PAT3JPhi, hPF2PAT3JPhi );
    if ( hPF2PAT3JPhi.isValid() ) PF2PAT3JPhi = *hPF2PAT3JPhi;
    result &= event->getByLabel( tPF2PAT3JPhofrac, hPF2PAT3JPhofrac );
    if ( hPF2PAT3JPhofrac.isValid() ) PF2PAT3JPhofrac = *hPF2PAT3JPhofrac;
    result &= event->getByLabel( tPF2PAT3JPt, hPF2PAT3JPt );
    if ( hPF2PAT3JPt.isValid() ) PF2PAT3JPt = *hPF2PAT3JPt;
    result &= event->getByLabel( tPF2PAT3JPx, hPF2PAT3JPx );
    if ( hPF2PAT3JPx.isValid() ) PF2PAT3JPx = *hPF2PAT3JPx;
    result &= event->getByLabel( tPF2PAT3JPy, hPF2PAT3JPy );
    if ( hPF2PAT3JPy.isValid() ) PF2PAT3JPy = *hPF2PAT3JPy;
    result &= event->getByLabel( tPF2PAT3JPz, hPF2PAT3JPz );
    if ( hPF2PAT3JPz.isValid() ) PF2PAT3JPz = *hPF2PAT3JPz;
    result &= event->getByLabel( tPF2PAT3JScale, hPF2PAT3JScale );
    if ( hPF2PAT3JScale.isValid() ) PF2PAT3JScale = *hPF2PAT3JScale;
    result &= event->getByLabel( tPF2PAT3JcombinedSecondaryVertexBJetTags, hPF2PAT3JcombinedSecondaryVertexBJetTags );
    if ( hPF2PAT3JcombinedSecondaryVertexBJetTags.isValid() ) PF2PAT3JcombinedSecondaryVertexBJetTags = *hPF2PAT3JcombinedSecondaryVertexBJetTags;
    result &= event->getByLabel( tPF2PAT3JcombinedSecondaryVertexMVABJetTags, hPF2PAT3JcombinedSecondaryVertexMVABJetTags );
    if ( hPF2PAT3JcombinedSecondaryVertexMVABJetTags.isValid() ) PF2PAT3JcombinedSecondaryVertexMVABJetTags = *hPF2PAT3JcombinedSecondaryVertexMVABJetTags;
    result &= event->getByLabel( tPF2PAT3JjetBProbabilityBJetTags, hPF2PAT3JjetBProbabilityBJetTags );
    if ( hPF2PAT3JjetBProbabilityBJetTags.isValid() ) PF2PAT3JjetBProbabilityBJetTags = *hPF2PAT3JjetBProbabilityBJetTags;
    result &= event->getByLabel( tPF2PAT3JjetProbabilityBJetTags, hPF2PAT3JjetProbabilityBJetTags );
    if ( hPF2PAT3JjetProbabilityBJetTags.isValid() ) PF2PAT3JjetProbabilityBJetTags = *hPF2PAT3JjetProbabilityBJetTags;
    result &= event->getByLabel( tPF2PAT3JsimpleSecondaryVertexHighEffBJetTags, hPF2PAT3JsimpleSecondaryVertexHighEffBJetTags );
    if ( hPF2PAT3JsimpleSecondaryVertexHighEffBJetTags.isValid() ) PF2PAT3JsimpleSecondaryVertexHighEffBJetTags = *hPF2PAT3JsimpleSecondaryVertexHighEffBJetTags;
    result &= event->getByLabel( tPF2PAT3JsimpleSecondaryVertexHighPurBJetTags, hPF2PAT3JsimpleSecondaryVertexHighPurBJetTags );
    if ( hPF2PAT3JsimpleSecondaryVertexHighPurBJetTags.isValid() ) PF2PAT3JsimpleSecondaryVertexHighPurBJetTags = *hPF2PAT3JsimpleSecondaryVertexHighPurBJetTags;
    result &= event->getByLabel( tPF2PAT3JtrackCountingHighEffBJetTags, hPF2PAT3JtrackCountingHighEffBJetTags );
    if ( hPF2PAT3JtrackCountingHighEffBJetTags.isValid() ) PF2PAT3JtrackCountingHighEffBJetTags = *hPF2PAT3JtrackCountingHighEffBJetTags;
    result &= event->getByLabel( tPF2PAT3JtrackCountingHighPurBJetTags, hPF2PAT3JtrackCountingHighPurBJetTags );
    if ( hPF2PAT3JtrackCountingHighPurBJetTags.isValid() ) PF2PAT3JtrackCountingHighPurBJetTags = *hPF2PAT3JtrackCountingHighPurBJetTags;
    result &= event->getByLabel( tPF2PAT3NJets, hPF2PAT3NJets );
    if ( hPF2PAT3NJets.isValid() ) PF2PAT3NJets = *hPF2PAT3NJets;
    result &= event->getByLabel( tPF2PATAntiIsoJArea, hPF2PATAntiIsoJArea );
    if ( hPF2PATAntiIsoJArea.isValid() ) PF2PATAntiIsoJArea = *hPF2PATAntiIsoJArea;
    result &= event->getByLabel( tPF2PATAntiIsoJChEmfrac, hPF2PATAntiIsoJChEmfrac );
    if ( hPF2PATAntiIsoJChEmfrac.isValid() ) PF2PATAntiIsoJChEmfrac = *hPF2PATAntiIsoJChEmfrac;
    result &= event->getByLabel( tPF2PATAntiIsoJChHadfrac, hPF2PATAntiIsoJChHadfrac );
    if ( hPF2PATAntiIsoJChHadfrac.isValid() ) PF2PATAntiIsoJChHadfrac = *hPF2PATAntiIsoJChHadfrac;
    result &= event->getByLabel( tPF2PATAntiIsoJChMufrac, hPF2PATAntiIsoJChMufrac );
    if ( hPF2PATAntiIsoJChMufrac.isValid() ) PF2PATAntiIsoJChMufrac = *hPF2PATAntiIsoJChMufrac;
    result &= event->getByLabel( tPF2PATAntiIsoJChMult, hPF2PATAntiIsoJChMult );
    if ( hPF2PATAntiIsoJChMult.isValid() ) PF2PATAntiIsoJChMult = *hPF2PATAntiIsoJChMult;
    result &= event->getByLabel( tPF2PATAntiIsoJE, hPF2PATAntiIsoJE );
    if ( hPF2PATAntiIsoJE.isValid() ) PF2PATAntiIsoJE = *hPF2PATAntiIsoJE;
    result &= event->getByLabel( tPF2PATAntiIsoJEt, hPF2PATAntiIsoJEt );
    if ( hPF2PATAntiIsoJEt.isValid() ) PF2PATAntiIsoJEt = *hPF2PATAntiIsoJEt;
    result &= event->getByLabel( tPF2PATAntiIsoJEta, hPF2PATAntiIsoJEta );
    if ( hPF2PATAntiIsoJEta.isValid() ) PF2PATAntiIsoJEta = *hPF2PATAntiIsoJEta;
    result &= event->getByLabel( tPF2PATAntiIsoJFlavour, hPF2PATAntiIsoJFlavour );
    if ( hPF2PATAntiIsoJFlavour.isValid() ) PF2PATAntiIsoJFlavour = *hPF2PATAntiIsoJFlavour;
    result &= event->getByLabel( tPF2PATAntiIsoJHFEMfrac, hPF2PATAntiIsoJHFEMfrac );
    if ( hPF2PATAntiIsoJHFEMfrac.isValid() ) PF2PATAntiIsoJHFEMfrac = *hPF2PATAntiIsoJHFEMfrac;
    result &= event->getByLabel( tPF2PATAntiIsoJHFHadfrac, hPF2PATAntiIsoJHFHadfrac );
    if ( hPF2PATAntiIsoJHFHadfrac.isValid() ) PF2PATAntiIsoJHFHadfrac = *hPF2PATAntiIsoJHFHadfrac;
    result &= event->getByLabel( tPF2PATAntiIsoJIDLoose, hPF2PATAntiIsoJIDLoose );
    if ( hPF2PATAntiIsoJIDLoose.isValid() ) PF2PATAntiIsoJIDLoose = *hPF2PATAntiIsoJIDLoose;
    result &= event->getByLabel( tPF2PATAntiIsoJL1FastJetScale, hPF2PATAntiIsoJL1FastJetScale );
    if ( hPF2PATAntiIsoJL1FastJetScale.isValid() ) PF2PATAntiIsoJL1FastJetScale = *hPF2PATAntiIsoJL1FastJetScale;
    result &= event->getByLabel( tPF2PATAntiIsoJNConstituents, hPF2PATAntiIsoJNConstituents );
    if ( hPF2PATAntiIsoJNConstituents.isValid() ) PF2PATAntiIsoJNConstituents = *hPF2PATAntiIsoJNConstituents;
    result &= event->getByLabel( tPF2PATAntiIsoJNeuEmfrac, hPF2PATAntiIsoJNeuEmfrac );
    if ( hPF2PATAntiIsoJNeuEmfrac.isValid() ) PF2PATAntiIsoJNeuEmfrac = *hPF2PATAntiIsoJNeuEmfrac;
    result &= event->getByLabel( tPF2PATAntiIsoJNeuHadfrac, hPF2PATAntiIsoJNeuHadfrac );
    if ( hPF2PATAntiIsoJNeuHadfrac.isValid() ) PF2PATAntiIsoJNeuHadfrac = *hPF2PATAntiIsoJNeuHadfrac;
    result &= event->getByLabel( tPF2PATAntiIsoJNeuMult, hPF2PATAntiIsoJNeuMult );
    if ( hPF2PATAntiIsoJNeuMult.isValid() ) PF2PATAntiIsoJNeuMult = *hPF2PATAntiIsoJNeuMult;
    result &= event->getByLabel( tPF2PATAntiIsoJPhi, hPF2PATAntiIsoJPhi );
    if ( hPF2PATAntiIsoJPhi.isValid() ) PF2PATAntiIsoJPhi = *hPF2PATAntiIsoJPhi;
    result &= event->getByLabel( tPF2PATAntiIsoJPhofrac, hPF2PATAntiIsoJPhofrac );
    if ( hPF2PATAntiIsoJPhofrac.isValid() ) PF2PATAntiIsoJPhofrac = *hPF2PATAntiIsoJPhofrac;
    result &= event->getByLabel( tPF2PATAntiIsoJPt, hPF2PATAntiIsoJPt );
    if ( hPF2PATAntiIsoJPt.isValid() ) PF2PATAntiIsoJPt = *hPF2PATAntiIsoJPt;
    result &= event->getByLabel( tPF2PATAntiIsoJPx, hPF2PATAntiIsoJPx );
    if ( hPF2PATAntiIsoJPx.isValid() ) PF2PATAntiIsoJPx = *hPF2PATAntiIsoJPx;
    result &= event->getByLabel( tPF2PATAntiIsoJPy, hPF2PATAntiIsoJPy );
    if ( hPF2PATAntiIsoJPy.isValid() ) PF2PATAntiIsoJPy = *hPF2PATAntiIsoJPy;
    result &= event->getByLabel( tPF2PATAntiIsoJPz, hPF2PATAntiIsoJPz );
    if ( hPF2PATAntiIsoJPz.isValid() ) PF2PATAntiIsoJPz = *hPF2PATAntiIsoJPz;
    result &= event->getByLabel( tPF2PATAntiIsoJScale, hPF2PATAntiIsoJScale );
    if ( hPF2PATAntiIsoJScale.isValid() ) PF2PATAntiIsoJScale = *hPF2PATAntiIsoJScale;
    result &= event->getByLabel( tPF2PATAntiIsoJcombinedSecondaryVertexBJetTags, hPF2PATAntiIsoJcombinedSecondaryVertexBJetTags );
    if ( hPF2PATAntiIsoJcombinedSecondaryVertexBJetTags.isValid() ) PF2PATAntiIsoJcombinedSecondaryVertexBJetTags = *hPF2PATAntiIsoJcombinedSecondaryVertexBJetTags;
    result &= event->getByLabel( tPF2PATAntiIsoJcombinedSecondaryVertexMVABJetTags, hPF2PATAntiIsoJcombinedSecondaryVertexMVABJetTags );
    if ( hPF2PATAntiIsoJcombinedSecondaryVertexMVABJetTags.isValid() ) PF2PATAntiIsoJcombinedSecondaryVertexMVABJetTags = *hPF2PATAntiIsoJcombinedSecondaryVertexMVABJetTags;
    result &= event->getByLabel( tPF2PATAntiIsoJjetBProbabilityBJetTags, hPF2PATAntiIsoJjetBProbabilityBJetTags );
    if ( hPF2PATAntiIsoJjetBProbabilityBJetTags.isValid() ) PF2PATAntiIsoJjetBProbabilityBJetTags = *hPF2PATAntiIsoJjetBProbabilityBJetTags;
    result &= event->getByLabel( tPF2PATAntiIsoJjetProbabilityBJetTags, hPF2PATAntiIsoJjetProbabilityBJetTags );
    if ( hPF2PATAntiIsoJjetProbabilityBJetTags.isValid() ) PF2PATAntiIsoJjetProbabilityBJetTags = *hPF2PATAntiIsoJjetProbabilityBJetTags;
    result &= event->getByLabel( tPF2PATAntiIsoJsimpleSecondaryVertexHighEffBJetTags, hPF2PATAntiIsoJsimpleSecondaryVertexHighEffBJetTags );
    if ( hPF2PATAntiIsoJsimpleSecondaryVertexHighEffBJetTags.isValid() ) PF2PATAntiIsoJsimpleSecondaryVertexHighEffBJetTags = *hPF2PATAntiIsoJsimpleSecondaryVertexHighEffBJetTags;
    result &= event->getByLabel( tPF2PATAntiIsoJsimpleSecondaryVertexHighPurBJetTags, hPF2PATAntiIsoJsimpleSecondaryVertexHighPurBJetTags );
    if ( hPF2PATAntiIsoJsimpleSecondaryVertexHighPurBJetTags.isValid() ) PF2PATAntiIsoJsimpleSecondaryVertexHighPurBJetTags = *hPF2PATAntiIsoJsimpleSecondaryVertexHighPurBJetTags;
    result &= event->getByLabel( tPF2PATAntiIsoJtrackCountingHighEffBJetTags, hPF2PATAntiIsoJtrackCountingHighEffBJetTags );
    if ( hPF2PATAntiIsoJtrackCountingHighEffBJetTags.isValid() ) PF2PATAntiIsoJtrackCountingHighEffBJetTags = *hPF2PATAntiIsoJtrackCountingHighEffBJetTags;
    result &= event->getByLabel( tPF2PATAntiIsoJtrackCountingHighPurBJetTags, hPF2PATAntiIsoJtrackCountingHighPurBJetTags );
    if ( hPF2PATAntiIsoJtrackCountingHighPurBJetTags.isValid() ) PF2PATAntiIsoJtrackCountingHighPurBJetTags = *hPF2PATAntiIsoJtrackCountingHighPurBJetTags;
    result &= event->getByLabel( tPF2PATAntiIsoNJets, hPF2PATAntiIsoNJets );
    if ( hPF2PATAntiIsoNJets.isValid() ) PF2PATAntiIsoNJets = *hPF2PATAntiIsoNJets;
    result &= event->getByLabel( tPFMET, hPFMET );
    if ( hPFMET.isValid() ) PFMET = *hPFMET;
    result &= event->getByLabel( tPFMETPAT, hPFMETPAT );
    if ( hPFMETPAT.isValid() ) PFMETPAT = *hPFMETPAT;
    result &= event->getByLabel( tPFMETPATSignificance, hPFMETPATSignificance );
    if ( hPFMETPATSignificance.isValid() ) PFMETPATSignificance = *hPFMETPATSignificance;
    result &= event->getByLabel( tPFMETPATphi, hPFMETPATphi );
    if ( hPFMETPATphi.isValid() ) PFMETPATphi = *hPFMETPATphi;
    result &= event->getByLabel( tPFMETPATpx, hPFMETPATpx );
    if ( hPFMETPATpx.isValid() ) PFMETPATpx = *hPFMETPATpx;
    result &= event->getByLabel( tPFMETPATpy, hPFMETPATpy );
    if ( hPFMETPATpy.isValid() ) PFMETPATpy = *hPFMETPATpy;
    result &= event->getByLabel( tPFMETSignificance, hPFMETSignificance );
    if ( hPFMETSignificance.isValid() ) PFMETSignificance = *hPFMETSignificance;
    result &= event->getByLabel( tPFMETphi, hPFMETphi );
    if ( hPFMETphi.isValid() ) PFMETphi = *hPFMETphi;
    result &= event->getByLabel( tPFMETpx, hPFMETpx );
    if ( hPFMETpx.isValid() ) PFMETpx = *hPFMETpx;
    result &= event->getByLabel( tPFMETpy, hPFMETpy );
    if ( hPFMETpy.isValid() ) PFMETpy = *hPFMETpy;
    result &= event->getByLabel( tPFSumEt, hPFSumEt );
    if ( hPFSumEt.isValid() ) PFSumEt = *hPFSumEt;
    result &= event->getByLabel( tPUOOTnumInteractionsEarly, hPUOOTnumInteractionsEarly );
    if ( hPUOOTnumInteractionsEarly.isValid() ) PUOOTnumInteractionsEarly = *hPUOOTnumInteractionsEarly;
    result &= event->getByLabel( tPUOOTnumInteractionsLate, hPUOOTnumInteractionsLate );
    if ( hPUOOTnumInteractionsLate.isValid() ) PUOOTnumInteractionsLate = *hPUOOTnumInteractionsLate;
    result &= event->getByLabel( tPUWeightInTime, hPUWeightInTime );
    if ( hPUWeightInTime.isValid() ) PUWeightInTime = *hPUWeightInTime;
    result &= event->getByLabel( tPUWeightTotal, hPUWeightTotal );
    if ( hPUWeightTotal.isValid() ) PUWeightTotal = *hPUWeightTotal;
    result &= event->getByLabel( tPUnTrksHighPt, hPUnTrksHighPt );
    if ( hPUnTrksHighPt.isValid() ) PUnTrksHighPt = *hPUnTrksHighPt;
    result &= event->getByLabel( tPUnTrksLowPt, hPUnTrksLowPt );
    if ( hPUnTrksLowPt.isValid() ) PUnTrksLowPt = *hPUnTrksLowPt;
    result &= event->getByLabel( tPUnumFilled, hPUnumFilled );
    if ( hPUnumFilled.isValid() ) PUnumFilled = *hPUnumFilled;
    result &= event->getByLabel( tPUnumInteractions, hPUnumInteractions );
    if ( hPUnumInteractions.isValid() ) PUnumInteractions = *hPUnumInteractions;
    result &= event->getByLabel( tPUnumTrueInteractions, hPUnumTrueInteractions );
    if ( hPUnumTrueInteractions.isValid() ) PUnumTrueInteractions = *hPUnumTrueInteractions;
    result &= event->getByLabel( tPUsumPtHighPt, hPUsumPtHighPt );
    if ( hPUsumPtHighPt.isValid() ) PUsumPtHighPt = *hPUsumPtHighPt;
    result &= event->getByLabel( tPUsumPtLowPt, hPUsumPtLowPt );
    if ( hPUsumPtLowPt.isValid() ) PUsumPtLowPt = *hPUsumPtLowPt;
    result &= event->getByLabel( tPUzPositions, hPUzPositions );
    if ( hPUzPositions.isValid() ) PUzPositions = *hPUzPositions;
    result &= event->getByLabel( tPfEl2Charge, hPfEl2Charge );
    if ( hPfEl2Charge.isValid() ) PfEl2Charge = *hPfEl2Charge;
    result &= event->getByLabel( tPfEl2ChargedHadronIso, hPfEl2ChargedHadronIso );
    if ( hPfEl2ChargedHadronIso.isValid() ) PfEl2ChargedHadronIso = *hPfEl2ChargedHadronIso;
    result &= event->getByLabel( tPfEl2E, hPfEl2E );
    if ( hPfEl2E.isValid() ) PfEl2E = *hPfEl2E;
    result &= event->getByLabel( tPfEl2Et, hPfEl2Et );
    if ( hPfEl2Et.isValid() ) PfEl2Et = *hPfEl2Et;
    result &= event->getByLabel( tPfEl2Eta, hPfEl2Eta );
    if ( hPfEl2Eta.isValid() ) PfEl2Eta = *hPfEl2Eta;
    result &= event->getByLabel( tPfEl2ID80, hPfEl2ID80 );
    if ( hPfEl2ID80.isValid() ) PfEl2ID80 = *hPfEl2ID80;
    result &= event->getByLabel( tPfEl2ID85, hPfEl2ID85 );
    if ( hPfEl2ID85.isValid() ) PfEl2ID85 = *hPfEl2ID85;
    result &= event->getByLabel( tPfEl2ID90, hPfEl2ID90 );
    if ( hPfEl2ID90.isValid() ) PfEl2ID90 = *hPfEl2ID90;
    result &= event->getByLabel( tPfEl2ID95, hPfEl2ID95 );
    if ( hPfEl2ID95.isValid() ) PfEl2ID95 = *hPfEl2ID95;
    result &= event->getByLabel( tPfEl2MaxLepExc, hPfEl2MaxLepExc );
    if ( hPfEl2MaxLepExc.isValid() ) PfEl2MaxLepExc = *hPfEl2MaxLepExc;
    result &= event->getByLabel( tPfEl2NObjs, hPfEl2NObjs );
    if ( hPfEl2NObjs.isValid() ) PfEl2NObjs = *hPfEl2NObjs;
    result &= event->getByLabel( tPfEl2NObjsTot, hPfEl2NObjsTot );
    if ( hPfEl2NObjsTot.isValid() ) PfEl2NObjsTot = *hPfEl2NObjsTot;
    result &= event->getByLabel( tPfEl2NeutralHadronIso, hPfEl2NeutralHadronIso );
    if ( hPfEl2NeutralHadronIso.isValid() ) PfEl2NeutralHadronIso = *hPfEl2NeutralHadronIso;
    result &= event->getByLabel( tPfEl2ParticleIso, hPfEl2ParticleIso );
    if ( hPfEl2ParticleIso.isValid() ) PfEl2ParticleIso = *hPfEl2ParticleIso;
    result &= event->getByLabel( tPfEl2Phi, hPfEl2Phi );
    if ( hPfEl2Phi.isValid() ) PfEl2Phi = *hPfEl2Phi;
    result &= event->getByLabel( tPfEl2PhotonIso, hPfEl2PhotonIso );
    if ( hPfEl2PhotonIso.isValid() ) PfEl2PhotonIso = *hPfEl2PhotonIso;
    result &= event->getByLabel( tPfEl2Pt, hPfEl2Pt );
    if ( hPfEl2Pt.isValid() ) PfEl2Pt = *hPfEl2Pt;
    result &= event->getByLabel( tPfEl2Px, hPfEl2Px );
    if ( hPfEl2Px.isValid() ) PfEl2Px = *hPfEl2Px;
    result &= event->getByLabel( tPfEl2Py, hPfEl2Py );
    if ( hPfEl2Py.isValid() ) PfEl2Py = *hPfEl2Py;
    result &= event->getByLabel( tPfEl2Pz, hPfEl2Pz );
    if ( hPfEl2Pz.isValid() ) PfEl2Pz = *hPfEl2Pz;
    result &= event->getByLabel( tPfEl3Charge, hPfEl3Charge );
    if ( hPfEl3Charge.isValid() ) PfEl3Charge = *hPfEl3Charge;
    result &= event->getByLabel( tPfEl3ChargedHadronIso, hPfEl3ChargedHadronIso );
    if ( hPfEl3ChargedHadronIso.isValid() ) PfEl3ChargedHadronIso = *hPfEl3ChargedHadronIso;
    result &= event->getByLabel( tPfEl3E, hPfEl3E );
    if ( hPfEl3E.isValid() ) PfEl3E = *hPfEl3E;
    result &= event->getByLabel( tPfEl3Et, hPfEl3Et );
    if ( hPfEl3Et.isValid() ) PfEl3Et = *hPfEl3Et;
    result &= event->getByLabel( tPfEl3Eta, hPfEl3Eta );
    if ( hPfEl3Eta.isValid() ) PfEl3Eta = *hPfEl3Eta;
    result &= event->getByLabel( tPfEl3ID80, hPfEl3ID80 );
    if ( hPfEl3ID80.isValid() ) PfEl3ID80 = *hPfEl3ID80;
    result &= event->getByLabel( tPfEl3ID85, hPfEl3ID85 );
    if ( hPfEl3ID85.isValid() ) PfEl3ID85 = *hPfEl3ID85;
    result &= event->getByLabel( tPfEl3ID90, hPfEl3ID90 );
    if ( hPfEl3ID90.isValid() ) PfEl3ID90 = *hPfEl3ID90;
    result &= event->getByLabel( tPfEl3ID95, hPfEl3ID95 );
    if ( hPfEl3ID95.isValid() ) PfEl3ID95 = *hPfEl3ID95;
    result &= event->getByLabel( tPfEl3MaxLepExc, hPfEl3MaxLepExc );
    if ( hPfEl3MaxLepExc.isValid() ) PfEl3MaxLepExc = *hPfEl3MaxLepExc;
    result &= event->getByLabel( tPfEl3NObjs, hPfEl3NObjs );
    if ( hPfEl3NObjs.isValid() ) PfEl3NObjs = *hPfEl3NObjs;
    result &= event->getByLabel( tPfEl3NObjsTot, hPfEl3NObjsTot );
    if ( hPfEl3NObjsTot.isValid() ) PfEl3NObjsTot = *hPfEl3NObjsTot;
    result &= event->getByLabel( tPfEl3NeutralHadronIso, hPfEl3NeutralHadronIso );
    if ( hPfEl3NeutralHadronIso.isValid() ) PfEl3NeutralHadronIso = *hPfEl3NeutralHadronIso;
    result &= event->getByLabel( tPfEl3ParticleIso, hPfEl3ParticleIso );
    if ( hPfEl3ParticleIso.isValid() ) PfEl3ParticleIso = *hPfEl3ParticleIso;
    result &= event->getByLabel( tPfEl3Phi, hPfEl3Phi );
    if ( hPfEl3Phi.isValid() ) PfEl3Phi = *hPfEl3Phi;
    result &= event->getByLabel( tPfEl3PhotonIso, hPfEl3PhotonIso );
    if ( hPfEl3PhotonIso.isValid() ) PfEl3PhotonIso = *hPfEl3PhotonIso;
    result &= event->getByLabel( tPfEl3Pt, hPfEl3Pt );
    if ( hPfEl3Pt.isValid() ) PfEl3Pt = *hPfEl3Pt;
    result &= event->getByLabel( tPfEl3Px, hPfEl3Px );
    if ( hPfEl3Px.isValid() ) PfEl3Px = *hPfEl3Px;
    result &= event->getByLabel( tPfEl3Py, hPfEl3Py );
    if ( hPfEl3Py.isValid() ) PfEl3Py = *hPfEl3Py;
    result &= event->getByLabel( tPfEl3Pz, hPfEl3Pz );
    if ( hPfEl3Pz.isValid() ) PfEl3Pz = *hPfEl3Pz;
    result &= event->getByLabel( tPfElAntiIsoCharge, hPfElAntiIsoCharge );
    if ( hPfElAntiIsoCharge.isValid() ) PfElAntiIsoCharge = *hPfElAntiIsoCharge;
    result &= event->getByLabel( tPfElAntiIsoChargedHadronIso, hPfElAntiIsoChargedHadronIso );
    if ( hPfElAntiIsoChargedHadronIso.isValid() ) PfElAntiIsoChargedHadronIso = *hPfElAntiIsoChargedHadronIso;
    result &= event->getByLabel( tPfElAntiIsoE, hPfElAntiIsoE );
    if ( hPfElAntiIsoE.isValid() ) PfElAntiIsoE = *hPfElAntiIsoE;
    result &= event->getByLabel( tPfElAntiIsoEt, hPfElAntiIsoEt );
    if ( hPfElAntiIsoEt.isValid() ) PfElAntiIsoEt = *hPfElAntiIsoEt;
    result &= event->getByLabel( tPfElAntiIsoEta, hPfElAntiIsoEta );
    if ( hPfElAntiIsoEta.isValid() ) PfElAntiIsoEta = *hPfElAntiIsoEta;
    result &= event->getByLabel( tPfElAntiIsoID80, hPfElAntiIsoID80 );
    if ( hPfElAntiIsoID80.isValid() ) PfElAntiIsoID80 = *hPfElAntiIsoID80;
    result &= event->getByLabel( tPfElAntiIsoID85, hPfElAntiIsoID85 );
    if ( hPfElAntiIsoID85.isValid() ) PfElAntiIsoID85 = *hPfElAntiIsoID85;
    result &= event->getByLabel( tPfElAntiIsoID90, hPfElAntiIsoID90 );
    if ( hPfElAntiIsoID90.isValid() ) PfElAntiIsoID90 = *hPfElAntiIsoID90;
    result &= event->getByLabel( tPfElAntiIsoID95, hPfElAntiIsoID95 );
    if ( hPfElAntiIsoID95.isValid() ) PfElAntiIsoID95 = *hPfElAntiIsoID95;
    result &= event->getByLabel( tPfElAntiIsoMaxLepExc, hPfElAntiIsoMaxLepExc );
    if ( hPfElAntiIsoMaxLepExc.isValid() ) PfElAntiIsoMaxLepExc = *hPfElAntiIsoMaxLepExc;
    result &= event->getByLabel( tPfElAntiIsoNObjs, hPfElAntiIsoNObjs );
    if ( hPfElAntiIsoNObjs.isValid() ) PfElAntiIsoNObjs = *hPfElAntiIsoNObjs;
    result &= event->getByLabel( tPfElAntiIsoNObjsTot, hPfElAntiIsoNObjsTot );
    if ( hPfElAntiIsoNObjsTot.isValid() ) PfElAntiIsoNObjsTot = *hPfElAntiIsoNObjsTot;
    result &= event->getByLabel( tPfElAntiIsoNeutralHadronIso, hPfElAntiIsoNeutralHadronIso );
    if ( hPfElAntiIsoNeutralHadronIso.isValid() ) PfElAntiIsoNeutralHadronIso = *hPfElAntiIsoNeutralHadronIso;
    result &= event->getByLabel( tPfElAntiIsoParticleIso, hPfElAntiIsoParticleIso );
    if ( hPfElAntiIsoParticleIso.isValid() ) PfElAntiIsoParticleIso = *hPfElAntiIsoParticleIso;
    result &= event->getByLabel( tPfElAntiIsoPhi, hPfElAntiIsoPhi );
    if ( hPfElAntiIsoPhi.isValid() ) PfElAntiIsoPhi = *hPfElAntiIsoPhi;
    result &= event->getByLabel( tPfElAntiIsoPhotonIso, hPfElAntiIsoPhotonIso );
    if ( hPfElAntiIsoPhotonIso.isValid() ) PfElAntiIsoPhotonIso = *hPfElAntiIsoPhotonIso;
    result &= event->getByLabel( tPfElAntiIsoPt, hPfElAntiIsoPt );
    if ( hPfElAntiIsoPt.isValid() ) PfElAntiIsoPt = *hPfElAntiIsoPt;
    result &= event->getByLabel( tPfElAntiIsoPx, hPfElAntiIsoPx );
    if ( hPfElAntiIsoPx.isValid() ) PfElAntiIsoPx = *hPfElAntiIsoPx;
    result &= event->getByLabel( tPfElAntiIsoPy, hPfElAntiIsoPy );
    if ( hPfElAntiIsoPy.isValid() ) PfElAntiIsoPy = *hPfElAntiIsoPy;
    result &= event->getByLabel( tPfElAntiIsoPz, hPfElAntiIsoPz );
    if ( hPfElAntiIsoPz.isValid() ) PfElAntiIsoPz = *hPfElAntiIsoPz;
    result &= event->getByLabel( tPfMu2Charge, hPfMu2Charge );
    if ( hPfMu2Charge.isValid() ) PfMu2Charge = *hPfMu2Charge;
    result &= event->getByLabel( tPfMu2ChargedHadronIso, hPfMu2ChargedHadronIso );
    if ( hPfMu2ChargedHadronIso.isValid() ) PfMu2ChargedHadronIso = *hPfMu2ChargedHadronIso;
    result &= event->getByLabel( tPfMu2E, hPfMu2E );
    if ( hPfMu2E.isValid() ) PfMu2E = *hPfMu2E;
    result &= event->getByLabel( tPfMu2Et, hPfMu2Et );
    if ( hPfMu2Et.isValid() ) PfMu2Et = *hPfMu2Et;
    result &= event->getByLabel( tPfMu2Eta, hPfMu2Eta );
    if ( hPfMu2Eta.isValid() ) PfMu2Eta = *hPfMu2Eta;
    result &= event->getByLabel( tPfMu2MaxLepExc, hPfMu2MaxLepExc );
    if ( hPfMu2MaxLepExc.isValid() ) PfMu2MaxLepExc = *hPfMu2MaxLepExc;
    result &= event->getByLabel( tPfMu2NMatches, hPfMu2NMatches );
    if ( hPfMu2NMatches.isValid() ) PfMu2NMatches = *hPfMu2NMatches;
    result &= event->getByLabel( tPfMu2NObjs, hPfMu2NObjs );
    if ( hPfMu2NObjs.isValid() ) PfMu2NObjs = *hPfMu2NObjs;
    result &= event->getByLabel( tPfMu2NObjsTot, hPfMu2NObjsTot );
    if ( hPfMu2NObjsTot.isValid() ) PfMu2NObjsTot = *hPfMu2NObjsTot;
    result &= event->getByLabel( tPfMu2NeutralHadronIso, hPfMu2NeutralHadronIso );
    if ( hPfMu2NeutralHadronIso.isValid() ) PfMu2NeutralHadronIso = *hPfMu2NeutralHadronIso;
    result &= event->getByLabel( tPfMu2ParticleIso, hPfMu2ParticleIso );
    if ( hPfMu2ParticleIso.isValid() ) PfMu2ParticleIso = *hPfMu2ParticleIso;
    result &= event->getByLabel( tPfMu2Phi, hPfMu2Phi );
    if ( hPfMu2Phi.isValid() ) PfMu2Phi = *hPfMu2Phi;
    result &= event->getByLabel( tPfMu2PhotonIso, hPfMu2PhotonIso );
    if ( hPfMu2PhotonIso.isValid() ) PfMu2PhotonIso = *hPfMu2PhotonIso;
    result &= event->getByLabel( tPfMu2Pt, hPfMu2Pt );
    if ( hPfMu2Pt.isValid() ) PfMu2Pt = *hPfMu2Pt;
    result &= event->getByLabel( tPfMu2PtErr, hPfMu2PtErr );
    if ( hPfMu2PtErr.isValid() ) PfMu2PtErr = *hPfMu2PtErr;
    result &= event->getByLabel( tPfMu2Px, hPfMu2Px );
    if ( hPfMu2Px.isValid() ) PfMu2Px = *hPfMu2Px;
    result &= event->getByLabel( tPfMu2Py, hPfMu2Py );
    if ( hPfMu2Py.isValid() ) PfMu2Py = *hPfMu2Py;
    result &= event->getByLabel( tPfMu2Pz, hPfMu2Pz );
    if ( hPfMu2Pz.isValid() ) PfMu2Pz = *hPfMu2Pz;
    result &= event->getByLabel( tPfMu3Charge, hPfMu3Charge );
    if ( hPfMu3Charge.isValid() ) PfMu3Charge = *hPfMu3Charge;
    result &= event->getByLabel( tPfMu3ChargedHadronIso, hPfMu3ChargedHadronIso );
    if ( hPfMu3ChargedHadronIso.isValid() ) PfMu3ChargedHadronIso = *hPfMu3ChargedHadronIso;
    result &= event->getByLabel( tPfMu3E, hPfMu3E );
    if ( hPfMu3E.isValid() ) PfMu3E = *hPfMu3E;
    result &= event->getByLabel( tPfMu3Et, hPfMu3Et );
    if ( hPfMu3Et.isValid() ) PfMu3Et = *hPfMu3Et;
    result &= event->getByLabel( tPfMu3Eta, hPfMu3Eta );
    if ( hPfMu3Eta.isValid() ) PfMu3Eta = *hPfMu3Eta;
    result &= event->getByLabel( tPfMu3MaxLepExc, hPfMu3MaxLepExc );
    if ( hPfMu3MaxLepExc.isValid() ) PfMu3MaxLepExc = *hPfMu3MaxLepExc;
    result &= event->getByLabel( tPfMu3NMatches, hPfMu3NMatches );
    if ( hPfMu3NMatches.isValid() ) PfMu3NMatches = *hPfMu3NMatches;
    result &= event->getByLabel( tPfMu3NObjs, hPfMu3NObjs );
    if ( hPfMu3NObjs.isValid() ) PfMu3NObjs = *hPfMu3NObjs;
    result &= event->getByLabel( tPfMu3NObjsTot, hPfMu3NObjsTot );
    if ( hPfMu3NObjsTot.isValid() ) PfMu3NObjsTot = *hPfMu3NObjsTot;
    result &= event->getByLabel( tPfMu3NeutralHadronIso, hPfMu3NeutralHadronIso );
    if ( hPfMu3NeutralHadronIso.isValid() ) PfMu3NeutralHadronIso = *hPfMu3NeutralHadronIso;
    result &= event->getByLabel( tPfMu3ParticleIso, hPfMu3ParticleIso );
    if ( hPfMu3ParticleIso.isValid() ) PfMu3ParticleIso = *hPfMu3ParticleIso;
    result &= event->getByLabel( tPfMu3Phi, hPfMu3Phi );
    if ( hPfMu3Phi.isValid() ) PfMu3Phi = *hPfMu3Phi;
    result &= event->getByLabel( tPfMu3PhotonIso, hPfMu3PhotonIso );
    if ( hPfMu3PhotonIso.isValid() ) PfMu3PhotonIso = *hPfMu3PhotonIso;
    result &= event->getByLabel( tPfMu3Pt, hPfMu3Pt );
    if ( hPfMu3Pt.isValid() ) PfMu3Pt = *hPfMu3Pt;
    result &= event->getByLabel( tPfMu3PtErr, hPfMu3PtErr );
    if ( hPfMu3PtErr.isValid() ) PfMu3PtErr = *hPfMu3PtErr;
    result &= event->getByLabel( tPfMu3Px, hPfMu3Px );
    if ( hPfMu3Px.isValid() ) PfMu3Px = *hPfMu3Px;
    result &= event->getByLabel( tPfMu3Py, hPfMu3Py );
    if ( hPfMu3Py.isValid() ) PfMu3Py = *hPfMu3Py;
    result &= event->getByLabel( tPfMu3Pz, hPfMu3Pz );
    if ( hPfMu3Pz.isValid() ) PfMu3Pz = *hPfMu3Pz;
    result &= event->getByLabel( tPfMuAntiIsoCharge, hPfMuAntiIsoCharge );
    if ( hPfMuAntiIsoCharge.isValid() ) PfMuAntiIsoCharge = *hPfMuAntiIsoCharge;
    result &= event->getByLabel( tPfMuAntiIsoChargedHadronIso, hPfMuAntiIsoChargedHadronIso );
    if ( hPfMuAntiIsoChargedHadronIso.isValid() ) PfMuAntiIsoChargedHadronIso = *hPfMuAntiIsoChargedHadronIso;
    result &= event->getByLabel( tPfMuAntiIsoE, hPfMuAntiIsoE );
    if ( hPfMuAntiIsoE.isValid() ) PfMuAntiIsoE = *hPfMuAntiIsoE;
    result &= event->getByLabel( tPfMuAntiIsoEt, hPfMuAntiIsoEt );
    if ( hPfMuAntiIsoEt.isValid() ) PfMuAntiIsoEt = *hPfMuAntiIsoEt;
    result &= event->getByLabel( tPfMuAntiIsoEta, hPfMuAntiIsoEta );
    if ( hPfMuAntiIsoEta.isValid() ) PfMuAntiIsoEta = *hPfMuAntiIsoEta;
    result &= event->getByLabel( tPfMuAntiIsoMaxLepExc, hPfMuAntiIsoMaxLepExc );
    if ( hPfMuAntiIsoMaxLepExc.isValid() ) PfMuAntiIsoMaxLepExc = *hPfMuAntiIsoMaxLepExc;
    result &= event->getByLabel( tPfMuAntiIsoNMatches, hPfMuAntiIsoNMatches );
    if ( hPfMuAntiIsoNMatches.isValid() ) PfMuAntiIsoNMatches = *hPfMuAntiIsoNMatches;
    result &= event->getByLabel( tPfMuAntiIsoNObjs, hPfMuAntiIsoNObjs );
    if ( hPfMuAntiIsoNObjs.isValid() ) PfMuAntiIsoNObjs = *hPfMuAntiIsoNObjs;
    result &= event->getByLabel( tPfMuAntiIsoNObjsTot, hPfMuAntiIsoNObjsTot );
    if ( hPfMuAntiIsoNObjsTot.isValid() ) PfMuAntiIsoNObjsTot = *hPfMuAntiIsoNObjsTot;
    result &= event->getByLabel( tPfMuAntiIsoNeutralHadronIso, hPfMuAntiIsoNeutralHadronIso );
    if ( hPfMuAntiIsoNeutralHadronIso.isValid() ) PfMuAntiIsoNeutralHadronIso = *hPfMuAntiIsoNeutralHadronIso;
    result &= event->getByLabel( tPfMuAntiIsoParticleIso, hPfMuAntiIsoParticleIso );
    if ( hPfMuAntiIsoParticleIso.isValid() ) PfMuAntiIsoParticleIso = *hPfMuAntiIsoParticleIso;
    result &= event->getByLabel( tPfMuAntiIsoPhi, hPfMuAntiIsoPhi );
    if ( hPfMuAntiIsoPhi.isValid() ) PfMuAntiIsoPhi = *hPfMuAntiIsoPhi;
    result &= event->getByLabel( tPfMuAntiIsoPhotonIso, hPfMuAntiIsoPhotonIso );
    if ( hPfMuAntiIsoPhotonIso.isValid() ) PfMuAntiIsoPhotonIso = *hPfMuAntiIsoPhotonIso;
    result &= event->getByLabel( tPfMuAntiIsoPt, hPfMuAntiIsoPt );
    if ( hPfMuAntiIsoPt.isValid() ) PfMuAntiIsoPt = *hPfMuAntiIsoPt;
    result &= event->getByLabel( tPfMuAntiIsoPtErr, hPfMuAntiIsoPtErr );
    if ( hPfMuAntiIsoPtErr.isValid() ) PfMuAntiIsoPtErr = *hPfMuAntiIsoPtErr;
    result &= event->getByLabel( tPfMuAntiIsoPx, hPfMuAntiIsoPx );
    if ( hPfMuAntiIsoPx.isValid() ) PfMuAntiIsoPx = *hPfMuAntiIsoPx;
    result &= event->getByLabel( tPfMuAntiIsoPy, hPfMuAntiIsoPy );
    if ( hPfMuAntiIsoPy.isValid() ) PfMuAntiIsoPy = *hPfMuAntiIsoPy;
    result &= event->getByLabel( tPfMuAntiIsoPz, hPfMuAntiIsoPz );
    if ( hPfMuAntiIsoPz.isValid() ) PfMuAntiIsoPz = *hPfMuAntiIsoPz;
    result &= event->getByLabel( tPfTau2Charge, hPfTau2Charge );
    if ( hPfTau2Charge.isValid() ) PfTau2Charge = *hPfTau2Charge;
    result &= event->getByLabel( tPfTau2ChargedHadronIso, hPfTau2ChargedHadronIso );
    if ( hPfTau2ChargedHadronIso.isValid() ) PfTau2ChargedHadronIso = *hPfTau2ChargedHadronIso;
    result &= event->getByLabel( tPfTau2DecayMode, hPfTau2DecayMode );
    if ( hPfTau2DecayMode.isValid() ) PfTau2DecayMode = *hPfTau2DecayMode;
    result &= event->getByLabel( tPfTau2DecayModeFinding, hPfTau2DecayModeFinding );
    if ( hPfTau2DecayModeFinding.isValid() ) PfTau2DecayModeFinding = *hPfTau2DecayModeFinding;
    result &= event->getByLabel( tPfTau2E, hPfTau2E );
    if ( hPfTau2E.isValid() ) PfTau2E = *hPfTau2E;
    result &= event->getByLabel( tPfTau2EmFraction, hPfTau2EmFraction );
    if ( hPfTau2EmFraction.isValid() ) PfTau2EmFraction = *hPfTau2EmFraction;
    result &= event->getByLabel( tPfTau2Et, hPfTau2Et );
    if ( hPfTau2Et.isValid() ) PfTau2Et = *hPfTau2Et;
    result &= event->getByLabel( tPfTau2Eta, hPfTau2Eta );
    if ( hPfTau2Eta.isValid() ) PfTau2Eta = *hPfTau2Eta;
    result &= event->getByLabel( tPfTau2JetEta, hPfTau2JetEta );
    if ( hPfTau2JetEta.isValid() ) PfTau2JetEta = *hPfTau2JetEta;
    result &= event->getByLabel( tPfTau2JetMass, hPfTau2JetMass );
    if ( hPfTau2JetMass.isValid() ) PfTau2JetMass = *hPfTau2JetMass;
    result &= event->getByLabel( tPfTau2JetPhi, hPfTau2JetPhi );
    if ( hPfTau2JetPhi.isValid() ) PfTau2JetPhi = *hPfTau2JetPhi;
    result &= event->getByLabel( tPfTau2JetPt, hPfTau2JetPt );
    if ( hPfTau2JetPt.isValid() ) PfTau2JetPt = *hPfTau2JetPt;
    result &= event->getByLabel( tPfTau2LeadingNeuPt, hPfTau2LeadingNeuPt );
    if ( hPfTau2LeadingNeuPt.isValid() ) PfTau2LeadingNeuPt = *hPfTau2LeadingNeuPt;
    result &= event->getByLabel( tPfTau2LeadingTkEcalenergy, hPfTau2LeadingTkEcalenergy );
    if ( hPfTau2LeadingTkEcalenergy.isValid() ) PfTau2LeadingTkEcalenergy = *hPfTau2LeadingTkEcalenergy;
    result &= event->getByLabel( tPfTau2LeadingTkHcalenergy, hPfTau2LeadingTkHcalenergy );
    if ( hPfTau2LeadingTkHcalenergy.isValid() ) PfTau2LeadingTkHcalenergy = *hPfTau2LeadingTkHcalenergy;
    result &= event->getByLabel( tPfTau2LeadingTkPt, hPfTau2LeadingTkPt );
    if ( hPfTau2LeadingTkPt.isValid() ) PfTau2LeadingTkPt = *hPfTau2LeadingTkPt;
    result &= event->getByLabel( tPfTau2LooseChargedIso, hPfTau2LooseChargedIso );
    if ( hPfTau2LooseChargedIso.isValid() ) PfTau2LooseChargedIso = *hPfTau2LooseChargedIso;
    result &= event->getByLabel( tPfTau2LooseCombinedIsoDBSumPtCorr, hPfTau2LooseCombinedIsoDBSumPtCorr );
    if ( hPfTau2LooseCombinedIsoDBSumPtCorr.isValid() ) PfTau2LooseCombinedIsoDBSumPtCorr = *hPfTau2LooseCombinedIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTau2LooseElectronRejection, hPfTau2LooseElectronRejection );
    if ( hPfTau2LooseElectronRejection.isValid() ) PfTau2LooseElectronRejection = *hPfTau2LooseElectronRejection;
    result &= event->getByLabel( tPfTau2LooseIso, hPfTau2LooseIso );
    if ( hPfTau2LooseIso.isValid() ) PfTau2LooseIso = *hPfTau2LooseIso;
    result &= event->getByLabel( tPfTau2LooseIsoDBSumPtCorr, hPfTau2LooseIsoDBSumPtCorr );
    if ( hPfTau2LooseIsoDBSumPtCorr.isValid() ) PfTau2LooseIsoDBSumPtCorr = *hPfTau2LooseIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTau2LooseMuonRejection, hPfTau2LooseMuonRejection );
    if ( hPfTau2LooseMuonRejection.isValid() ) PfTau2LooseMuonRejection = *hPfTau2LooseMuonRejection;
    result &= event->getByLabel( tPfTau2MaxLepExc, hPfTau2MaxLepExc );
    if ( hPfTau2MaxLepExc.isValid() ) PfTau2MaxLepExc = *hPfTau2MaxLepExc;
    result &= event->getByLabel( tPfTau2MediumChargedIso, hPfTau2MediumChargedIso );
    if ( hPfTau2MediumChargedIso.isValid() ) PfTau2MediumChargedIso = *hPfTau2MediumChargedIso;
    result &= event->getByLabel( tPfTau2MediumCombinedIsoDBSumPtCorr, hPfTau2MediumCombinedIsoDBSumPtCorr );
    if ( hPfTau2MediumCombinedIsoDBSumPtCorr.isValid() ) PfTau2MediumCombinedIsoDBSumPtCorr = *hPfTau2MediumCombinedIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTau2MediumElectronRejection, hPfTau2MediumElectronRejection );
    if ( hPfTau2MediumElectronRejection.isValid() ) PfTau2MediumElectronRejection = *hPfTau2MediumElectronRejection;
    result &= event->getByLabel( tPfTau2MediumIso, hPfTau2MediumIso );
    if ( hPfTau2MediumIso.isValid() ) PfTau2MediumIso = *hPfTau2MediumIso;
    result &= event->getByLabel( tPfTau2MediumIsoDBSumPtCorr, hPfTau2MediumIsoDBSumPtCorr );
    if ( hPfTau2MediumIsoDBSumPtCorr.isValid() ) PfTau2MediumIsoDBSumPtCorr = *hPfTau2MediumIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTau2NObjs, hPfTau2NObjs );
    if ( hPfTau2NObjs.isValid() ) PfTau2NObjs = *hPfTau2NObjs;
    result &= event->getByLabel( tPfTau2NObjsTot, hPfTau2NObjsTot );
    if ( hPfTau2NObjsTot.isValid() ) PfTau2NObjsTot = *hPfTau2NObjsTot;
    result &= event->getByLabel( tPfTau2NeutralHadronIso, hPfTau2NeutralHadronIso );
    if ( hPfTau2NeutralHadronIso.isValid() ) PfTau2NeutralHadronIso = *hPfTau2NeutralHadronIso;
    result &= event->getByLabel( tPfTau2NumChargedHadronsIsoCone, hPfTau2NumChargedHadronsIsoCone );
    if ( hPfTau2NumChargedHadronsIsoCone.isValid() ) PfTau2NumChargedHadronsIsoCone = *hPfTau2NumChargedHadronsIsoCone;
    result &= event->getByLabel( tPfTau2NumChargedHadronsSignalCone, hPfTau2NumChargedHadronsSignalCone );
    if ( hPfTau2NumChargedHadronsSignalCone.isValid() ) PfTau2NumChargedHadronsSignalCone = *hPfTau2NumChargedHadronsSignalCone;
    result &= event->getByLabel( tPfTau2NumNeutralHadronsIsoCone, hPfTau2NumNeutralHadronsIsoCone );
    if ( hPfTau2NumNeutralHadronsIsoCone.isValid() ) PfTau2NumNeutralHadronsIsoCone = *hPfTau2NumNeutralHadronsIsoCone;
    result &= event->getByLabel( tPfTau2NumNeutralHadronsSignalCone, hPfTau2NumNeutralHadronsSignalCone );
    if ( hPfTau2NumNeutralHadronsSignalCone.isValid() ) PfTau2NumNeutralHadronsSignalCone = *hPfTau2NumNeutralHadronsSignalCone;
    result &= event->getByLabel( tPfTau2NumParticlesIsolationCone, hPfTau2NumParticlesIsolationCone );
    if ( hPfTau2NumParticlesIsolationCone.isValid() ) PfTau2NumParticlesIsolationCone = *hPfTau2NumParticlesIsolationCone;
    result &= event->getByLabel( tPfTau2NumParticlesSignalCone, hPfTau2NumParticlesSignalCone );
    if ( hPfTau2NumParticlesSignalCone.isValid() ) PfTau2NumParticlesSignalCone = *hPfTau2NumParticlesSignalCone;
    result &= event->getByLabel( tPfTau2NumPhotonsIsolationCone, hPfTau2NumPhotonsIsolationCone );
    if ( hPfTau2NumPhotonsIsolationCone.isValid() ) PfTau2NumPhotonsIsolationCone = *hPfTau2NumPhotonsIsolationCone;
    result &= event->getByLabel( tPfTau2NumPhotonsSignalCone, hPfTau2NumPhotonsSignalCone );
    if ( hPfTau2NumPhotonsSignalCone.isValid() ) PfTau2NumPhotonsSignalCone = *hPfTau2NumPhotonsSignalCone;
    result &= event->getByLabel( tPfTau2ParticleIso, hPfTau2ParticleIso );
    if ( hPfTau2ParticleIso.isValid() ) PfTau2ParticleIso = *hPfTau2ParticleIso;
    result &= event->getByLabel( tPfTau2Phi, hPfTau2Phi );
    if ( hPfTau2Phi.isValid() ) PfTau2Phi = *hPfTau2Phi;
    result &= event->getByLabel( tPfTau2PhotonIso, hPfTau2PhotonIso );
    if ( hPfTau2PhotonIso.isValid() ) PfTau2PhotonIso = *hPfTau2PhotonIso;
    result &= event->getByLabel( tPfTau2Pt, hPfTau2Pt );
    if ( hPfTau2Pt.isValid() ) PfTau2Pt = *hPfTau2Pt;
    result &= event->getByLabel( tPfTau2PtSumChargedParticlesIsoCone, hPfTau2PtSumChargedParticlesIsoCone );
    if ( hPfTau2PtSumChargedParticlesIsoCone.isValid() ) PfTau2PtSumChargedParticlesIsoCone = *hPfTau2PtSumChargedParticlesIsoCone;
    result &= event->getByLabel( tPfTau2PtSumPhotonsIsoCone, hPfTau2PtSumPhotonsIsoCone );
    if ( hPfTau2PtSumPhotonsIsoCone.isValid() ) PfTau2PtSumPhotonsIsoCone = *hPfTau2PtSumPhotonsIsoCone;
    result &= event->getByLabel( tPfTau2Px, hPfTau2Px );
    if ( hPfTau2Px.isValid() ) PfTau2Px = *hPfTau2Px;
    result &= event->getByLabel( tPfTau2Py, hPfTau2Py );
    if ( hPfTau2Py.isValid() ) PfTau2Py = *hPfTau2Py;
    result &= event->getByLabel( tPfTau2Pz, hPfTau2Pz );
    if ( hPfTau2Pz.isValid() ) PfTau2Pz = *hPfTau2Pz;
    result &= event->getByLabel( tPfTau2TightChargedIso, hPfTau2TightChargedIso );
    if ( hPfTau2TightChargedIso.isValid() ) PfTau2TightChargedIso = *hPfTau2TightChargedIso;
    result &= event->getByLabel( tPfTau2TightCombinedIsoDBSumPtCorr, hPfTau2TightCombinedIsoDBSumPtCorr );
    if ( hPfTau2TightCombinedIsoDBSumPtCorr.isValid() ) PfTau2TightCombinedIsoDBSumPtCorr = *hPfTau2TightCombinedIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTau2TightElectronRejection, hPfTau2TightElectronRejection );
    if ( hPfTau2TightElectronRejection.isValid() ) PfTau2TightElectronRejection = *hPfTau2TightElectronRejection;
    result &= event->getByLabel( tPfTau2TightIso, hPfTau2TightIso );
    if ( hPfTau2TightIso.isValid() ) PfTau2TightIso = *hPfTau2TightIso;
    result &= event->getByLabel( tPfTau2TightIsoDBSumPtCorr, hPfTau2TightIsoDBSumPtCorr );
    if ( hPfTau2TightIsoDBSumPtCorr.isValid() ) PfTau2TightIsoDBSumPtCorr = *hPfTau2TightIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTau2TightMuonRejection, hPfTau2TightMuonRejection );
    if ( hPfTau2TightMuonRejection.isValid() ) PfTau2TightMuonRejection = *hPfTau2TightMuonRejection;
    result &= event->getByLabel( tPfTau2VLooseChargedIso, hPfTau2VLooseChargedIso );
    if ( hPfTau2VLooseChargedIso.isValid() ) PfTau2VLooseChargedIso = *hPfTau2VLooseChargedIso;
    result &= event->getByLabel( tPfTau2VLooseCombinedIsoDBSumPtCorr, hPfTau2VLooseCombinedIsoDBSumPtCorr );
    if ( hPfTau2VLooseCombinedIsoDBSumPtCorr.isValid() ) PfTau2VLooseCombinedIsoDBSumPtCorr = *hPfTau2VLooseCombinedIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTau2VLooseIso, hPfTau2VLooseIso );
    if ( hPfTau2VLooseIso.isValid() ) PfTau2VLooseIso = *hPfTau2VLooseIso;
    result &= event->getByLabel( tPfTau2VLooseIsoDBSumPtCorr, hPfTau2VLooseIsoDBSumPtCorr );
    if ( hPfTau2VLooseIsoDBSumPtCorr.isValid() ) PfTau2VLooseIsoDBSumPtCorr = *hPfTau2VLooseIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTau2Vz, hPfTau2Vz );
    if ( hPfTau2Vz.isValid() ) PfTau2Vz = *hPfTau2Vz;
    result &= event->getByLabel( tPfTau3Charge, hPfTau3Charge );
    if ( hPfTau3Charge.isValid() ) PfTau3Charge = *hPfTau3Charge;
    result &= event->getByLabel( tPfTau3ChargedHadronIso, hPfTau3ChargedHadronIso );
    if ( hPfTau3ChargedHadronIso.isValid() ) PfTau3ChargedHadronIso = *hPfTau3ChargedHadronIso;
    result &= event->getByLabel( tPfTau3DecayMode, hPfTau3DecayMode );
    if ( hPfTau3DecayMode.isValid() ) PfTau3DecayMode = *hPfTau3DecayMode;
    result &= event->getByLabel( tPfTau3DecayModeFinding, hPfTau3DecayModeFinding );
    if ( hPfTau3DecayModeFinding.isValid() ) PfTau3DecayModeFinding = *hPfTau3DecayModeFinding;
    result &= event->getByLabel( tPfTau3E, hPfTau3E );
    if ( hPfTau3E.isValid() ) PfTau3E = *hPfTau3E;
    result &= event->getByLabel( tPfTau3EmFraction, hPfTau3EmFraction );
    if ( hPfTau3EmFraction.isValid() ) PfTau3EmFraction = *hPfTau3EmFraction;
    result &= event->getByLabel( tPfTau3Et, hPfTau3Et );
    if ( hPfTau3Et.isValid() ) PfTau3Et = *hPfTau3Et;
    result &= event->getByLabel( tPfTau3Eta, hPfTau3Eta );
    if ( hPfTau3Eta.isValid() ) PfTau3Eta = *hPfTau3Eta;
    result &= event->getByLabel( tPfTau3JetEta, hPfTau3JetEta );
    if ( hPfTau3JetEta.isValid() ) PfTau3JetEta = *hPfTau3JetEta;
    result &= event->getByLabel( tPfTau3JetMass, hPfTau3JetMass );
    if ( hPfTau3JetMass.isValid() ) PfTau3JetMass = *hPfTau3JetMass;
    result &= event->getByLabel( tPfTau3JetPhi, hPfTau3JetPhi );
    if ( hPfTau3JetPhi.isValid() ) PfTau3JetPhi = *hPfTau3JetPhi;
    result &= event->getByLabel( tPfTau3JetPt, hPfTau3JetPt );
    if ( hPfTau3JetPt.isValid() ) PfTau3JetPt = *hPfTau3JetPt;
    result &= event->getByLabel( tPfTau3LeadingNeuPt, hPfTau3LeadingNeuPt );
    if ( hPfTau3LeadingNeuPt.isValid() ) PfTau3LeadingNeuPt = *hPfTau3LeadingNeuPt;
    result &= event->getByLabel( tPfTau3LeadingTkEcalenergy, hPfTau3LeadingTkEcalenergy );
    if ( hPfTau3LeadingTkEcalenergy.isValid() ) PfTau3LeadingTkEcalenergy = *hPfTau3LeadingTkEcalenergy;
    result &= event->getByLabel( tPfTau3LeadingTkHcalenergy, hPfTau3LeadingTkHcalenergy );
    if ( hPfTau3LeadingTkHcalenergy.isValid() ) PfTau3LeadingTkHcalenergy = *hPfTau3LeadingTkHcalenergy;
    result &= event->getByLabel( tPfTau3LeadingTkPt, hPfTau3LeadingTkPt );
    if ( hPfTau3LeadingTkPt.isValid() ) PfTau3LeadingTkPt = *hPfTau3LeadingTkPt;
    result &= event->getByLabel( tPfTau3LooseChargedIso, hPfTau3LooseChargedIso );
    if ( hPfTau3LooseChargedIso.isValid() ) PfTau3LooseChargedIso = *hPfTau3LooseChargedIso;
    result &= event->getByLabel( tPfTau3LooseCombinedIsoDBSumPtCorr, hPfTau3LooseCombinedIsoDBSumPtCorr );
    if ( hPfTau3LooseCombinedIsoDBSumPtCorr.isValid() ) PfTau3LooseCombinedIsoDBSumPtCorr = *hPfTau3LooseCombinedIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTau3LooseElectronRejection, hPfTau3LooseElectronRejection );
    if ( hPfTau3LooseElectronRejection.isValid() ) PfTau3LooseElectronRejection = *hPfTau3LooseElectronRejection;
    result &= event->getByLabel( tPfTau3LooseIso, hPfTau3LooseIso );
    if ( hPfTau3LooseIso.isValid() ) PfTau3LooseIso = *hPfTau3LooseIso;
    result &= event->getByLabel( tPfTau3LooseIsoDBSumPtCorr, hPfTau3LooseIsoDBSumPtCorr );
    if ( hPfTau3LooseIsoDBSumPtCorr.isValid() ) PfTau3LooseIsoDBSumPtCorr = *hPfTau3LooseIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTau3LooseMuonRejection, hPfTau3LooseMuonRejection );
    if ( hPfTau3LooseMuonRejection.isValid() ) PfTau3LooseMuonRejection = *hPfTau3LooseMuonRejection;
    result &= event->getByLabel( tPfTau3MaxLepExc, hPfTau3MaxLepExc );
    if ( hPfTau3MaxLepExc.isValid() ) PfTau3MaxLepExc = *hPfTau3MaxLepExc;
    result &= event->getByLabel( tPfTau3MediumChargedIso, hPfTau3MediumChargedIso );
    if ( hPfTau3MediumChargedIso.isValid() ) PfTau3MediumChargedIso = *hPfTau3MediumChargedIso;
    result &= event->getByLabel( tPfTau3MediumCombinedIsoDBSumPtCorr, hPfTau3MediumCombinedIsoDBSumPtCorr );
    if ( hPfTau3MediumCombinedIsoDBSumPtCorr.isValid() ) PfTau3MediumCombinedIsoDBSumPtCorr = *hPfTau3MediumCombinedIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTau3MediumElectronRejection, hPfTau3MediumElectronRejection );
    if ( hPfTau3MediumElectronRejection.isValid() ) PfTau3MediumElectronRejection = *hPfTau3MediumElectronRejection;
    result &= event->getByLabel( tPfTau3MediumIso, hPfTau3MediumIso );
    if ( hPfTau3MediumIso.isValid() ) PfTau3MediumIso = *hPfTau3MediumIso;
    result &= event->getByLabel( tPfTau3MediumIsoDBSumPtCorr, hPfTau3MediumIsoDBSumPtCorr );
    if ( hPfTau3MediumIsoDBSumPtCorr.isValid() ) PfTau3MediumIsoDBSumPtCorr = *hPfTau3MediumIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTau3NObjs, hPfTau3NObjs );
    if ( hPfTau3NObjs.isValid() ) PfTau3NObjs = *hPfTau3NObjs;
    result &= event->getByLabel( tPfTau3NObjsTot, hPfTau3NObjsTot );
    if ( hPfTau3NObjsTot.isValid() ) PfTau3NObjsTot = *hPfTau3NObjsTot;
    result &= event->getByLabel( tPfTau3NeutralHadronIso, hPfTau3NeutralHadronIso );
    if ( hPfTau3NeutralHadronIso.isValid() ) PfTau3NeutralHadronIso = *hPfTau3NeutralHadronIso;
    result &= event->getByLabel( tPfTau3NumChargedHadronsIsoCone, hPfTau3NumChargedHadronsIsoCone );
    if ( hPfTau3NumChargedHadronsIsoCone.isValid() ) PfTau3NumChargedHadronsIsoCone = *hPfTau3NumChargedHadronsIsoCone;
    result &= event->getByLabel( tPfTau3NumChargedHadronsSignalCone, hPfTau3NumChargedHadronsSignalCone );
    if ( hPfTau3NumChargedHadronsSignalCone.isValid() ) PfTau3NumChargedHadronsSignalCone = *hPfTau3NumChargedHadronsSignalCone;
    result &= event->getByLabel( tPfTau3NumNeutralHadronsIsoCone, hPfTau3NumNeutralHadronsIsoCone );
    if ( hPfTau3NumNeutralHadronsIsoCone.isValid() ) PfTau3NumNeutralHadronsIsoCone = *hPfTau3NumNeutralHadronsIsoCone;
    result &= event->getByLabel( tPfTau3NumNeutralHadronsSignalCone, hPfTau3NumNeutralHadronsSignalCone );
    if ( hPfTau3NumNeutralHadronsSignalCone.isValid() ) PfTau3NumNeutralHadronsSignalCone = *hPfTau3NumNeutralHadronsSignalCone;
    result &= event->getByLabel( tPfTau3NumParticlesIsolationCone, hPfTau3NumParticlesIsolationCone );
    if ( hPfTau3NumParticlesIsolationCone.isValid() ) PfTau3NumParticlesIsolationCone = *hPfTau3NumParticlesIsolationCone;
    result &= event->getByLabel( tPfTau3NumParticlesSignalCone, hPfTau3NumParticlesSignalCone );
    if ( hPfTau3NumParticlesSignalCone.isValid() ) PfTau3NumParticlesSignalCone = *hPfTau3NumParticlesSignalCone;
    result &= event->getByLabel( tPfTau3NumPhotonsIsolationCone, hPfTau3NumPhotonsIsolationCone );
    if ( hPfTau3NumPhotonsIsolationCone.isValid() ) PfTau3NumPhotonsIsolationCone = *hPfTau3NumPhotonsIsolationCone;
    result &= event->getByLabel( tPfTau3NumPhotonsSignalCone, hPfTau3NumPhotonsSignalCone );
    if ( hPfTau3NumPhotonsSignalCone.isValid() ) PfTau3NumPhotonsSignalCone = *hPfTau3NumPhotonsSignalCone;
    result &= event->getByLabel( tPfTau3ParticleIso, hPfTau3ParticleIso );
    if ( hPfTau3ParticleIso.isValid() ) PfTau3ParticleIso = *hPfTau3ParticleIso;
    result &= event->getByLabel( tPfTau3Phi, hPfTau3Phi );
    if ( hPfTau3Phi.isValid() ) PfTau3Phi = *hPfTau3Phi;
    result &= event->getByLabel( tPfTau3PhotonIso, hPfTau3PhotonIso );
    if ( hPfTau3PhotonIso.isValid() ) PfTau3PhotonIso = *hPfTau3PhotonIso;
    result &= event->getByLabel( tPfTau3Pt, hPfTau3Pt );
    if ( hPfTau3Pt.isValid() ) PfTau3Pt = *hPfTau3Pt;
    result &= event->getByLabel( tPfTau3PtSumChargedParticlesIsoCone, hPfTau3PtSumChargedParticlesIsoCone );
    if ( hPfTau3PtSumChargedParticlesIsoCone.isValid() ) PfTau3PtSumChargedParticlesIsoCone = *hPfTau3PtSumChargedParticlesIsoCone;
    result &= event->getByLabel( tPfTau3PtSumPhotonsIsoCone, hPfTau3PtSumPhotonsIsoCone );
    if ( hPfTau3PtSumPhotonsIsoCone.isValid() ) PfTau3PtSumPhotonsIsoCone = *hPfTau3PtSumPhotonsIsoCone;
    result &= event->getByLabel( tPfTau3Px, hPfTau3Px );
    if ( hPfTau3Px.isValid() ) PfTau3Px = *hPfTau3Px;
    result &= event->getByLabel( tPfTau3Py, hPfTau3Py );
    if ( hPfTau3Py.isValid() ) PfTau3Py = *hPfTau3Py;
    result &= event->getByLabel( tPfTau3Pz, hPfTau3Pz );
    if ( hPfTau3Pz.isValid() ) PfTau3Pz = *hPfTau3Pz;
    result &= event->getByLabel( tPfTau3TightChargedIso, hPfTau3TightChargedIso );
    if ( hPfTau3TightChargedIso.isValid() ) PfTau3TightChargedIso = *hPfTau3TightChargedIso;
    result &= event->getByLabel( tPfTau3TightCombinedIsoDBSumPtCorr, hPfTau3TightCombinedIsoDBSumPtCorr );
    if ( hPfTau3TightCombinedIsoDBSumPtCorr.isValid() ) PfTau3TightCombinedIsoDBSumPtCorr = *hPfTau3TightCombinedIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTau3TightElectronRejection, hPfTau3TightElectronRejection );
    if ( hPfTau3TightElectronRejection.isValid() ) PfTau3TightElectronRejection = *hPfTau3TightElectronRejection;
    result &= event->getByLabel( tPfTau3TightIso, hPfTau3TightIso );
    if ( hPfTau3TightIso.isValid() ) PfTau3TightIso = *hPfTau3TightIso;
    result &= event->getByLabel( tPfTau3TightIsoDBSumPtCorr, hPfTau3TightIsoDBSumPtCorr );
    if ( hPfTau3TightIsoDBSumPtCorr.isValid() ) PfTau3TightIsoDBSumPtCorr = *hPfTau3TightIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTau3TightMuonRejection, hPfTau3TightMuonRejection );
    if ( hPfTau3TightMuonRejection.isValid() ) PfTau3TightMuonRejection = *hPfTau3TightMuonRejection;
    result &= event->getByLabel( tPfTau3VLooseChargedIso, hPfTau3VLooseChargedIso );
    if ( hPfTau3VLooseChargedIso.isValid() ) PfTau3VLooseChargedIso = *hPfTau3VLooseChargedIso;
    result &= event->getByLabel( tPfTau3VLooseCombinedIsoDBSumPtCorr, hPfTau3VLooseCombinedIsoDBSumPtCorr );
    if ( hPfTau3VLooseCombinedIsoDBSumPtCorr.isValid() ) PfTau3VLooseCombinedIsoDBSumPtCorr = *hPfTau3VLooseCombinedIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTau3VLooseIso, hPfTau3VLooseIso );
    if ( hPfTau3VLooseIso.isValid() ) PfTau3VLooseIso = *hPfTau3VLooseIso;
    result &= event->getByLabel( tPfTau3VLooseIsoDBSumPtCorr, hPfTau3VLooseIsoDBSumPtCorr );
    if ( hPfTau3VLooseIsoDBSumPtCorr.isValid() ) PfTau3VLooseIsoDBSumPtCorr = *hPfTau3VLooseIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTau3Vz, hPfTau3Vz );
    if ( hPfTau3Vz.isValid() ) PfTau3Vz = *hPfTau3Vz;
    result &= event->getByLabel( tPfTauAntiIsoCharge, hPfTauAntiIsoCharge );
    if ( hPfTauAntiIsoCharge.isValid() ) PfTauAntiIsoCharge = *hPfTauAntiIsoCharge;
    result &= event->getByLabel( tPfTauAntiIsoChargedHadronIso, hPfTauAntiIsoChargedHadronIso );
    if ( hPfTauAntiIsoChargedHadronIso.isValid() ) PfTauAntiIsoChargedHadronIso = *hPfTauAntiIsoChargedHadronIso;
    result &= event->getByLabel( tPfTauAntiIsoDecayMode, hPfTauAntiIsoDecayMode );
    if ( hPfTauAntiIsoDecayMode.isValid() ) PfTauAntiIsoDecayMode = *hPfTauAntiIsoDecayMode;
    result &= event->getByLabel( tPfTauAntiIsoDecayModeFinding, hPfTauAntiIsoDecayModeFinding );
    if ( hPfTauAntiIsoDecayModeFinding.isValid() ) PfTauAntiIsoDecayModeFinding = *hPfTauAntiIsoDecayModeFinding;
    result &= event->getByLabel( tPfTauAntiIsoE, hPfTauAntiIsoE );
    if ( hPfTauAntiIsoE.isValid() ) PfTauAntiIsoE = *hPfTauAntiIsoE;
    result &= event->getByLabel( tPfTauAntiIsoEmFraction, hPfTauAntiIsoEmFraction );
    if ( hPfTauAntiIsoEmFraction.isValid() ) PfTauAntiIsoEmFraction = *hPfTauAntiIsoEmFraction;
    result &= event->getByLabel( tPfTauAntiIsoEt, hPfTauAntiIsoEt );
    if ( hPfTauAntiIsoEt.isValid() ) PfTauAntiIsoEt = *hPfTauAntiIsoEt;
    result &= event->getByLabel( tPfTauAntiIsoEta, hPfTauAntiIsoEta );
    if ( hPfTauAntiIsoEta.isValid() ) PfTauAntiIsoEta = *hPfTauAntiIsoEta;
    result &= event->getByLabel( tPfTauAntiIsoJetEta, hPfTauAntiIsoJetEta );
    if ( hPfTauAntiIsoJetEta.isValid() ) PfTauAntiIsoJetEta = *hPfTauAntiIsoJetEta;
    result &= event->getByLabel( tPfTauAntiIsoJetMass, hPfTauAntiIsoJetMass );
    if ( hPfTauAntiIsoJetMass.isValid() ) PfTauAntiIsoJetMass = *hPfTauAntiIsoJetMass;
    result &= event->getByLabel( tPfTauAntiIsoJetPhi, hPfTauAntiIsoJetPhi );
    if ( hPfTauAntiIsoJetPhi.isValid() ) PfTauAntiIsoJetPhi = *hPfTauAntiIsoJetPhi;
    result &= event->getByLabel( tPfTauAntiIsoJetPt, hPfTauAntiIsoJetPt );
    if ( hPfTauAntiIsoJetPt.isValid() ) PfTauAntiIsoJetPt = *hPfTauAntiIsoJetPt;
    result &= event->getByLabel( tPfTauAntiIsoLeadingNeuPt, hPfTauAntiIsoLeadingNeuPt );
    if ( hPfTauAntiIsoLeadingNeuPt.isValid() ) PfTauAntiIsoLeadingNeuPt = *hPfTauAntiIsoLeadingNeuPt;
    result &= event->getByLabel( tPfTauAntiIsoLeadingTkEcalenergy, hPfTauAntiIsoLeadingTkEcalenergy );
    if ( hPfTauAntiIsoLeadingTkEcalenergy.isValid() ) PfTauAntiIsoLeadingTkEcalenergy = *hPfTauAntiIsoLeadingTkEcalenergy;
    result &= event->getByLabel( tPfTauAntiIsoLeadingTkHcalenergy, hPfTauAntiIsoLeadingTkHcalenergy );
    if ( hPfTauAntiIsoLeadingTkHcalenergy.isValid() ) PfTauAntiIsoLeadingTkHcalenergy = *hPfTauAntiIsoLeadingTkHcalenergy;
    result &= event->getByLabel( tPfTauAntiIsoLeadingTkPt, hPfTauAntiIsoLeadingTkPt );
    if ( hPfTauAntiIsoLeadingTkPt.isValid() ) PfTauAntiIsoLeadingTkPt = *hPfTauAntiIsoLeadingTkPt;
    result &= event->getByLabel( tPfTauAntiIsoLooseChargedIso, hPfTauAntiIsoLooseChargedIso );
    if ( hPfTauAntiIsoLooseChargedIso.isValid() ) PfTauAntiIsoLooseChargedIso = *hPfTauAntiIsoLooseChargedIso;
    result &= event->getByLabel( tPfTauAntiIsoLooseCombinedIsoDBSumPtCorr, hPfTauAntiIsoLooseCombinedIsoDBSumPtCorr );
    if ( hPfTauAntiIsoLooseCombinedIsoDBSumPtCorr.isValid() ) PfTauAntiIsoLooseCombinedIsoDBSumPtCorr = *hPfTauAntiIsoLooseCombinedIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTauAntiIsoLooseElectronRejection, hPfTauAntiIsoLooseElectronRejection );
    if ( hPfTauAntiIsoLooseElectronRejection.isValid() ) PfTauAntiIsoLooseElectronRejection = *hPfTauAntiIsoLooseElectronRejection;
    result &= event->getByLabel( tPfTauAntiIsoLooseIso, hPfTauAntiIsoLooseIso );
    if ( hPfTauAntiIsoLooseIso.isValid() ) PfTauAntiIsoLooseIso = *hPfTauAntiIsoLooseIso;
    result &= event->getByLabel( tPfTauAntiIsoLooseIsoDBSumPtCorr, hPfTauAntiIsoLooseIsoDBSumPtCorr );
    if ( hPfTauAntiIsoLooseIsoDBSumPtCorr.isValid() ) PfTauAntiIsoLooseIsoDBSumPtCorr = *hPfTauAntiIsoLooseIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTauAntiIsoLooseMuonRejection, hPfTauAntiIsoLooseMuonRejection );
    if ( hPfTauAntiIsoLooseMuonRejection.isValid() ) PfTauAntiIsoLooseMuonRejection = *hPfTauAntiIsoLooseMuonRejection;
    result &= event->getByLabel( tPfTauAntiIsoMaxLepExc, hPfTauAntiIsoMaxLepExc );
    if ( hPfTauAntiIsoMaxLepExc.isValid() ) PfTauAntiIsoMaxLepExc = *hPfTauAntiIsoMaxLepExc;
    result &= event->getByLabel( tPfTauAntiIsoMediumChargedIso, hPfTauAntiIsoMediumChargedIso );
    if ( hPfTauAntiIsoMediumChargedIso.isValid() ) PfTauAntiIsoMediumChargedIso = *hPfTauAntiIsoMediumChargedIso;
    result &= event->getByLabel( tPfTauAntiIsoMediumCombinedIsoDBSumPtCorr, hPfTauAntiIsoMediumCombinedIsoDBSumPtCorr );
    if ( hPfTauAntiIsoMediumCombinedIsoDBSumPtCorr.isValid() ) PfTauAntiIsoMediumCombinedIsoDBSumPtCorr = *hPfTauAntiIsoMediumCombinedIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTauAntiIsoMediumElectronRejection, hPfTauAntiIsoMediumElectronRejection );
    if ( hPfTauAntiIsoMediumElectronRejection.isValid() ) PfTauAntiIsoMediumElectronRejection = *hPfTauAntiIsoMediumElectronRejection;
    result &= event->getByLabel( tPfTauAntiIsoMediumIso, hPfTauAntiIsoMediumIso );
    if ( hPfTauAntiIsoMediumIso.isValid() ) PfTauAntiIsoMediumIso = *hPfTauAntiIsoMediumIso;
    result &= event->getByLabel( tPfTauAntiIsoMediumIsoDBSumPtCorr, hPfTauAntiIsoMediumIsoDBSumPtCorr );
    if ( hPfTauAntiIsoMediumIsoDBSumPtCorr.isValid() ) PfTauAntiIsoMediumIsoDBSumPtCorr = *hPfTauAntiIsoMediumIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTauAntiIsoNObjs, hPfTauAntiIsoNObjs );
    if ( hPfTauAntiIsoNObjs.isValid() ) PfTauAntiIsoNObjs = *hPfTauAntiIsoNObjs;
    result &= event->getByLabel( tPfTauAntiIsoNObjsTot, hPfTauAntiIsoNObjsTot );
    if ( hPfTauAntiIsoNObjsTot.isValid() ) PfTauAntiIsoNObjsTot = *hPfTauAntiIsoNObjsTot;
    result &= event->getByLabel( tPfTauAntiIsoNeutralHadronIso, hPfTauAntiIsoNeutralHadronIso );
    if ( hPfTauAntiIsoNeutralHadronIso.isValid() ) PfTauAntiIsoNeutralHadronIso = *hPfTauAntiIsoNeutralHadronIso;
    result &= event->getByLabel( tPfTauAntiIsoNumChargedHadronsIsoCone, hPfTauAntiIsoNumChargedHadronsIsoCone );
    if ( hPfTauAntiIsoNumChargedHadronsIsoCone.isValid() ) PfTauAntiIsoNumChargedHadronsIsoCone = *hPfTauAntiIsoNumChargedHadronsIsoCone;
    result &= event->getByLabel( tPfTauAntiIsoNumChargedHadronsSignalCone, hPfTauAntiIsoNumChargedHadronsSignalCone );
    if ( hPfTauAntiIsoNumChargedHadronsSignalCone.isValid() ) PfTauAntiIsoNumChargedHadronsSignalCone = *hPfTauAntiIsoNumChargedHadronsSignalCone;
    result &= event->getByLabel( tPfTauAntiIsoNumNeutralHadronsIsoCone, hPfTauAntiIsoNumNeutralHadronsIsoCone );
    if ( hPfTauAntiIsoNumNeutralHadronsIsoCone.isValid() ) PfTauAntiIsoNumNeutralHadronsIsoCone = *hPfTauAntiIsoNumNeutralHadronsIsoCone;
    result &= event->getByLabel( tPfTauAntiIsoNumNeutralHadronsSignalCone, hPfTauAntiIsoNumNeutralHadronsSignalCone );
    if ( hPfTauAntiIsoNumNeutralHadronsSignalCone.isValid() ) PfTauAntiIsoNumNeutralHadronsSignalCone = *hPfTauAntiIsoNumNeutralHadronsSignalCone;
    result &= event->getByLabel( tPfTauAntiIsoNumParticlesIsolationCone, hPfTauAntiIsoNumParticlesIsolationCone );
    if ( hPfTauAntiIsoNumParticlesIsolationCone.isValid() ) PfTauAntiIsoNumParticlesIsolationCone = *hPfTauAntiIsoNumParticlesIsolationCone;
    result &= event->getByLabel( tPfTauAntiIsoNumParticlesSignalCone, hPfTauAntiIsoNumParticlesSignalCone );
    if ( hPfTauAntiIsoNumParticlesSignalCone.isValid() ) PfTauAntiIsoNumParticlesSignalCone = *hPfTauAntiIsoNumParticlesSignalCone;
    result &= event->getByLabel( tPfTauAntiIsoNumPhotonsIsolationCone, hPfTauAntiIsoNumPhotonsIsolationCone );
    if ( hPfTauAntiIsoNumPhotonsIsolationCone.isValid() ) PfTauAntiIsoNumPhotonsIsolationCone = *hPfTauAntiIsoNumPhotonsIsolationCone;
    result &= event->getByLabel( tPfTauAntiIsoNumPhotonsSignalCone, hPfTauAntiIsoNumPhotonsSignalCone );
    if ( hPfTauAntiIsoNumPhotonsSignalCone.isValid() ) PfTauAntiIsoNumPhotonsSignalCone = *hPfTauAntiIsoNumPhotonsSignalCone;
    result &= event->getByLabel( tPfTauAntiIsoParticleIso, hPfTauAntiIsoParticleIso );
    if ( hPfTauAntiIsoParticleIso.isValid() ) PfTauAntiIsoParticleIso = *hPfTauAntiIsoParticleIso;
    result &= event->getByLabel( tPfTauAntiIsoPhi, hPfTauAntiIsoPhi );
    if ( hPfTauAntiIsoPhi.isValid() ) PfTauAntiIsoPhi = *hPfTauAntiIsoPhi;
    result &= event->getByLabel( tPfTauAntiIsoPhotonIso, hPfTauAntiIsoPhotonIso );
    if ( hPfTauAntiIsoPhotonIso.isValid() ) PfTauAntiIsoPhotonIso = *hPfTauAntiIsoPhotonIso;
    result &= event->getByLabel( tPfTauAntiIsoPt, hPfTauAntiIsoPt );
    if ( hPfTauAntiIsoPt.isValid() ) PfTauAntiIsoPt = *hPfTauAntiIsoPt;
    result &= event->getByLabel( tPfTauAntiIsoPtSumChargedParticlesIsoCone, hPfTauAntiIsoPtSumChargedParticlesIsoCone );
    if ( hPfTauAntiIsoPtSumChargedParticlesIsoCone.isValid() ) PfTauAntiIsoPtSumChargedParticlesIsoCone = *hPfTauAntiIsoPtSumChargedParticlesIsoCone;
    result &= event->getByLabel( tPfTauAntiIsoPtSumPhotonsIsoCone, hPfTauAntiIsoPtSumPhotonsIsoCone );
    if ( hPfTauAntiIsoPtSumPhotonsIsoCone.isValid() ) PfTauAntiIsoPtSumPhotonsIsoCone = *hPfTauAntiIsoPtSumPhotonsIsoCone;
    result &= event->getByLabel( tPfTauAntiIsoPx, hPfTauAntiIsoPx );
    if ( hPfTauAntiIsoPx.isValid() ) PfTauAntiIsoPx = *hPfTauAntiIsoPx;
    result &= event->getByLabel( tPfTauAntiIsoPy, hPfTauAntiIsoPy );
    if ( hPfTauAntiIsoPy.isValid() ) PfTauAntiIsoPy = *hPfTauAntiIsoPy;
    result &= event->getByLabel( tPfTauAntiIsoPz, hPfTauAntiIsoPz );
    if ( hPfTauAntiIsoPz.isValid() ) PfTauAntiIsoPz = *hPfTauAntiIsoPz;
    result &= event->getByLabel( tPfTauAntiIsoTightChargedIso, hPfTauAntiIsoTightChargedIso );
    if ( hPfTauAntiIsoTightChargedIso.isValid() ) PfTauAntiIsoTightChargedIso = *hPfTauAntiIsoTightChargedIso;
    result &= event->getByLabel( tPfTauAntiIsoTightCombinedIsoDBSumPtCorr, hPfTauAntiIsoTightCombinedIsoDBSumPtCorr );
    if ( hPfTauAntiIsoTightCombinedIsoDBSumPtCorr.isValid() ) PfTauAntiIsoTightCombinedIsoDBSumPtCorr = *hPfTauAntiIsoTightCombinedIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTauAntiIsoTightElectronRejection, hPfTauAntiIsoTightElectronRejection );
    if ( hPfTauAntiIsoTightElectronRejection.isValid() ) PfTauAntiIsoTightElectronRejection = *hPfTauAntiIsoTightElectronRejection;
    result &= event->getByLabel( tPfTauAntiIsoTightIso, hPfTauAntiIsoTightIso );
    if ( hPfTauAntiIsoTightIso.isValid() ) PfTauAntiIsoTightIso = *hPfTauAntiIsoTightIso;
    result &= event->getByLabel( tPfTauAntiIsoTightIsoDBSumPtCorr, hPfTauAntiIsoTightIsoDBSumPtCorr );
    if ( hPfTauAntiIsoTightIsoDBSumPtCorr.isValid() ) PfTauAntiIsoTightIsoDBSumPtCorr = *hPfTauAntiIsoTightIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTauAntiIsoTightMuonRejection, hPfTauAntiIsoTightMuonRejection );
    if ( hPfTauAntiIsoTightMuonRejection.isValid() ) PfTauAntiIsoTightMuonRejection = *hPfTauAntiIsoTightMuonRejection;
    result &= event->getByLabel( tPfTauAntiIsoVLooseChargedIso, hPfTauAntiIsoVLooseChargedIso );
    if ( hPfTauAntiIsoVLooseChargedIso.isValid() ) PfTauAntiIsoVLooseChargedIso = *hPfTauAntiIsoVLooseChargedIso;
    result &= event->getByLabel( tPfTauAntiIsoVLooseCombinedIsoDBSumPtCorr, hPfTauAntiIsoVLooseCombinedIsoDBSumPtCorr );
    if ( hPfTauAntiIsoVLooseCombinedIsoDBSumPtCorr.isValid() ) PfTauAntiIsoVLooseCombinedIsoDBSumPtCorr = *hPfTauAntiIsoVLooseCombinedIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTauAntiIsoVLooseIso, hPfTauAntiIsoVLooseIso );
    if ( hPfTauAntiIsoVLooseIso.isValid() ) PfTauAntiIsoVLooseIso = *hPfTauAntiIsoVLooseIso;
    result &= event->getByLabel( tPfTauAntiIsoVLooseIsoDBSumPtCorr, hPfTauAntiIsoVLooseIsoDBSumPtCorr );
    if ( hPfTauAntiIsoVLooseIsoDBSumPtCorr.isValid() ) PfTauAntiIsoVLooseIsoDBSumPtCorr = *hPfTauAntiIsoVLooseIsoDBSumPtCorr;
    result &= event->getByLabel( tPfTauAntiIsoVz, hPfTauAntiIsoVz );
    if ( hPfTauAntiIsoVz.isValid() ) PfTauAntiIsoVz = *hPfTauAntiIsoVz;
    result &= event->getByLabel( tPhoCaloPositionX, hPhoCaloPositionX );
    if ( hPhoCaloPositionX.isValid() ) PhoCaloPositionX = *hPhoCaloPositionX;
    result &= event->getByLabel( tPhoCaloPositionY, hPhoCaloPositionY );
    if ( hPhoCaloPositionY.isValid() ) PhoCaloPositionY = *hPhoCaloPositionY;
    result &= event->getByLabel( tPhoCaloPositionZ, hPhoCaloPositionZ );
    if ( hPhoCaloPositionZ.isValid() ) PhoCaloPositionZ = *hPhoCaloPositionZ;
    result &= event->getByLabel( tPhoChargedHadronIso, hPhoChargedHadronIso );
    if ( hPhoChargedHadronIso.isValid() ) PhoChargedHadronIso = *hPhoChargedHadronIso;
    result &= event->getByLabel( tPhoCone01ChargedHadronIsodR015dEta0pt0PFnoPU, hPhoCone01ChargedHadronIsodR015dEta0pt0PFnoPU );
    if ( hPhoCone01ChargedHadronIsodR015dEta0pt0PFnoPU.isValid() ) PhoCone01ChargedHadronIsodR015dEta0pt0PFnoPU = *hPhoCone01ChargedHadronIsodR015dEta0pt0PFnoPU;
    result &= event->getByLabel( tPhoCone01ChargedHadronIsodR015dEta0pt0dz0, hPhoCone01ChargedHadronIsodR015dEta0pt0dz0 );
    if ( hPhoCone01ChargedHadronIsodR015dEta0pt0dz0.isValid() ) PhoCone01ChargedHadronIsodR015dEta0pt0dz0 = *hPhoCone01ChargedHadronIsodR015dEta0pt0dz0;
    result &= event->getByLabel( tPhoCone01ChargedHadronIsodR015dEta0pt0dz1dxy01, hPhoCone01ChargedHadronIsodR015dEta0pt0dz1dxy01 );
    if ( hPhoCone01ChargedHadronIsodR015dEta0pt0dz1dxy01.isValid() ) PhoCone01ChargedHadronIsodR015dEta0pt0dz1dxy01 = *hPhoCone01ChargedHadronIsodR015dEta0pt0dz1dxy01;
    result &= event->getByLabel( tPhoCone01ChargedHadronIsodR0dEta0pt0PFnoPU, hPhoCone01ChargedHadronIsodR0dEta0pt0PFnoPU );
    if ( hPhoCone01ChargedHadronIsodR0dEta0pt0PFnoPU.isValid() ) PhoCone01ChargedHadronIsodR0dEta0pt0PFnoPU = *hPhoCone01ChargedHadronIsodR0dEta0pt0PFnoPU;
    result &= event->getByLabel( tPhoCone01ChargedHadronIsodR0dEta0pt0dz0, hPhoCone01ChargedHadronIsodR0dEta0pt0dz0 );
    if ( hPhoCone01ChargedHadronIsodR0dEta0pt0dz0.isValid() ) PhoCone01ChargedHadronIsodR0dEta0pt0dz0 = *hPhoCone01ChargedHadronIsodR0dEta0pt0dz0;
    result &= event->getByLabel( tPhoCone01ChargedHadronIsodR0dEta0pt0dz1dxy01, hPhoCone01ChargedHadronIsodR0dEta0pt0dz1dxy01 );
    if ( hPhoCone01ChargedHadronIsodR0dEta0pt0dz1dxy01.isValid() ) PhoCone01ChargedHadronIsodR0dEta0pt0dz1dxy01 = *hPhoCone01ChargedHadronIsodR0dEta0pt0dz1dxy01;
    result &= event->getByLabel( tPhoCone01NeutralHadronIsodR0dEta0pt0mvVtx, hPhoCone01NeutralHadronIsodR0dEta0pt0mvVtx );
    if ( hPhoCone01NeutralHadronIsodR0dEta0pt0mvVtx.isValid() ) PhoCone01NeutralHadronIsodR0dEta0pt0mvVtx = *hPhoCone01NeutralHadronIsodR0dEta0pt0mvVtx;
    result &= event->getByLabel( tPhoCone01PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx, hPhoCone01PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx );
    if ( hPhoCone01PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx.isValid() ) PhoCone01PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx = *hPhoCone01PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx;
    result &= event->getByLabel( tPhoCone02ChargedHadronIsodR015dEta0pt0PFnoPU, hPhoCone02ChargedHadronIsodR015dEta0pt0PFnoPU );
    if ( hPhoCone02ChargedHadronIsodR015dEta0pt0PFnoPU.isValid() ) PhoCone02ChargedHadronIsodR015dEta0pt0PFnoPU = *hPhoCone02ChargedHadronIsodR015dEta0pt0PFnoPU;
    result &= event->getByLabel( tPhoCone02ChargedHadronIsodR015dEta0pt0dz0, hPhoCone02ChargedHadronIsodR015dEta0pt0dz0 );
    if ( hPhoCone02ChargedHadronIsodR015dEta0pt0dz0.isValid() ) PhoCone02ChargedHadronIsodR015dEta0pt0dz0 = *hPhoCone02ChargedHadronIsodR015dEta0pt0dz0;
    result &= event->getByLabel( tPhoCone02ChargedHadronIsodR015dEta0pt0dz1dxy01, hPhoCone02ChargedHadronIsodR015dEta0pt0dz1dxy01 );
    if ( hPhoCone02ChargedHadronIsodR015dEta0pt0dz1dxy01.isValid() ) PhoCone02ChargedHadronIsodR015dEta0pt0dz1dxy01 = *hPhoCone02ChargedHadronIsodR015dEta0pt0dz1dxy01;
    result &= event->getByLabel( tPhoCone02ChargedHadronIsodR0dEta0pt0PFnoPU, hPhoCone02ChargedHadronIsodR0dEta0pt0PFnoPU );
    if ( hPhoCone02ChargedHadronIsodR0dEta0pt0PFnoPU.isValid() ) PhoCone02ChargedHadronIsodR0dEta0pt0PFnoPU = *hPhoCone02ChargedHadronIsodR0dEta0pt0PFnoPU;
    result &= event->getByLabel( tPhoCone02ChargedHadronIsodR0dEta0pt0dz0, hPhoCone02ChargedHadronIsodR0dEta0pt0dz0 );
    if ( hPhoCone02ChargedHadronIsodR0dEta0pt0dz0.isValid() ) PhoCone02ChargedHadronIsodR0dEta0pt0dz0 = *hPhoCone02ChargedHadronIsodR0dEta0pt0dz0;
    result &= event->getByLabel( tPhoCone02ChargedHadronIsodR0dEta0pt0dz1dxy01, hPhoCone02ChargedHadronIsodR0dEta0pt0dz1dxy01 );
    if ( hPhoCone02ChargedHadronIsodR0dEta0pt0dz1dxy01.isValid() ) PhoCone02ChargedHadronIsodR0dEta0pt0dz1dxy01 = *hPhoCone02ChargedHadronIsodR0dEta0pt0dz1dxy01;
    result &= event->getByLabel( tPhoCone02NeutralHadronIsodR0dEta0pt0mvVtx, hPhoCone02NeutralHadronIsodR0dEta0pt0mvVtx );
    if ( hPhoCone02NeutralHadronIsodR0dEta0pt0mvVtx.isValid() ) PhoCone02NeutralHadronIsodR0dEta0pt0mvVtx = *hPhoCone02NeutralHadronIsodR0dEta0pt0mvVtx;
    result &= event->getByLabel( tPhoCone02PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx, hPhoCone02PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx );
    if ( hPhoCone02PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx.isValid() ) PhoCone02PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx = *hPhoCone02PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx;
    result &= event->getByLabel( tPhoCone03ChargedHadronIsodR015dEta0pt0PFnoPU, hPhoCone03ChargedHadronIsodR015dEta0pt0PFnoPU );
    if ( hPhoCone03ChargedHadronIsodR015dEta0pt0PFnoPU.isValid() ) PhoCone03ChargedHadronIsodR015dEta0pt0PFnoPU = *hPhoCone03ChargedHadronIsodR015dEta0pt0PFnoPU;
    result &= event->getByLabel( tPhoCone03ChargedHadronIsodR015dEta0pt0dz0, hPhoCone03ChargedHadronIsodR015dEta0pt0dz0 );
    if ( hPhoCone03ChargedHadronIsodR015dEta0pt0dz0.isValid() ) PhoCone03ChargedHadronIsodR015dEta0pt0dz0 = *hPhoCone03ChargedHadronIsodR015dEta0pt0dz0;
    result &= event->getByLabel( tPhoCone03ChargedHadronIsodR015dEta0pt0dz1dxy01, hPhoCone03ChargedHadronIsodR015dEta0pt0dz1dxy01 );
    if ( hPhoCone03ChargedHadronIsodR015dEta0pt0dz1dxy01.isValid() ) PhoCone03ChargedHadronIsodR015dEta0pt0dz1dxy01 = *hPhoCone03ChargedHadronIsodR015dEta0pt0dz1dxy01;
    result &= event->getByLabel( tPhoCone03ChargedHadronIsodR0dEta0pt0PFnoPU, hPhoCone03ChargedHadronIsodR0dEta0pt0PFnoPU );
    if ( hPhoCone03ChargedHadronIsodR0dEta0pt0PFnoPU.isValid() ) PhoCone03ChargedHadronIsodR0dEta0pt0PFnoPU = *hPhoCone03ChargedHadronIsodR0dEta0pt0PFnoPU;
    result &= event->getByLabel( tPhoCone03ChargedHadronIsodR0dEta0pt0dz0, hPhoCone03ChargedHadronIsodR0dEta0pt0dz0 );
    if ( hPhoCone03ChargedHadronIsodR0dEta0pt0dz0.isValid() ) PhoCone03ChargedHadronIsodR0dEta0pt0dz0 = *hPhoCone03ChargedHadronIsodR0dEta0pt0dz0;
    result &= event->getByLabel( tPhoCone03ChargedHadronIsodR0dEta0pt0dz1dxy01, hPhoCone03ChargedHadronIsodR0dEta0pt0dz1dxy01 );
    if ( hPhoCone03ChargedHadronIsodR0dEta0pt0dz1dxy01.isValid() ) PhoCone03ChargedHadronIsodR0dEta0pt0dz1dxy01 = *hPhoCone03ChargedHadronIsodR0dEta0pt0dz1dxy01;
    result &= event->getByLabel( tPhoCone03NeutralHadronIsodR0dEta0pt0mvVtx, hPhoCone03NeutralHadronIsodR0dEta0pt0mvVtx );
    if ( hPhoCone03NeutralHadronIsodR0dEta0pt0mvVtx.isValid() ) PhoCone03NeutralHadronIsodR0dEta0pt0mvVtx = *hPhoCone03NeutralHadronIsodR0dEta0pt0mvVtx;
    result &= event->getByLabel( tPhoCone03PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx, hPhoCone03PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx );
    if ( hPhoCone03PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx.isValid() ) PhoCone03PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx = *hPhoCone03PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPU, hPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPU );
    if ( hPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPU.isValid() ) PhoCone04ChargedHadronIsodR015dEta0pt0PFnoPU = *hPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPU;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPUold, hPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPUold );
    if ( hPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPUold.isValid() ) PhoCone04ChargedHadronIsodR015dEta0pt0PFnoPUold = *hPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPUold;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR015dEta0pt0dz0, hPhoCone04ChargedHadronIsodR015dEta0pt0dz0 );
    if ( hPhoCone04ChargedHadronIsodR015dEta0pt0dz0.isValid() ) PhoCone04ChargedHadronIsodR015dEta0pt0dz0 = *hPhoCone04ChargedHadronIsodR015dEta0pt0dz0;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR015dEta0pt0dz0old, hPhoCone04ChargedHadronIsodR015dEta0pt0dz0old );
    if ( hPhoCone04ChargedHadronIsodR015dEta0pt0dz0old.isValid() ) PhoCone04ChargedHadronIsodR015dEta0pt0dz0old = *hPhoCone04ChargedHadronIsodR015dEta0pt0dz0old;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR015dEta0pt0dz1dxy01, hPhoCone04ChargedHadronIsodR015dEta0pt0dz1dxy01 );
    if ( hPhoCone04ChargedHadronIsodR015dEta0pt0dz1dxy01.isValid() ) PhoCone04ChargedHadronIsodR015dEta0pt0dz1dxy01 = *hPhoCone04ChargedHadronIsodR015dEta0pt0dz1dxy01;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPU, hPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPU );
    if ( hPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPU.isValid() ) PhoCone04ChargedHadronIsodR0dEta0pt0PFnoPU = *hPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPU;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPUold, hPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPUold );
    if ( hPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPUold.isValid() ) PhoCone04ChargedHadronIsodR0dEta0pt0PFnoPUold = *hPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPUold;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR0dEta0pt0dz0, hPhoCone04ChargedHadronIsodR0dEta0pt0dz0 );
    if ( hPhoCone04ChargedHadronIsodR0dEta0pt0dz0.isValid() ) PhoCone04ChargedHadronIsodR0dEta0pt0dz0 = *hPhoCone04ChargedHadronIsodR0dEta0pt0dz0;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR0dEta0pt0dz0old, hPhoCone04ChargedHadronIsodR0dEta0pt0dz0old );
    if ( hPhoCone04ChargedHadronIsodR0dEta0pt0dz0old.isValid() ) PhoCone04ChargedHadronIsodR0dEta0pt0dz0old = *hPhoCone04ChargedHadronIsodR0dEta0pt0dz0old;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR0dEta0pt0dz1dxy01, hPhoCone04ChargedHadronIsodR0dEta0pt0dz1dxy01 );
    if ( hPhoCone04ChargedHadronIsodR0dEta0pt0dz1dxy01.isValid() ) PhoCone04ChargedHadronIsodR0dEta0pt0dz1dxy01 = *hPhoCone04ChargedHadronIsodR0dEta0pt0dz1dxy01;
    result &= event->getByLabel( tPhoCone04NeutralHadronIsodR0dEta0pt0, hPhoCone04NeutralHadronIsodR0dEta0pt0 );
    if ( hPhoCone04NeutralHadronIsodR0dEta0pt0.isValid() ) PhoCone04NeutralHadronIsodR0dEta0pt0 = *hPhoCone04NeutralHadronIsodR0dEta0pt0;
    result &= event->getByLabel( tPhoCone04NeutralHadronIsodR0dEta0pt0mvVtx, hPhoCone04NeutralHadronIsodR0dEta0pt0mvVtx );
    if ( hPhoCone04NeutralHadronIsodR0dEta0pt0mvVtx.isValid() ) PhoCone04NeutralHadronIsodR0dEta0pt0mvVtx = *hPhoCone04NeutralHadronIsodR0dEta0pt0mvVtx;
    result &= event->getByLabel( tPhoCone04NeutralHadronIsodR0dEta0pt0nocracks, hPhoCone04NeutralHadronIsodR0dEta0pt0nocracks );
    if ( hPhoCone04NeutralHadronIsodR0dEta0pt0nocracks.isValid() ) PhoCone04NeutralHadronIsodR0dEta0pt0nocracks = *hPhoCone04NeutralHadronIsodR0dEta0pt0nocracks;
    result &= event->getByLabel( tPhoCone04NeutralHadronIsodR0dEta0pt5, hPhoCone04NeutralHadronIsodR0dEta0pt5 );
    if ( hPhoCone04NeutralHadronIsodR0dEta0pt5.isValid() ) PhoCone04NeutralHadronIsodR0dEta0pt5 = *hPhoCone04NeutralHadronIsodR0dEta0pt5;
    result &= event->getByLabel( tPhoCone04NeutralHadronIsodR0dEta0pt5nocracks, hPhoCone04NeutralHadronIsodR0dEta0pt5nocracks );
    if ( hPhoCone04NeutralHadronIsodR0dEta0pt5nocracks.isValid() ) PhoCone04NeutralHadronIsodR0dEta0pt5nocracks = *hPhoCone04NeutralHadronIsodR0dEta0pt5nocracks;
    result &= event->getByLabel( tPhoCone04NeutralHadronIsodR7dEta0pt0, hPhoCone04NeutralHadronIsodR7dEta0pt0 );
    if ( hPhoCone04NeutralHadronIsodR7dEta0pt0.isValid() ) PhoCone04NeutralHadronIsodR7dEta0pt0 = *hPhoCone04NeutralHadronIsodR7dEta0pt0;
    result &= event->getByLabel( tPhoCone04NeutralHadronIsodR7dEta0pt5, hPhoCone04NeutralHadronIsodR7dEta0pt5 );
    if ( hPhoCone04NeutralHadronIsodR7dEta0pt5.isValid() ) PhoCone04NeutralHadronIsodR7dEta0pt5 = *hPhoCone04NeutralHadronIsodR7dEta0pt5;
    result &= event->getByLabel( tPhoCone04PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx, hPhoCone04PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx );
    if ( hPhoCone04PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx.isValid() ) PhoCone04PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx = *hPhoCone04PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx;
    result &= event->getByLabel( tPhoCone04PhotonIsodR0dEta0pt0, hPhoCone04PhotonIsodR0dEta0pt0 );
    if ( hPhoCone04PhotonIsodR0dEta0pt0.isValid() ) PhoCone04PhotonIsodR0dEta0pt0 = *hPhoCone04PhotonIsodR0dEta0pt0;
    result &= event->getByLabel( tPhoCone04PhotonIsodR0dEta0pt5, hPhoCone04PhotonIsodR0dEta0pt5 );
    if ( hPhoCone04PhotonIsodR0dEta0pt5.isValid() ) PhoCone04PhotonIsodR0dEta0pt5 = *hPhoCone04PhotonIsodR0dEta0pt5;
    result &= event->getByLabel( tPhoCone04PhotonIsodR8dEta0pt0, hPhoCone04PhotonIsodR8dEta0pt0 );
    if ( hPhoCone04PhotonIsodR8dEta0pt0.isValid() ) PhoCone04PhotonIsodR8dEta0pt0 = *hPhoCone04PhotonIsodR8dEta0pt0;
    result &= event->getByLabel( tPhoCone04PhotonIsodR8dEta0pt5, hPhoCone04PhotonIsodR8dEta0pt5 );
    if ( hPhoCone04PhotonIsodR8dEta0pt5.isValid() ) PhoCone04PhotonIsodR8dEta0pt5 = *hPhoCone04PhotonIsodR8dEta0pt5;
    result &= event->getByLabel( tPhoConvChi2Probability, hPhoConvChi2Probability );
    if ( hPhoConvChi2Probability.isValid() ) PhoConvChi2Probability = *hPhoConvChi2Probability;
    result &= event->getByLabel( tPhoConvEoverP, hPhoConvEoverP );
    if ( hPhoConvEoverP.isValid() ) PhoConvEoverP = *hPhoConvEoverP;
    result &= event->getByLabel( tPhoConvNtracks, hPhoConvNtracks );
    if ( hPhoConvNtracks.isValid() ) PhoConvNtracks = *hPhoConvNtracks;
    result &= event->getByLabel( tPhoConvValidVtx, hPhoConvValidVtx );
    if ( hPhoConvValidVtx.isValid() ) PhoConvValidVtx = *hPhoConvValidVtx;
    result &= event->getByLabel( tPhoE1OverE9, hPhoE1OverE9 );
    if ( hPhoE1OverE9.isValid() ) PhoE1OverE9 = *hPhoE1OverE9;
    result &= event->getByLabel( tPhoE1x5, hPhoE1x5 );
    if ( hPhoE1x5.isValid() ) PhoE1x5 = *hPhoE1x5;
    result &= event->getByLabel( tPhoE2x5, hPhoE2x5 );
    if ( hPhoE2x5.isValid() ) PhoE2x5 = *hPhoE2x5;
    result &= event->getByLabel( tPhoE3x3, hPhoE3x3 );
    if ( hPhoE3x3.isValid() ) PhoE3x3 = *hPhoE3x3;
    result &= event->getByLabel( tPhoE5x5, hPhoE5x5 );
    if ( hPhoE5x5.isValid() ) PhoE5x5 = *hPhoE5x5;
    result &= event->getByLabel( tPhoEnergy, hPhoEnergy );
    if ( hPhoEnergy.isValid() ) PhoEnergy = *hPhoEnergy;
    result &= event->getByLabel( tPhoEta, hPhoEta );
    if ( hPhoEta.isValid() ) PhoEta = *hPhoEta;
    result &= event->getByLabel( tPhoGood, hPhoGood );
    if ( hPhoGood.isValid() ) PhoGood = *hPhoGood;
    result &= event->getByLabel( tPhoH1overE, hPhoH1overE );
    if ( hPhoH1overE.isValid() ) PhoH1overE = *hPhoH1overE;
    result &= event->getByLabel( tPhoH2overE, hPhoH2overE );
    if ( hPhoH2overE.isValid() ) PhoH2overE = *hPhoH2overE;
    result &= event->getByLabel( tPhoHasConvTrks, hPhoHasConvTrks );
    if ( hPhoHasConvTrks.isValid() ) PhoHasConvTrks = *hPhoHasConvTrks;
    result &= event->getByLabel( tPhoHasPixSeed, hPhoHasPixSeed );
    if ( hPhoHasPixSeed.isValid() ) PhoHasPixSeed = *hPhoHasPixSeed;
    result &= event->getByLabel( tPhoHoverE, hPhoHoverE );
    if ( hPhoHoverE.isValid() ) PhoHoverE = *hPhoHoverE;
    result &= event->getByLabel( tPhoIsIso, hPhoIsIso );
    if ( hPhoIsIso.isValid() ) PhoIsIso = *hPhoIsIso;
    result &= event->getByLabel( tPhoIso03, hPhoIso03 );
    if ( hPhoIso03.isValid() ) PhoIso03 = *hPhoIso03;
    result &= event->getByLabel( tPhoIso03Ecal, hPhoIso03Ecal );
    if ( hPhoIso03Ecal.isValid() ) PhoIso03Ecal = *hPhoIso03Ecal;
    result &= event->getByLabel( tPhoIso03Hcal, hPhoIso03Hcal );
    if ( hPhoIso03Hcal.isValid() ) PhoIso03Hcal = *hPhoIso03Hcal;
    result &= event->getByLabel( tPhoIso03HcalDepth1, hPhoIso03HcalDepth1 );
    if ( hPhoIso03HcalDepth1.isValid() ) PhoIso03HcalDepth1 = *hPhoIso03HcalDepth1;
    result &= event->getByLabel( tPhoIso03HcalDepth2, hPhoIso03HcalDepth2 );
    if ( hPhoIso03HcalDepth2.isValid() ) PhoIso03HcalDepth2 = *hPhoIso03HcalDepth2;
    result &= event->getByLabel( tPhoIso03TrkHollow, hPhoIso03TrkHollow );
    if ( hPhoIso03TrkHollow.isValid() ) PhoIso03TrkHollow = *hPhoIso03TrkHollow;
    result &= event->getByLabel( tPhoIso03TrkSolid, hPhoIso03TrkSolid );
    if ( hPhoIso03TrkSolid.isValid() ) PhoIso03TrkSolid = *hPhoIso03TrkSolid;
    result &= event->getByLabel( tPhoIso03nTrksHollow, hPhoIso03nTrksHollow );
    if ( hPhoIso03nTrksHollow.isValid() ) PhoIso03nTrksHollow = *hPhoIso03nTrksHollow;
    result &= event->getByLabel( tPhoIso03nTrksSolid, hPhoIso03nTrksSolid );
    if ( hPhoIso03nTrksSolid.isValid() ) PhoIso03nTrksSolid = *hPhoIso03nTrksSolid;
    result &= event->getByLabel( tPhoIso04, hPhoIso04 );
    if ( hPhoIso04.isValid() ) PhoIso04 = *hPhoIso04;
    result &= event->getByLabel( tPhoIso04Ecal, hPhoIso04Ecal );
    if ( hPhoIso04Ecal.isValid() ) PhoIso04Ecal = *hPhoIso04Ecal;
    result &= event->getByLabel( tPhoIso04Hcal, hPhoIso04Hcal );
    if ( hPhoIso04Hcal.isValid() ) PhoIso04Hcal = *hPhoIso04Hcal;
    result &= event->getByLabel( tPhoIso04HcalDepth1, hPhoIso04HcalDepth1 );
    if ( hPhoIso04HcalDepth1.isValid() ) PhoIso04HcalDepth1 = *hPhoIso04HcalDepth1;
    result &= event->getByLabel( tPhoIso04HcalDepth2, hPhoIso04HcalDepth2 );
    if ( hPhoIso04HcalDepth2.isValid() ) PhoIso04HcalDepth2 = *hPhoIso04HcalDepth2;
    result &= event->getByLabel( tPhoIso04TrkHollow, hPhoIso04TrkHollow );
    if ( hPhoIso04TrkHollow.isValid() ) PhoIso04TrkHollow = *hPhoIso04TrkHollow;
    result &= event->getByLabel( tPhoIso04TrkSolid, hPhoIso04TrkSolid );
    if ( hPhoIso04TrkSolid.isValid() ) PhoIso04TrkSolid = *hPhoIso04TrkSolid;
    result &= event->getByLabel( tPhoIso04nTrksHollow, hPhoIso04nTrksHollow );
    if ( hPhoIso04nTrksHollow.isValid() ) PhoIso04nTrksHollow = *hPhoIso04nTrksHollow;
    result &= event->getByLabel( tPhoIso04nTrksSolid, hPhoIso04nTrksSolid );
    if ( hPhoIso04nTrksSolid.isValid() ) PhoIso04nTrksSolid = *hPhoIso04nTrksSolid;
    result &= event->getByLabel( tPhoMCmatchexitcode, hPhoMCmatchexitcode );
    if ( hPhoMCmatchexitcode.isValid() ) PhoMCmatchexitcode = *hPhoMCmatchexitcode;
    result &= event->getByLabel( tPhoMCmatchindex, hPhoMCmatchindex );
    if ( hPhoMCmatchindex.isValid() ) PhoMCmatchindex = *hPhoMCmatchindex;
    result &= event->getByLabel( tPhoNeutralHadronIso, hPhoNeutralHadronIso );
    if ( hPhoNeutralHadronIso.isValid() ) PhoNeutralHadronIso = *hPhoNeutralHadronIso;
    result &= event->getByLabel( tPhoPhi, hPhoPhi );
    if ( hPhoPhi.isValid() ) PhoPhi = *hPhoPhi;
    result &= event->getByLabel( tPhoPhotonIso, hPhoPhotonIso );
    if ( hPhoPhotonIso.isValid() ) PhoPhotonIso = *hPhoPhotonIso;
    result &= event->getByLabel( tPhoPt, hPhoPt );
    if ( hPhoPt.isValid() ) PhoPt = *hPhoPt;
    result &= event->getByLabel( tPhoPx, hPhoPx );
    if ( hPhoPx.isValid() ) PhoPx = *hPhoPx;
    result &= event->getByLabel( tPhoPy, hPhoPy );
    if ( hPhoPy.isValid() ) PhoPy = *hPhoPy;
    result &= event->getByLabel( tPhoPz, hPhoPz );
    if ( hPhoPz.isValid() ) PhoPz = *hPhoPz;
    result &= event->getByLabel( tPhoR9, hPhoR9 );
    if ( hPhoR9.isValid() ) PhoR9 = *hPhoR9;
    result &= event->getByLabel( tPhoS4OverS1, hPhoS4OverS1 );
    if ( hPhoS4OverS1.isValid() ) PhoS4OverS1 = *hPhoS4OverS1;
    result &= event->getByLabel( tPhoSCEtaWidth, hPhoSCEtaWidth );
    if ( hPhoSCEtaWidth.isValid() ) PhoSCEtaWidth = *hPhoSCEtaWidth;
    result &= event->getByLabel( tPhoSCRawEnergy, hPhoSCRawEnergy );
    if ( hPhoSCRawEnergy.isValid() ) PhoSCRawEnergy = *hPhoSCRawEnergy;
    result &= event->getByLabel( tPhoSCSigmaPhiPhi, hPhoSCSigmaPhiPhi );
    if ( hPhoSCSigmaPhiPhi.isValid() ) PhoSCSigmaPhiPhi = *hPhoSCSigmaPhiPhi;
    result &= event->getByLabel( tPhoScSeedSeverity, hPhoScSeedSeverity );
    if ( hPhoScSeedSeverity.isValid() ) PhoScSeedSeverity = *hPhoScSeedSeverity;
    result &= event->getByLabel( tPhoSigmaEtaEta, hPhoSigmaEtaEta );
    if ( hPhoSigmaEtaEta.isValid() ) PhoSigmaEtaEta = *hPhoSigmaEtaEta;
    result &= event->getByLabel( tPhoSigmaIetaIeta, hPhoSigmaIetaIeta );
    if ( hPhoSigmaIetaIeta.isValid() ) PhoSigmaIetaIeta = *hPhoSigmaIetaIeta;
    result &= event->getByLabel( tPhoisEB, hPhoisEB );
    if ( hPhoisEB.isValid() ) PhoisEB = *hPhoisEB;
    result &= event->getByLabel( tPhoisEBEEGap, hPhoisEBEEGap );
    if ( hPhoisEBEEGap.isValid() ) PhoisEBEEGap = *hPhoisEBEEGap;
    result &= event->getByLabel( tPhoisEBEtaGap, hPhoisEBEtaGap );
    if ( hPhoisEBEtaGap.isValid() ) PhoisEBEtaGap = *hPhoisEBEtaGap;
    result &= event->getByLabel( tPhoisEBPhiGap, hPhoisEBPhiGap );
    if ( hPhoisEBPhiGap.isValid() ) PhoisEBPhiGap = *hPhoisEBPhiGap;
    result &= event->getByLabel( tPhoisEE, hPhoisEE );
    if ( hPhoisEE.isValid() ) PhoisEE = *hPhoisEE;
    result &= event->getByLabel( tPhoisEEDeeGap, hPhoisEEDeeGap );
    if ( hPhoisEEDeeGap.isValid() ) PhoisEEDeeGap = *hPhoisEEDeeGap;
    result &= event->getByLabel( tPhoisEERingGap, hPhoisEERingGap );
    if ( hPhoisEERingGap.isValid() ) PhoisEERingGap = *hPhoisEERingGap;
    result &= event->getByLabel( tPhoisPFElectron, hPhoisPFElectron );
    if ( hPhoisPFElectron.isValid() ) PhoisPFElectron = *hPhoisPFElectron;
    result &= event->getByLabel( tPhoisPFPhoton, hPhoisPFPhoton );
    if ( hPhoisPFPhoton.isValid() ) PhoisPFPhoton = *hPhoisPFPhoton;
    result &= event->getByLabel( tPhoisPFlowPhoton, hPhoisPFlowPhoton );
    if ( hPhoisPFlowPhoton.isValid() ) PhoisPFlowPhoton = *hPhoisPFlowPhoton;
    result &= event->getByLabel( tPhoisStandardPhoton, hPhoisStandardPhoton );
    if ( hPhoisStandardPhoton.isValid() ) PhoisStandardPhoton = *hPhoisStandardPhoton;
    result &= event->getByLabel( tPhomaxEnergyXtal, hPhomaxEnergyXtal );
    if ( hPhomaxEnergyXtal.isValid() ) PhomaxEnergyXtal = *hPhomaxEnergyXtal;
    result &= event->getByLabel( tPhotSCindex, hPhotSCindex );
    if ( hPhotSCindex.isValid() ) PhotSCindex = *hPhotSCindex;
    result &= event->getByLabel( tPrimVtxGood, hPrimVtxGood );
    if ( hPrimVtxGood.isValid() ) PrimVtxGood = *hPrimVtxGood;
    result &= event->getByLabel( tPrimVtxIsFake, hPrimVtxIsFake );
    if ( hPrimVtxIsFake.isValid() ) PrimVtxIsFake = *hPrimVtxIsFake;
    result &= event->getByLabel( tPrimVtxNChi2, hPrimVtxNChi2 );
    if ( hPrimVtxNChi2.isValid() ) PrimVtxNChi2 = *hPrimVtxNChi2;
    result &= event->getByLabel( tPrimVtxNdof, hPrimVtxNdof );
    if ( hPrimVtxNdof.isValid() ) PrimVtxNdof = *hPrimVtxNdof;
    result &= event->getByLabel( tPrimVtxPtSum, hPrimVtxPtSum );
    if ( hPrimVtxPtSum.isValid() ) PrimVtxPtSum = *hPrimVtxPtSum;
    result &= event->getByLabel( tPrimVtxRho, hPrimVtxRho );
    if ( hPrimVtxRho.isValid() ) PrimVtxRho = *hPrimVtxRho;
    result &= event->getByLabel( tPrimVtxx, hPrimVtxx );
    if ( hPrimVtxx.isValid() ) PrimVtxx = *hPrimVtxx;
    result &= event->getByLabel( tPrimVtxxE, hPrimVtxxE );
    if ( hPrimVtxxE.isValid() ) PrimVtxxE = *hPrimVtxxE;
    result &= event->getByLabel( tPrimVtxy, hPrimVtxy );
    if ( hPrimVtxy.isValid() ) PrimVtxy = *hPrimVtxy;
    result &= event->getByLabel( tPrimVtxyE, hPrimVtxyE );
    if ( hPrimVtxyE.isValid() ) PrimVtxyE = *hPrimVtxyE;
    result &= event->getByLabel( tPrimVtxz, hPrimVtxz );
    if ( hPrimVtxz.isValid() ) PrimVtxz = *hPrimVtxz;
    result &= event->getByLabel( tPrimVtxzE, hPrimVtxzE );
    if ( hPrimVtxzE.isValid() ) PrimVtxzE = *hPrimVtxzE;
    result &= event->getByLabel( tPromptnessLevel, hPromptnessLevel );
    if ( hPromptnessLevel.isValid() ) PromptnessLevel = *hPromptnessLevel;
    result &= event->getByLabel( tPtHat, hPtHat );
    if ( hPtHat.isValid() ) PtHat = *hPtHat;
    result &= event->getByLabel( tQCDPartonicHT, hQCDPartonicHT );
    if ( hQCDPartonicHT.isValid() ) QCDPartonicHT = *hQCDPartonicHT;
    result &= event->getByLabel( tRA2TrackingFailureFilterFlag, hRA2TrackingFailureFilterFlag );
    if ( hRA2TrackingFailureFilterFlag.isValid() ) RA2TrackingFailureFilterFlag = *hRA2TrackingFailureFilterFlag;
    result &= event->getByLabel( tRawMET, hRawMET );
    if ( hRawMET.isValid() ) RawMET = *hRawMET;
    result &= event->getByLabel( tRawMETSignificance, hRawMETSignificance );
    if ( hRawMETSignificance.isValid() ) RawMETSignificance = *hRawMETSignificance;
    result &= event->getByLabel( tRawMETemEtFrac, hRawMETemEtFrac );
    if ( hRawMETemEtFrac.isValid() ) RawMETemEtFrac = *hRawMETemEtFrac;
    result &= event->getByLabel( tRawMETemEtInEB, hRawMETemEtInEB );
    if ( hRawMETemEtInEB.isValid() ) RawMETemEtInEB = *hRawMETemEtInEB;
    result &= event->getByLabel( tRawMETemEtInEE, hRawMETemEtInEE );
    if ( hRawMETemEtInEE.isValid() ) RawMETemEtInEE = *hRawMETemEtInEE;
    result &= event->getByLabel( tRawMETemEtInHF, hRawMETemEtInHF );
    if ( hRawMETemEtInHF.isValid() ) RawMETemEtInHF = *hRawMETemEtInHF;
    result &= event->getByLabel( tRawMEThadEtFrac, hRawMEThadEtFrac );
    if ( hRawMEThadEtFrac.isValid() ) RawMEThadEtFrac = *hRawMEThadEtFrac;
    result &= event->getByLabel( tRawMEThadEtInHB, hRawMEThadEtInHB );
    if ( hRawMEThadEtInHB.isValid() ) RawMEThadEtInHB = *hRawMEThadEtInHB;
    result &= event->getByLabel( tRawMEThadEtInHE, hRawMEThadEtInHE );
    if ( hRawMEThadEtInHE.isValid() ) RawMEThadEtInHE = *hRawMEThadEtInHE;
    result &= event->getByLabel( tRawMEThadEtInHF, hRawMEThadEtInHF );
    if ( hRawMEThadEtInHF.isValid() ) RawMEThadEtInHF = *hRawMEThadEtInHF;
    result &= event->getByLabel( tRawMETphi, hRawMETphi );
    if ( hRawMETphi.isValid() ) RawMETphi = *hRawMETphi;
    result &= event->getByLabel( tRawMETpx, hRawMETpx );
    if ( hRawMETpx.isValid() ) RawMETpx = *hRawMETpx;
    result &= event->getByLabel( tRawMETpy, hRawMETpy );
    if ( hRawMETpy.isValid() ) RawMETpy = *hRawMETpy;
    result &= event->getByLabel( tRecovRecHitFilterFlag, hRecovRecHitFilterFlag );
    if ( hRecovRecHitFilterFlag.isValid() ) RecovRecHitFilterFlag = *hRecovRecHitFilterFlag;
    result &= event->getByLabel( tRho, hRho );
    if ( hRho.isValid() ) Rho = *hRho;
    result &= event->getByLabel( tRhoForIso, hRhoForIso );
    if ( hRhoForIso.isValid() ) RhoForIso = *hRhoForIso;
    result &= event->getByLabel( tRhoPFnoPU, hRhoPFnoPU );
    if ( hRhoPFnoPU.isValid() ) RhoPFnoPU = *hRhoPFnoPU;
    result &= event->getByLabel( tRun, hRun );
    if ( hRun.isValid() ) Run = *hRun;
    result &= event->getByLabel( tSCBrem, hSCBrem );
    if ( hSCBrem.isValid() ) SCBrem = *hSCBrem;
    result &= event->getByLabel( tSCEnergy, hSCEnergy );
    if ( hSCEnergy.isValid() ) SCEnergy = *hSCEnergy;
    result &= event->getByLabel( tSCEta, hSCEta );
    if ( hSCEta.isValid() ) SCEta = *hSCEta;
    result &= event->getByLabel( tSCEtaWidth, hSCEtaWidth );
    if ( hSCEtaWidth.isValid() ) SCEtaWidth = *hSCEtaWidth;
    result &= event->getByLabel( tSCPhi, hSCPhi );
    if ( hSCPhi.isValid() ) SCPhi = *hSCPhi;
    result &= event->getByLabel( tSCPhiWidth, hSCPhiWidth );
    if ( hSCPhiWidth.isValid() ) SCPhiWidth = *hSCPhiWidth;
    result &= event->getByLabel( tSCPre, hSCPre );
    if ( hSCPre.isValid() ) SCPre = *hSCPre;
    result &= event->getByLabel( tSCR9, hSCR9 );
    if ( hSCR9.isValid() ) SCR9 = *hSCR9;
    result &= event->getByLabel( tSCRaw, hSCRaw );
    if ( hSCRaw.isValid() ) SCRaw = *hSCRaw;
    result &= event->getByLabel( tSCcrackcorr, hSCcrackcorr );
    if ( hSCcrackcorr.isValid() ) SCcrackcorr = *hSCcrackcorr;
    result &= event->getByLabel( tSCcrackcorrseed, hSCcrackcorrseed );
    if ( hSCcrackcorrseed.isValid() ) SCcrackcorrseed = *hSCcrackcorrseed;
    result &= event->getByLabel( tSCcrackcorrseedfactor, hSCcrackcorrseedfactor );
    if ( hSCcrackcorrseedfactor.isValid() ) SCcrackcorrseedfactor = *hSCcrackcorrseedfactor;
    result &= event->getByLabel( tSClocalcorr, hSClocalcorr );
    if ( hSClocalcorr.isValid() ) SClocalcorr = *hSClocalcorr;
    result &= event->getByLabel( tSClocalcorrseed, hSClocalcorrseed );
    if ( hSClocalcorrseed.isValid() ) SClocalcorrseed = *hSClocalcorrseed;
    result &= event->getByLabel( tSClocalcorrseedfactor, hSClocalcorrseedfactor );
    if ( hSClocalcorrseedfactor.isValid() ) SClocalcorrseedfactor = *hSClocalcorrseedfactor;
    result &= event->getByLabel( tSigProcID, hSigProcID );
    if ( hSigProcID.isValid() ) SigProcID = *hSigProcID;
    result &= event->getByLabel( tSumEt, hSumEt );
    if ( hSumEt.isValid() ) SumEt = *hSumEt;
    result &= event->getByLabel( tTCMET, hTCMET );
    if ( hTCMET.isValid() ) TCMET = *hTCMET;
    result &= event->getByLabel( tTCMETSignificance, hTCMETSignificance );
    if ( hTCMETSignificance.isValid() ) TCMETSignificance = *hTCMETSignificance;
    result &= event->getByLabel( tTCMETphi, hTCMETphi );
    if ( hTCMETphi.isValid() ) TCMETphi = *hTCMETphi;
    result &= event->getByLabel( tTCMETpx, hTCMETpx );
    if ( hTCMETpx.isValid() ) TCMETpx = *hTCMETpx;
    result &= event->getByLabel( tTCMETpy, hTCMETpy );
    if ( hTCMETpy.isValid() ) TCMETpy = *hTCMETpy;
    result &= event->getByLabel( tTrkEta, hTrkEta );
    if ( hTrkEta.isValid() ) TrkEta = *hTrkEta;
    result &= event->getByLabel( tTrkGood, hTrkGood );
    if ( hTrkGood.isValid() ) TrkGood = *hTrkGood;
    result &= event->getByLabel( tTrkNChi2, hTrkNChi2 );
    if ( hTrkNChi2.isValid() ) TrkNChi2 = *hTrkNChi2;
    result &= event->getByLabel( tTrkNHits, hTrkNHits );
    if ( hTrkNHits.isValid() ) TrkNHits = *hTrkNHits;
    result &= event->getByLabel( tTrkPhi, hTrkPhi );
    if ( hTrkPhi.isValid() ) TrkPhi = *hTrkPhi;
    result &= event->getByLabel( tTrkPt, hTrkPt );
    if ( hTrkPt.isValid() ) TrkPt = *hTrkPt;
    result &= event->getByLabel( tTrkPtSum, hTrkPtSum );
    if ( hTrkPtSum.isValid() ) TrkPtSum = *hTrkPtSum;
    result &= event->getByLabel( tTrkPtSumPhi, hTrkPtSumPhi );
    if ( hTrkPtSumPhi.isValid() ) TrkPtSumPhi = *hTrkPtSumPhi;
    result &= event->getByLabel( tTrkPtSumx, hTrkPtSumx );
    if ( hTrkPtSumx.isValid() ) TrkPtSumx = *hTrkPtSumx;
    result &= event->getByLabel( tTrkPtSumy, hTrkPtSumy );
    if ( hTrkPtSumy.isValid() ) TrkPtSumy = *hTrkPtSumy;
    result &= event->getByLabel( tTrkVtxDxy, hTrkVtxDxy );
    if ( hTrkVtxDxy.isValid() ) TrkVtxDxy = *hTrkVtxDxy;
    result &= event->getByLabel( tTrkVtxDz, hTrkVtxDz );
    if ( hTrkVtxDz.isValid() ) TrkVtxDz = *hTrkVtxDz;
    result &= event->getByLabel( tVrtxChi2, hVrtxChi2 );
    if ( hVrtxChi2.isValid() ) VrtxChi2 = *hVrtxChi2;
    result &= event->getByLabel( tVrtxIsFake, hVrtxIsFake );
    if ( hVrtxIsFake.isValid() ) VrtxIsFake = *hVrtxIsFake;
    result &= event->getByLabel( tVrtxNdof, hVrtxNdof );
    if ( hVrtxNdof.isValid() ) VrtxNdof = *hVrtxNdof;
    result &= event->getByLabel( tVrtxNtrks, hVrtxNtrks );
    if ( hVrtxNtrks.isValid() ) VrtxNtrks = *hVrtxNtrks;
    result &= event->getByLabel( tVrtxSumPt, hVrtxSumPt );
    if ( hVrtxSumPt.isValid() ) VrtxSumPt = *hVrtxSumPt;
    result &= event->getByLabel( tVrtxX, hVrtxX );
    if ( hVrtxX.isValid() ) VrtxX = *hVrtxX;
    result &= event->getByLabel( tVrtxXE, hVrtxXE );
    if ( hVrtxXE.isValid() ) VrtxXE = *hVrtxXE;
    result &= event->getByLabel( tVrtxY, hVrtxY );
    if ( hVrtxY.isValid() ) VrtxY = *hVrtxY;
    result &= event->getByLabel( tVrtxYE, hVrtxYE );
    if ( hVrtxYE.isValid() ) VrtxYE = *hVrtxYE;
    result &= event->getByLabel( tVrtxZ, hVrtxZ );
    if ( hVrtxZ.isValid() ) VrtxZ = *hVrtxZ;
    result &= event->getByLabel( tVrtxZE, hVrtxZE );
    if ( hVrtxZE.isValid() ) VrtxZE = *hVrtxZE;
    result &= event->getByLabel( tWeight, hWeight );
    if ( hWeight.isValid() ) Weight = *hWeight;
    result &= event->getByLabel( tgenInfoEta, hgenInfoEta );
    if ( hgenInfoEta.isValid() ) genInfoEta = *hgenInfoEta;
    result &= event->getByLabel( tgenInfoId, hgenInfoId );
    if ( hgenInfoId.isValid() ) genInfoId = *hgenInfoId;
    result &= event->getByLabel( tgenInfoM, hgenInfoM );
    if ( hgenInfoM.isValid() ) genInfoM = *hgenInfoM;
    result &= event->getByLabel( tgenInfoMo1, hgenInfoMo1 );
    if ( hgenInfoMo1.isValid() ) genInfoMo1 = *hgenInfoMo1;
    result &= event->getByLabel( tgenInfoMo2, hgenInfoMo2 );
    if ( hgenInfoMo2.isValid() ) genInfoMo2 = *hgenInfoMo2;
    result &= event->getByLabel( tgenInfoNMo, hgenInfoNMo );
    if ( hgenInfoNMo.isValid() ) genInfoNMo = *hgenInfoNMo;
    result &= event->getByLabel( tgenInfoPhi, hgenInfoPhi );
    if ( hgenInfoPhi.isValid() ) genInfoPhi = *hgenInfoPhi;
    result &= event->getByLabel( tgenInfoPromptFlag, hgenInfoPromptFlag );
    if ( hgenInfoPromptFlag.isValid() ) genInfoPromptFlag = *hgenInfoPromptFlag;
    result &= event->getByLabel( tgenInfoPt, hgenInfoPt );
    if ( hgenInfoPt.isValid() ) genInfoPt = *hgenInfoPt;
    result &= event->getByLabel( tgenInfoPx, hgenInfoPx );
    if ( hgenInfoPx.isValid() ) genInfoPx = *hgenInfoPx;
    result &= event->getByLabel( tgenInfoPy, hgenInfoPy );
    if ( hgenInfoPy.isValid() ) genInfoPy = *hgenInfoPy;
    result &= event->getByLabel( tgenInfoPz, hgenInfoPz );
    if ( hgenInfoPz.isValid() ) genInfoPz = *hgenInfoPz;
    result &= event->getByLabel( tgenInfoStatus, hgenInfoStatus );
    if ( hgenInfoStatus.isValid() ) genInfoStatus = *hgenInfoStatus;
    result &= event->getByLabel( tnGenParticles, hnGenParticles );
    if ( hnGenParticles.isValid() ) nGenParticles = *hnGenParticles;
    result &= event->getByLabel( tpdfW, hpdfW );
    if ( hpdfW.isValid() ) pdfW = *hpdfW;
    result &= event->getByLabel( tpdfWsum, hpdfWsum );
    if ( hpdfWsum.isValid() ) pdfWsum = *hpdfWsum;
    result &= event->getByLabel( tprocess, hprocess );
    if ( hprocess.isValid() ) process = *hprocess;
    result &= event->getByLabel( tsignMu, hsignMu );
    if ( hsignMu.isValid() ) signMu = *hsignMu;
    result &= event->getByLabel( txSMS, hxSMS );
    if ( hxSMS.isValid() ) xSMS = *hxSMS;
    result &= event->getByLabel( txbarSMS, hxbarSMS );
    if ( hxbarSMS.isValid() ) xbarSMS = *hxbarSMS;

    return result;
    
}


//____________________________________________________________________
// Called at init: define "tags"
void TreeClassBase::Init(void)
{

    tExtXSecLO                 = edm::InputTag("analyze","ExtXSecLO");
    tExtXSecNLO                = edm::InputTag("analyze","ExtXSecNLO");
    tHLTLabels                 = edm::InputTag("analyze","HLTLabels");
    tHLTNames                  = edm::InputTag("analyze","HLTNames");
    tIntXSec                   = edm::InputTag("analyze","IntXSec");
    tL1PhysMenu                = edm::InputTag("analyze","L1PhysMenu");
    tMaxElEta                  = edm::InputTag("analyze","MaxElEta");
    tMaxGenJetEta              = edm::InputTag("analyze","MaxGenJetEta");
    tMaxGenLeptEta             = edm::InputTag("analyze","MaxGenLeptEta");
    tMaxGenPhotEta             = edm::InputTag("analyze","MaxGenPhotEta");
    tMaxJEta                   = edm::InputTag("analyze","MaxJEta");
    tMaxMuEta                  = edm::InputTag("analyze","MaxMuEta");
    tMaxNEBhits                = edm::InputTag("analyze","MaxNEBhits");
    tMaxNEles                  = edm::InputTag("analyze","MaxNEles");
    tMaxNGenJet                = edm::InputTag("analyze","MaxNGenJet");
    tMaxNGenLep                = edm::InputTag("analyze","MaxNGenLep");
    tMaxNGenPho                = edm::InputTag("analyze","MaxNGenPho");
    tMaxNJets                  = edm::InputTag("analyze","MaxNJets");
    tMaxNMus                   = edm::InputTag("analyze","MaxNMus");
    tMaxNPhotons               = edm::InputTag("analyze","MaxNPhotons");
    tMaxNPileup                = edm::InputTag("analyze","MaxNPileup");
    tMaxNSC                    = edm::InputTag("analyze","MaxNSC");
    tMaxNTrks                  = edm::InputTag("analyze","MaxNTrks");
    tMaxNVrtx                  = edm::InputTag("analyze","MaxNVrtx");
    tMaxPhotonEta              = edm::InputTag("analyze","MaxPhotonEta");
    tMaxTrkEta                 = edm::InputTag("analyze","MaxTrkEta");
    tMaxTrkNChi2               = edm::InputTag("analyze","MaxTrkNChi2");
    tMinEBRechitE              = edm::InputTag("analyze","MinEBRechitE");
    tMinElPt                   = edm::InputTag("analyze","MinElPt");
    tMinGenJetPt               = edm::InputTag("analyze","MinGenJetPt");
    tMinGenLeptPt              = edm::InputTag("analyze","MinGenLeptPt");
    tMinGenPhotPt              = edm::InputTag("analyze","MinGenPhotPt");
    tMinJEMfrac                = edm::InputTag("analyze","MinJEMfrac");
    tMinJPt                    = edm::InputTag("analyze","MinJPt");
    tMinMuPt                   = edm::InputTag("analyze","MinMuPt");
    tMinPhotonPt               = edm::InputTag("analyze","MinPhotonPt");
    tMinRawJPt                 = edm::InputTag("analyze","MinRawJPt");
    tMinSCraw                  = edm::InputTag("analyze","MinSCraw");
    tMinTrkNHits               = edm::InputTag("analyze","MinTrkNHits");
    tMinTrkPt                  = edm::InputTag("analyze","MinTrkPt");
    tPileUpData                = edm::InputTag("analyze","PileUpData");
    tPileUpMC                  = edm::InputTag("analyze","PileUpMC");
    tA0                        = edm::InputTag("analyze","A0");
    tBeamspotx                 = edm::InputTag("analyze","Beamspotx");
    tBeamspoty                 = edm::InputTag("analyze","Beamspoty");
    tBeamspotz                 = edm::InputTag("analyze","Beamspotz");
    tCAJArea                   = edm::InputTag("analyze","CAJArea");
    tCAJChfrac                 = edm::InputTag("analyze","CAJChfrac");
    tCAJE                      = edm::InputTag("analyze","CAJE");
    tCAJEMfrac                 = edm::InputTag("analyze","CAJEMfrac");
    tCAJEt                     = edm::InputTag("analyze","CAJEt");
    tCAJEta                    = edm::InputTag("analyze","CAJEta");
    tCAJFlavour                = edm::InputTag("analyze","CAJFlavour");
    tCAJIDHPD                  = edm::InputTag("analyze","CAJIDHPD");
    tCAJIDLoose                = edm::InputTag("analyze","CAJIDLoose");
    tCAJIDRBX                  = edm::InputTag("analyze","CAJIDRBX");
    tCAJIDn90Hits              = edm::InputTag("analyze","CAJIDn90Hits");
    tCAJIDresEMF               = edm::InputTag("analyze","CAJIDresEMF");
    tCAJL1FastJetScale         = edm::InputTag("analyze","CAJL1FastJetScale");
    tCAJNAssoTracks            = edm::InputTag("analyze","CAJNAssoTracks");
    tCAJNConstituents          = edm::InputTag("analyze","CAJNConstituents");
    tCAJPhi                    = edm::InputTag("analyze","CAJPhi");
    tCAJPt                     = edm::InputTag("analyze","CAJPt");
    tCAJPx                     = edm::InputTag("analyze","CAJPx");
    tCAJPy                     = edm::InputTag("analyze","CAJPy");
    tCAJPz                     = edm::InputTag("analyze","CAJPz");
    tCAJScale                  = edm::InputTag("analyze","CAJScale");
    tCAJn90                    = edm::InputTag("analyze","CAJn90");
    tCANJets                   = edm::InputTag("analyze","CANJets");
    tCSCTightHaloID            = edm::InputTag("analyze","CSCTightHaloID");
    tConvChi2Probability       = edm::InputTag("analyze","ConvChi2Probability");
    tConvEoverP                = edm::InputTag("analyze","ConvEoverP");
    tConvNtracks               = edm::InputTag("analyze","ConvNtracks");
    tConvValidVtx              = edm::InputTag("analyze","ConvValidVtx");
    tConvZofPrimVtxFromTrks    = edm::InputTag("analyze","ConvZofPrimVtxFromTrks");
    tEBrechitChi2              = edm::InputTag("analyze","EBrechitChi2");
    tEBrechitE                 = edm::InputTag("analyze","EBrechitE");
    tEBrechitE2oE9             = edm::InputTag("analyze","EBrechitE2oE9");
    tEBrechitE4oE1             = edm::InputTag("analyze","EBrechitE4oE1");
    tEBrechitEta               = edm::InputTag("analyze","EBrechitEta");
    tEBrechitPhi               = edm::InputTag("analyze","EBrechitPhi");
    tEBrechitPt                = edm::InputTag("analyze","EBrechitPt");
    tEBrechitTime              = edm::InputTag("analyze","EBrechitTime");
    tECALEsumx                 = edm::InputTag("analyze","ECALEsumx");
    tECALEsumy                 = edm::InputTag("analyze","ECALEsumy");
    tECALEsumz                 = edm::InputTag("analyze","ECALEsumz");
    tECALMET                   = edm::InputTag("analyze","ECALMET");
    tECALMETEta                = edm::InputTag("analyze","ECALMETEta");
    tECALMETPhi                = edm::InputTag("analyze","ECALMETPhi");
    tECALSumEt                 = edm::InputTag("analyze","ECALSumEt");
    tEcalDeadTPFilterFlag      = edm::InputTag("analyze","EcalDeadTPFilterFlag");
    tElBasicClustersSize       = edm::InputTag("analyze","ElBasicClustersSize");
    tElCInfoIsGsfCtfCons       = edm::InputTag("analyze","ElCInfoIsGsfCtfCons");
    tElCInfoIsGsfCtfScPixCons  = edm::InputTag("analyze","ElCInfoIsGsfCtfScPixCons");
    tElCInfoIsGsfScPixCons     = edm::InputTag("analyze","ElCInfoIsGsfScPixCons");
    tElCaloEnergy              = edm::InputTag("analyze","ElCaloEnergy");
    tElCharge                  = edm::InputTag("analyze","ElCharge");
    tElChargeMisIDProb         = edm::InputTag("analyze","ElChargeMisIDProb");
    tElClosestCtfTrackCharge   = edm::InputTag("analyze","ElClosestCtfTrackCharge");
    tElClosestCtfTrackEta      = edm::InputTag("analyze","ElClosestCtfTrackEta");
    tElClosestCtfTrackPhi      = edm::InputTag("analyze","ElClosestCtfTrackPhi");
    tElClosestCtfTrackPt       = edm::InputTag("analyze","ElClosestCtfTrackPt");
    tElConvPartnerTrkCharge    = edm::InputTag("analyze","ElConvPartnerTrkCharge");
    tElConvPartnerTrkDCot      = edm::InputTag("analyze","ElConvPartnerTrkDCot");
    tElConvPartnerTrkDist      = edm::InputTag("analyze","ElConvPartnerTrkDist");
    tElConvPartnerTrkEta       = edm::InputTag("analyze","ElConvPartnerTrkEta");
    tElConvPartnerTrkPhi       = edm::InputTag("analyze","ElConvPartnerTrkPhi");
    tElConvPartnerTrkPt        = edm::InputTag("analyze","ElConvPartnerTrkPt");
    tElD0BS                    = edm::InputTag("analyze","ElD0BS");
    tElD0E                     = edm::InputTag("analyze","ElD0E");
    tElD0PV                    = edm::InputTag("analyze","ElD0PV");
    tElDR03EcalRecHitSumEt     = edm::InputTag("analyze","ElDR03EcalRecHitSumEt");
    tElDR03HcalTowerSumEt      = edm::InputTag("analyze","ElDR03HcalTowerSumEt");
    tElDR03TkSumPt             = edm::InputTag("analyze","ElDR03TkSumPt");
    tElDR04EcalRecHitSumEt     = edm::InputTag("analyze","ElDR04EcalRecHitSumEt");
    tElDR04HcalTowerSumEt      = edm::InputTag("analyze","ElDR04HcalTowerSumEt");
    tElDR04TkSumPt             = edm::InputTag("analyze","ElDR04TkSumPt");
    tElDeltaEtaSeedClusterAtCalo = edm::InputTag("analyze","ElDeltaEtaSeedClusterAtCalo");
    tElDeltaEtaSuperClusterAtVtx = edm::InputTag("analyze","ElDeltaEtaSuperClusterAtVtx");
    tElDeltaPhiSeedClusterAtCalo = edm::InputTag("analyze","ElDeltaPhiSeedClusterAtCalo");
    tElDeltaPhiSuperClusterAtVtx = edm::InputTag("analyze","ElDeltaPhiSuperClusterAtVtx");
    tElDzBS                    = edm::InputTag("analyze","ElDzBS");
    tElDzE                     = edm::InputTag("analyze","ElDzE");
    tElDzPV                    = edm::InputTag("analyze","ElDzPV");
    tElE                       = edm::InputTag("analyze","ElE");
    tElE1OverE9                = edm::InputTag("analyze","ElE1OverE9");
    tElE1x5                    = edm::InputTag("analyze","ElE1x5");
    tElE2x5Max                 = edm::InputTag("analyze","ElE2x5Max");
    tElE5x5                    = edm::InputTag("analyze","ElE5x5");
    tElESuperClusterOverP      = edm::InputTag("analyze","ElESuperClusterOverP");
    tElEcalDriven              = edm::InputTag("analyze","ElEcalDriven");
    tElEcalEnergyError         = edm::InputTag("analyze","ElEcalEnergyError");
    tElEleMomentumError        = edm::InputTag("analyze","ElEleMomentumError");
    tElEt                      = edm::InputTag("analyze","ElEt");
    tElEta                     = edm::InputTag("analyze","ElEta");
    tElEventelPFIsoValueCharged03PFIdStandard = edm::InputTag("analyze","ElEventelPFIsoValueCharged03PFIdStandard");
    tElEventelPFIsoValueCharged04PFIdStandard = edm::InputTag("analyze","ElEventelPFIsoValueCharged04PFIdStandard");
    tElEventelPFIsoValueGamma03PFIdStandard = edm::InputTag("analyze","ElEventelPFIsoValueGamma03PFIdStandard");
    tElEventelPFIsoValueGamma04PFIdStandard = edm::InputTag("analyze","ElEventelPFIsoValueGamma04PFIdStandard");
    tElEventelPFIsoValueNeutral03PFIdStandard = edm::InputTag("analyze","ElEventelPFIsoValueNeutral03PFIdStandard");
    tElEventelPFIsoValueNeutral04PFIdStandard = edm::InputTag("analyze","ElEventelPFIsoValueNeutral04PFIdStandard");
    tElGenE                    = edm::InputTag("analyze","ElGenE");
    tElGenEta                  = edm::InputTag("analyze","ElGenEta");
    tElGenGME                  = edm::InputTag("analyze","ElGenGME");
    tElGenGMEta                = edm::InputTag("analyze","ElGenGMEta");
    tElGenGMID                 = edm::InputTag("analyze","ElGenGMID");
    tElGenGMPhi                = edm::InputTag("analyze","ElGenGMPhi");
    tElGenGMPt                 = edm::InputTag("analyze","ElGenGMPt");
    tElGenGMStatus             = edm::InputTag("analyze","ElGenGMStatus");
    tElGenID                   = edm::InputTag("analyze","ElGenID");
    tElGenME                   = edm::InputTag("analyze","ElGenME");
    tElGenMEta                 = edm::InputTag("analyze","ElGenMEta");
    tElGenMID                  = edm::InputTag("analyze","ElGenMID");
    tElGenMPhi                 = edm::InputTag("analyze","ElGenMPhi");
    tElGenMPt                  = edm::InputTag("analyze","ElGenMPt");
    tElGenMStatus              = edm::InputTag("analyze","ElGenMStatus");
    tElGenPhi                  = edm::InputTag("analyze","ElGenPhi");
    tElGenPt                   = edm::InputTag("analyze","ElGenPt");
    tElGenStatus               = edm::InputTag("analyze","ElGenStatus");
    tElGood                    = edm::InputTag("analyze","ElGood");
    tElGsfTkEta                = edm::InputTag("analyze","ElGsfTkEta");
    tElGsfTkPhi                = edm::InputTag("analyze","ElGsfTkPhi");
    tElGsfTkPt                 = edm::InputTag("analyze","ElGsfTkPt");
    tElHcalOverEcal            = edm::InputTag("analyze","ElHcalOverEcal");
    tElIDLoose                 = edm::InputTag("analyze","ElIDLoose");
    tElIDMva                   = edm::InputTag("analyze","ElIDMva");
    tElIDRobustLoose           = edm::InputTag("analyze","ElIDRobustLoose");
    tElIDRobustTight           = edm::InputTag("analyze","ElIDRobustTight");
    tElIDTight                 = edm::InputTag("analyze","ElIDTight");
    tElIDsimpleWP80relIso      = edm::InputTag("analyze","ElIDsimpleWP80relIso");
    tElIDsimpleWP85relIso      = edm::InputTag("analyze","ElIDsimpleWP85relIso");
    tElIDsimpleWP90relIso      = edm::InputTag("analyze","ElIDsimpleWP90relIso");
    tElIDsimpleWP95relIso      = edm::InputTag("analyze","ElIDsimpleWP95relIso");
    tElIDsimpleWPrelIso        = edm::InputTag("analyze","ElIDsimpleWPrelIso");
    tElInGap                   = edm::InputTag("analyze","ElInGap");
    tElIsIso                   = edm::InputTag("analyze","ElIsIso");
    tElNBrems                  = edm::InputTag("analyze","ElNBrems");
    tElNChi2                   = edm::InputTag("analyze","ElNChi2");
    tElNumberOfMissingInnerHits = edm::InputTag("analyze","ElNumberOfMissingInnerHits");
    tElPassConversionVeto      = edm::InputTag("analyze","ElPassConversionVeto");
    tElPfIsoChHad03            = edm::InputTag("analyze","ElPfIsoChHad03");
    tElPfIsoNeHad03            = edm::InputTag("analyze","ElPfIsoNeHad03");
    tElPfIsoPhoton03           = edm::InputTag("analyze","ElPfIsoPhoton03");
    tElPhi                     = edm::InputTag("analyze","ElPhi");
    tElPt                      = edm::InputTag("analyze","ElPt");
    tElPtE                     = edm::InputTag("analyze","ElPtE");
    tElPx                      = edm::InputTag("analyze","ElPx");
    tElPy                      = edm::InputTag("analyze","ElPy");
    tElPz                      = edm::InputTag("analyze","ElPz");
    tElRelIso03                = edm::InputTag("analyze","ElRelIso03");
    tElRelIso04                = edm::InputTag("analyze","ElRelIso04");
    tElS4OverS1                = edm::InputTag("analyze","ElS4OverS1");
    tElSCEta                   = edm::InputTag("analyze","ElSCEta");
    tElSCindex                 = edm::InputTag("analyze","ElSCindex");
    tElScPixCharge             = edm::InputTag("analyze","ElScPixCharge");
    tElScSeedSeverity          = edm::InputTag("analyze","ElScSeedSeverity");
    tElSigmaIetaIeta           = edm::InputTag("analyze","ElSigmaIetaIeta");
    tElTheta                   = edm::InputTag("analyze","ElTheta");
    tElTrackerDriven           = edm::InputTag("analyze","ElTrackerDriven");
    tElTrkMomAtVtx             = edm::InputTag("analyze","ElTrkMomAtVtx");
    tElTrkMomentumError        = edm::InputTag("analyze","ElTrkMomentumError");
    tElelectronPFIsoChHad03    = edm::InputTag("analyze","ElelectronPFIsoChHad03");
    tElelectronPFIsoChHad04    = edm::InputTag("analyze","ElelectronPFIsoChHad04");
    tElelectronPFIsoNHad03     = edm::InputTag("analyze","ElelectronPFIsoNHad03");
    tElelectronPFIsoNHad04     = edm::InputTag("analyze","ElelectronPFIsoNHad04");
    tElelectronPFIsoPhoton03   = edm::InputTag("analyze","ElelectronPFIsoPhoton03");
    tElelectronPFIsoPhoton04   = edm::InputTag("analyze","ElelectronPFIsoPhoton04");
    tElelectronRadPFIsoChHad03 = edm::InputTag("analyze","ElelectronRadPFIsoChHad03");
    tElelectronRadPFIsoChHad04 = edm::InputTag("analyze","ElelectronRadPFIsoChHad04");
    tElelectronRadPFIsoNHad03  = edm::InputTag("analyze","ElelectronRadPFIsoNHad03");
    tElelectronRadPFIsoNHad04  = edm::InputTag("analyze","ElelectronRadPFIsoNHad04");
    tElelectronRadPFIsoPhoton03 = edm::InputTag("analyze","ElelectronRadPFIsoPhoton03");
    tElelectronRadPFIsoPhoton04 = edm::InputTag("analyze","ElelectronRadPFIsoPhoton04");
    tElfbrem                   = edm::InputTag("analyze","Elfbrem");
    tEvent                     = edm::InputTag("analyze","Event");
    tGenJetE                   = edm::InputTag("analyze","GenJetE");
    tGenJetEmE                 = edm::InputTag("analyze","GenJetEmE");
    tGenJetEta                 = edm::InputTag("analyze","GenJetEta");
    tGenJetHadE                = edm::InputTag("analyze","GenJetHadE");
    tGenJetInvE                = edm::InputTag("analyze","GenJetInvE");
    tGenJetPhi                 = edm::InputTag("analyze","GenJetPhi");
    tGenJetPt                  = edm::InputTag("analyze","GenJetPt");
    tGenLeptonEta              = edm::InputTag("analyze","GenLeptonEta");
    tGenLeptonGMEta            = edm::InputTag("analyze","GenLeptonGMEta");
    tGenLeptonGMID             = edm::InputTag("analyze","GenLeptonGMID");
    tGenLeptonGMPhi            = edm::InputTag("analyze","GenLeptonGMPhi");
    tGenLeptonGMPt             = edm::InputTag("analyze","GenLeptonGMPt");
    tGenLeptonGMStatus         = edm::InputTag("analyze","GenLeptonGMStatus");
    tGenLeptonID               = edm::InputTag("analyze","GenLeptonID");
    tGenLeptonMEta             = edm::InputTag("analyze","GenLeptonMEta");
    tGenLeptonMID              = edm::InputTag("analyze","GenLeptonMID");
    tGenLeptonMPhi             = edm::InputTag("analyze","GenLeptonMPhi");
    tGenLeptonMPt              = edm::InputTag("analyze","GenLeptonMPt");
    tGenLeptonMStatus          = edm::InputTag("analyze","GenLeptonMStatus");
    tGenLeptonPhi              = edm::InputTag("analyze","GenLeptonPhi");
    tGenLeptonPt               = edm::InputTag("analyze","GenLeptonPt");
    tGenMET                    = edm::InputTag("analyze","GenMET");
    tGenMETphi                 = edm::InputTag("analyze","GenMETphi");
    tGenMETpx                  = edm::InputTag("analyze","GenMETpx");
    tGenMETpy                  = edm::InputTag("analyze","GenMETpy");
    tGenPhotonEta              = edm::InputTag("analyze","GenPhotonEta");
    tGenPhotonMotherID         = edm::InputTag("analyze","GenPhotonMotherID");
    tGenPhotonMotherStatus     = edm::InputTag("analyze","GenPhotonMotherStatus");
    tGenPhotonPartonMindR      = edm::InputTag("analyze","GenPhotonPartonMindR");
    tGenPhotonPhi              = edm::InputTag("analyze","GenPhotonPhi");
    tGenPhotonPt               = edm::InputTag("analyze","GenPhotonPt");
    tGenWeight                 = edm::InputTag("analyze","GenWeight");
    tGoodEvent                 = edm::InputTag("analyze","GoodEvent");
    tHBHENoiseFlag             = edm::InputTag("analyze","HBHENoiseFlag");
    tHBHENoiseFlagIso          = edm::InputTag("analyze","HBHENoiseFlagIso");
    tHCALEsumx                 = edm::InputTag("analyze","HCALEsumx");
    tHCALEsumy                 = edm::InputTag("analyze","HCALEsumy");
    tHCALEsumz                 = edm::InputTag("analyze","HCALEsumz");
    tHCALMET                   = edm::InputTag("analyze","HCALMET");
    tHCALMETPhi                = edm::InputTag("analyze","HCALMETPhi");
    tHCALMETeta                = edm::InputTag("analyze","HCALMETeta");
    tHCALSumEt                 = edm::InputTag("analyze","HCALSumEt");
    tHLTObjectEta0             = edm::InputTag("analyze","HLTObjectEta0");
    tHLTObjectEta1             = edm::InputTag("analyze","HLTObjectEta1");
    tHLTObjectEta2             = edm::InputTag("analyze","HLTObjectEta2");
    tHLTObjectEta3             = edm::InputTag("analyze","HLTObjectEta3");
    tHLTObjectEta4             = edm::InputTag("analyze","HLTObjectEta4");
    tHLTObjectEta5             = edm::InputTag("analyze","HLTObjectEta5");
    tHLTObjectEta6             = edm::InputTag("analyze","HLTObjectEta6");
    tHLTObjectEta7             = edm::InputTag("analyze","HLTObjectEta7");
    tHLTObjectEta8             = edm::InputTag("analyze","HLTObjectEta8");
    tHLTObjectEta9             = edm::InputTag("analyze","HLTObjectEta9");
    tHLTObjectID0              = edm::InputTag("analyze","HLTObjectID0");
    tHLTObjectID1              = edm::InputTag("analyze","HLTObjectID1");
    tHLTObjectID2              = edm::InputTag("analyze","HLTObjectID2");
    tHLTObjectID3              = edm::InputTag("analyze","HLTObjectID3");
    tHLTObjectID4              = edm::InputTag("analyze","HLTObjectID4");
    tHLTObjectID5              = edm::InputTag("analyze","HLTObjectID5");
    tHLTObjectID6              = edm::InputTag("analyze","HLTObjectID6");
    tHLTObjectID7              = edm::InputTag("analyze","HLTObjectID7");
    tHLTObjectID8              = edm::InputTag("analyze","HLTObjectID8");
    tHLTObjectID9              = edm::InputTag("analyze","HLTObjectID9");
    tHLTObjectPhi0             = edm::InputTag("analyze","HLTObjectPhi0");
    tHLTObjectPhi1             = edm::InputTag("analyze","HLTObjectPhi1");
    tHLTObjectPhi2             = edm::InputTag("analyze","HLTObjectPhi2");
    tHLTObjectPhi3             = edm::InputTag("analyze","HLTObjectPhi3");
    tHLTObjectPhi4             = edm::InputTag("analyze","HLTObjectPhi4");
    tHLTObjectPhi5             = edm::InputTag("analyze","HLTObjectPhi5");
    tHLTObjectPhi6             = edm::InputTag("analyze","HLTObjectPhi6");
    tHLTObjectPhi7             = edm::InputTag("analyze","HLTObjectPhi7");
    tHLTObjectPhi8             = edm::InputTag("analyze","HLTObjectPhi8");
    tHLTObjectPhi9             = edm::InputTag("analyze","HLTObjectPhi9");
    tHLTObjectPt0              = edm::InputTag("analyze","HLTObjectPt0");
    tHLTObjectPt1              = edm::InputTag("analyze","HLTObjectPt1");
    tHLTObjectPt2              = edm::InputTag("analyze","HLTObjectPt2");
    tHLTObjectPt3              = edm::InputTag("analyze","HLTObjectPt3");
    tHLTObjectPt4              = edm::InputTag("analyze","HLTObjectPt4");
    tHLTObjectPt5              = edm::InputTag("analyze","HLTObjectPt5");
    tHLTObjectPt6              = edm::InputTag("analyze","HLTObjectPt6");
    tHLTObjectPt7              = edm::InputTag("analyze","HLTObjectPt7");
    tHLTObjectPt8              = edm::InputTag("analyze","HLTObjectPt8");
    tHLTObjectPt9              = edm::InputTag("analyze","HLTObjectPt9");
    tHLTPrescale               = edm::InputTag("analyze","HLTPrescale");
    tHLTResults                = edm::InputTag("analyze","HLTResults");
    tJArea                     = edm::InputTag("analyze","JArea");
    tJBetaStar                 = edm::InputTag("analyze","JBetaStar");
    tJChargedEmFrac            = edm::InputTag("analyze","JChargedEmFrac");
    tJChargedHadFrac           = edm::InputTag("analyze","JChargedHadFrac");
    tJChargedMuEnergyFrac      = edm::InputTag("analyze","JChargedMuEnergyFrac");
    tJE                        = edm::InputTag("analyze","JE");
    tJEcorr                    = edm::InputTag("analyze","JEcorr");
    tJEt                       = edm::InputTag("analyze","JEt");
    tJEta                      = edm::InputTag("analyze","JEta");
    tJEtaRms                   = edm::InputTag("analyze","JEtaRms");
    tJGenJetIndex              = edm::InputTag("analyze","JGenJetIndex");
    tJGood                     = edm::InputTag("analyze","JGood");
    tJHFEMFrac                 = edm::InputTag("analyze","JHFEMFrac");
    tJHFHadFrac                = edm::InputTag("analyze","JHFHadFrac");
    tJMass                     = edm::InputTag("analyze","JMass");
    tJNAssoTracks              = edm::InputTag("analyze","JNAssoTracks");
    tJNConstituents            = edm::InputTag("analyze","JNConstituents");
    tJNNeutrals                = edm::InputTag("analyze","JNNeutrals");
    tJNeutralEmFrac            = edm::InputTag("analyze","JNeutralEmFrac");
    tJNeutralHadFrac           = edm::InputTag("analyze","JNeutralHadFrac");
    tJPhi                      = edm::InputTag("analyze","JPhi");
    tJPhiRms                   = edm::InputTag("analyze","JPhiRms");
    tJPhoFrac                  = edm::InputTag("analyze","JPhoFrac");
    tJPt                       = edm::InputTag("analyze","JPt");
    tJPtD                      = edm::InputTag("analyze","JPtD");
    tJPx                       = edm::InputTag("analyze","JPx");
    tJPy                       = edm::InputTag("analyze","JPy");
    tJPz                       = edm::InputTag("analyze","JPz");
    tJRMSCand                  = edm::InputTag("analyze","JRMSCand");
    tJVtxExx                   = edm::InputTag("analyze","JVtxExx");
    tJVtxEyx                   = edm::InputTag("analyze","JVtxEyx");
    tJVtxEyy                   = edm::InputTag("analyze","JVtxEyy");
    tJVtxEzx                   = edm::InputTag("analyze","JVtxEzx");
    tJVtxEzy                   = edm::InputTag("analyze","JVtxEzy");
    tJVtxEzz                   = edm::InputTag("analyze","JVtxEzz");
    tJVtxNChi2                 = edm::InputTag("analyze","JVtxNChi2");
    tJVtxx                     = edm::InputTag("analyze","JVtxx");
    tJVtxy                     = edm::InputTag("analyze","JVtxy");
    tJVtxz                     = edm::InputTag("analyze","JVtxz");
    tJeMinDR                   = edm::InputTag("analyze","JeMinDR");
    tJnewPFCombinedSecondaryVertexBPFJetTags = edm::InputTag("analyze","JnewPFCombinedSecondaryVertexBPFJetTags");
    tJnewPFCombinedSecondaryVertexMVABPFJetTags = edm::InputTag("analyze","JnewPFCombinedSecondaryVertexMVABPFJetTags");
    tJnewPFJetBProbabilityBPFJetTags = edm::InputTag("analyze","JnewPFJetBProbabilityBPFJetTags");
    tJnewPFJetProbabilityBPFJetTags = edm::InputTag("analyze","JnewPFJetProbabilityBPFJetTags");
    tJnewPFSimpleSecondaryVertexHighEffBJetTags = edm::InputTag("analyze","JnewPFSimpleSecondaryVertexHighEffBJetTags");
    tJnewPFSimpleSecondaryVertexHighPurBJetTags = edm::InputTag("analyze","JnewPFSimpleSecondaryVertexHighPurBJetTags");
    tJnewPFTrackCountingHighEffBJetTags = edm::InputTag("analyze","JnewPFTrackCountingHighEffBJetTags");
    tJnewPFTrackCountingHighPurBJetTags = edm::InputTag("analyze","JnewPFTrackCountingHighPurBJetTags");
    tJtrk1px                   = edm::InputTag("analyze","Jtrk1px");
    tJtrk1py                   = edm::InputTag("analyze","Jtrk1py");
    tJtrk1pz                   = edm::InputTag("analyze","Jtrk1pz");
    tJtrk2px                   = edm::InputTag("analyze","Jtrk2px");
    tJtrk2py                   = edm::InputTag("analyze","Jtrk2py");
    tJtrk2pz                   = edm::InputTag("analyze","Jtrk2pz");
    tJtrk3px                   = edm::InputTag("analyze","Jtrk3px");
    tJtrk3py                   = edm::InputTag("analyze","Jtrk3py");
    tJtrk3pz                   = edm::InputTag("analyze","Jtrk3pz");
    tL1PhysResults             = edm::InputTag("analyze","L1PhysResults");
    tL1TechResults             = edm::InputTag("analyze","L1TechResults");
    tLumiSection               = edm::InputTag("analyze","LumiSection");
    tM0                        = edm::InputTag("analyze","M0");
    tM12                       = edm::InputTag("analyze","M12");
    tMETR12                    = edm::InputTag("analyze","METR12");
    tMETR21                    = edm::InputTag("analyze","METR21");
    tMassChi                   = edm::InputTag("analyze","MassChi");
    tMassGlu                   = edm::InputTag("analyze","MassGlu");
    tMassLSP                   = edm::InputTag("analyze","MassLSP");
    tMaxElExceed               = edm::InputTag("analyze","MaxElExceed");
    tMaxGenJetExceed           = edm::InputTag("analyze","MaxGenJetExceed");
    tMaxGenLepExceed           = edm::InputTag("analyze","MaxGenLepExceed");
    tMaxGenPartExceed          = edm::InputTag("analyze","MaxGenPartExceed");
    tMaxGenPhoExceed           = edm::InputTag("analyze","MaxGenPhoExceed");
    tMaxJetExceed              = edm::InputTag("analyze","MaxJetExceed");
    tMaxMuExceed               = edm::InputTag("analyze","MaxMuExceed");
    tMaxPhotonsExceed          = edm::InputTag("analyze","MaxPhotonsExceed");
    tMaxTrkExceed              = edm::InputTag("analyze","MaxTrkExceed");
    tMaxUncJetExceed           = edm::InputTag("analyze","MaxUncJetExceed");
    tMaxVerticesExceed         = edm::InputTag("analyze","MaxVerticesExceed");
    tMuCaloComp                = edm::InputTag("analyze","MuCaloComp");
    tMuCharge                  = edm::InputTag("analyze","MuCharge");
    tMuD0BS                    = edm::InputTag("analyze","MuD0BS");
    tMuD0E                     = edm::InputTag("analyze","MuD0E");
    tMuD0PV                    = edm::InputTag("analyze","MuD0PV");
    tMuDzBS                    = edm::InputTag("analyze","MuDzBS");
    tMuDzE                     = edm::InputTag("analyze","MuDzE");
    tMuDzPV                    = edm::InputTag("analyze","MuDzPV");
    tMuE                       = edm::InputTag("analyze","MuE");
    tMuEem                     = edm::InputTag("analyze","MuEem");
    tMuEhad                    = edm::InputTag("analyze","MuEhad");
    tMuEt                      = edm::InputTag("analyze","MuEt");
    tMuEta                     = edm::InputTag("analyze","MuEta");
    tMuGenE                    = edm::InputTag("analyze","MuGenE");
    tMuGenEta                  = edm::InputTag("analyze","MuGenEta");
    tMuGenGME                  = edm::InputTag("analyze","MuGenGME");
    tMuGenGMEta                = edm::InputTag("analyze","MuGenGMEta");
    tMuGenGMID                 = edm::InputTag("analyze","MuGenGMID");
    tMuGenGMPhi                = edm::InputTag("analyze","MuGenGMPhi");
    tMuGenGMPt                 = edm::InputTag("analyze","MuGenGMPt");
    tMuGenGMStatus             = edm::InputTag("analyze","MuGenGMStatus");
    tMuGenID                   = edm::InputTag("analyze","MuGenID");
    tMuGenME                   = edm::InputTag("analyze","MuGenME");
    tMuGenMEta                 = edm::InputTag("analyze","MuGenMEta");
    tMuGenMID                  = edm::InputTag("analyze","MuGenMID");
    tMuGenMPhi                 = edm::InputTag("analyze","MuGenMPhi");
    tMuGenMPt                  = edm::InputTag("analyze","MuGenMPt");
    tMuGenMStatus              = edm::InputTag("analyze","MuGenMStatus");
    tMuGenPhi                  = edm::InputTag("analyze","MuGenPhi");
    tMuGenPt                   = edm::InputTag("analyze","MuGenPt");
    tMuGenStatus               = edm::InputTag("analyze","MuGenStatus");
    tMuGood                    = edm::InputTag("analyze","MuGood");
    tMuInnerTkNChi2            = edm::InputTag("analyze","MuInnerTkNChi2");
    tMuInnerTkPt               = edm::InputTag("analyze","MuInnerTkPt");
    tMuIsAllArbitrated         = edm::InputTag("analyze","MuIsAllArbitrated");
    tMuIsAllStaMuons           = edm::InputTag("analyze","MuIsAllStaMuons");
    tMuIsAllTrkMuons           = edm::InputTag("analyze","MuIsAllTrkMuons");
    tMuIsGMPT                  = edm::InputTag("analyze","MuIsGMPT");
    tMuIsGMStaChiComp          = edm::InputTag("analyze","MuIsGMStaChiComp");
    tMuIsGMTkChiComp           = edm::InputTag("analyze","MuIsGMTkChiComp");
    tMuIsGMTkKinkTight         = edm::InputTag("analyze","MuIsGMTkKinkTight");
    tMuIsGlobalMuon            = edm::InputTag("analyze","MuIsGlobalMuon");
    tMuIsIso                   = edm::InputTag("analyze","MuIsIso");
    tMuIsPFMuon                = edm::InputTag("analyze","MuIsPFMuon");
    tMuIsTM2DCompLoose         = edm::InputTag("analyze","MuIsTM2DCompLoose");
    tMuIsTM2DCompTight         = edm::InputTag("analyze","MuIsTM2DCompTight");
    tMuIsTMLSAngLoose          = edm::InputTag("analyze","MuIsTMLSAngLoose");
    tMuIsTMLSAngTight          = edm::InputTag("analyze","MuIsTMLSAngTight");
    tMuIsTMLSLoose             = edm::InputTag("analyze","MuIsTMLSLoose");
    tMuIsTMLSOptLowPtLoose     = edm::InputTag("analyze","MuIsTMLSOptLowPtLoose");
    tMuIsTMLSTight             = edm::InputTag("analyze","MuIsTMLSTight");
    tMuIsTMOneStationAngLoose  = edm::InputTag("analyze","MuIsTMOneStationAngLoose");
    tMuIsTMOneStationAngTight  = edm::InputTag("analyze","MuIsTMOneStationAngTight");
    tMuIsTMOneStationLoose     = edm::InputTag("analyze","MuIsTMOneStationLoose");
    tMuIsTMOneStationTight     = edm::InputTag("analyze","MuIsTMOneStationTight");
    tMuIsTrackerMuon           = edm::InputTag("analyze","MuIsTrackerMuon");
    tMuIsTrkMuonArbitrated     = edm::InputTag("analyze","MuIsTrkMuonArbitrated");
    tMuIso03EMVetoEt           = edm::InputTag("analyze","MuIso03EMVetoEt");
    tMuIso03EmEt               = edm::InputTag("analyze","MuIso03EmEt");
    tMuIso03HadEt              = edm::InputTag("analyze","MuIso03HadEt");
    tMuIso03HadVetoEt          = edm::InputTag("analyze","MuIso03HadVetoEt");
    tMuIso03SumPt              = edm::InputTag("analyze","MuIso03SumPt");
    tMuIso05EmEt               = edm::InputTag("analyze","MuIso05EmEt");
    tMuIso05HadEt              = edm::InputTag("analyze","MuIso05HadEt");
    tMuIso05SumPt              = edm::InputTag("analyze","MuIso05SumPt");
    tMuJESCorrMET              = edm::InputTag("analyze","MuJESCorrMET");
    tMuJESCorrMETphi           = edm::InputTag("analyze","MuJESCorrMETphi");
    tMuJESCorrMETpx            = edm::InputTag("analyze","MuJESCorrMETpx");
    tMuJESCorrMETpy            = edm::InputTag("analyze","MuJESCorrMETpy");
    tMuNChambers               = edm::InputTag("analyze","MuNChambers");
    tMuNChi2                   = edm::InputTag("analyze","MuNChi2");
    tMuNGlHits                 = edm::InputTag("analyze","MuNGlHits");
    tMuNMatches                = edm::InputTag("analyze","MuNMatches");
    tMuNMuHits                 = edm::InputTag("analyze","MuNMuHits");
    tMuNPxHits                 = edm::InputTag("analyze","MuNPxHits");
    tMuNSiLayers               = edm::InputTag("analyze","MuNSiLayers");
    tMuNTkHits                 = edm::InputTag("analyze","MuNTkHits");
    tMuPfIsoR03ChHad           = edm::InputTag("analyze","MuPfIsoR03ChHad");
    tMuPfIsoR03NeHadHighThresh = edm::InputTag("analyze","MuPfIsoR03NeHadHighThresh");
    tMuPfIsoR03PhotonHighThresh = edm::InputTag("analyze","MuPfIsoR03PhotonHighThresh");
    tMuPfIsoR03SumPUPt         = edm::InputTag("analyze","MuPfIsoR03SumPUPt");
    tMuPfIsoR04ChHad           = edm::InputTag("analyze","MuPfIsoR04ChHad");
    tMuPfIsoR04NeHadHighThresh = edm::InputTag("analyze","MuPfIsoR04NeHadHighThresh");
    tMuPfIsoR04PhotonHighThresh = edm::InputTag("analyze","MuPfIsoR04PhotonHighThresh");
    tMuPfIsoR04SumPUPt         = edm::InputTag("analyze","MuPfIsoR04SumPUPt");
    tMuPhi                     = edm::InputTag("analyze","MuPhi");
    tMuPt                      = edm::InputTag("analyze","MuPt");
    tMuPtE                     = edm::InputTag("analyze","MuPtE");
    tMuPx                      = edm::InputTag("analyze","MuPx");
    tMuPy                      = edm::InputTag("analyze","MuPy");
    tMuPz                      = edm::InputTag("analyze","MuPz");
    tMuRelIso03                = edm::InputTag("analyze","MuRelIso03");
    tMuSegmComp                = edm::InputTag("analyze","MuSegmComp");
    tMuTkD0E                   = edm::InputTag("analyze","MuTkD0E");
    tMuTkDzE                   = edm::InputTag("analyze","MuTkDzE");
    tMuTkPtE                   = edm::InputTag("analyze","MuTkPtE");
    tMumuonPFIsoChHad03        = edm::InputTag("analyze","MumuonPFIsoChHad03");
    tMumuonPFIsoChHad04        = edm::InputTag("analyze","MumuonPFIsoChHad04");
    tMumuonPFIsoNHad03         = edm::InputTag("analyze","MumuonPFIsoNHad03");
    tMumuonPFIsoNHad04         = edm::InputTag("analyze","MumuonPFIsoNHad04");
    tMumuonPFIsoPhoton03       = edm::InputTag("analyze","MumuonPFIsoPhoton03");
    tMumuonPFIsoPhoton04       = edm::InputTag("analyze","MumuonPFIsoPhoton04");
    tMumuonRadPFIsoChHad03     = edm::InputTag("analyze","MumuonRadPFIsoChHad03");
    tMumuonRadPFIsoChHad04     = edm::InputTag("analyze","MumuonRadPFIsoChHad04");
    tMumuonRadPFIsoNHad03      = edm::InputTag("analyze","MumuonRadPFIsoNHad03");
    tMumuonRadPFIsoNHad04      = edm::InputTag("analyze","MumuonRadPFIsoNHad04");
    tMumuonRadPFIsoPhoton03    = edm::InputTag("analyze","MumuonRadPFIsoPhoton03");
    tMumuonRadPFIsoPhoton04    = edm::InputTag("analyze","MumuonRadPFIsoPhoton04");
    tNCaloTowers               = edm::InputTag("analyze","NCaloTowers");
    tNEBhits                   = edm::InputTag("analyze","NEBhits");
    tNEles                     = edm::InputTag("analyze","NEles");
    tNElesTot                  = edm::InputTag("analyze","NElesTot");
    tNGMus                     = edm::InputTag("analyze","NGMus");
    tNGenJets                  = edm::InputTag("analyze","NGenJets");
    tNGenLeptons               = edm::InputTag("analyze","NGenLeptons");
    tNGenPhotons               = edm::InputTag("analyze","NGenPhotons");
    tNHLTObjs                  = edm::InputTag("analyze","NHLTObjs");
    tNJets                     = edm::InputTag("analyze","NJets");
    tNJetsTot                  = edm::InputTag("analyze","NJetsTot");
    tNMus                      = edm::InputTag("analyze","NMus");
    tNMusTot                   = edm::InputTag("analyze","NMusTot");
    tNPdfs                     = edm::InputTag("analyze","NPdfs");
    tNPhotons                  = edm::InputTag("analyze","NPhotons");
    tNPhotonsTot               = edm::InputTag("analyze","NPhotonsTot");
    tNSuperClusters            = edm::InputTag("analyze","NSuperClusters");
    tNTMus                     = edm::InputTag("analyze","NTMus");
    tNTracks                   = edm::InputTag("analyze","NTracks");
    tNTracksTot                = edm::InputTag("analyze","NTracksTot");
    tNVrtx                     = edm::InputTag("analyze","NVrtx");
    tNconv                     = edm::InputTag("analyze","Nconv");
    tPDFID1                    = edm::InputTag("analyze","PDFID1");
    tPDFID2                    = edm::InputTag("analyze","PDFID2");
    tPDFScalePDF               = edm::InputTag("analyze","PDFScalePDF");
    tPDFx1                     = edm::InputTag("analyze","PDFx1");
    tPDFx2                     = edm::InputTag("analyze","PDFx2");
    tPDFxPDF1                  = edm::InputTag("analyze","PDFxPDF1");
    tPDFxPDF2                  = edm::InputTag("analyze","PDFxPDF2");
    tPF2PAT2JArea              = edm::InputTag("analyze","PF2PAT2JArea");
    tPF2PAT2JChEmfrac          = edm::InputTag("analyze","PF2PAT2JChEmfrac");
    tPF2PAT2JChHadfrac         = edm::InputTag("analyze","PF2PAT2JChHadfrac");
    tPF2PAT2JChMufrac          = edm::InputTag("analyze","PF2PAT2JChMufrac");
    tPF2PAT2JChMult            = edm::InputTag("analyze","PF2PAT2JChMult");
    tPF2PAT2JE                 = edm::InputTag("analyze","PF2PAT2JE");
    tPF2PAT2JEt                = edm::InputTag("analyze","PF2PAT2JEt");
    tPF2PAT2JEta               = edm::InputTag("analyze","PF2PAT2JEta");
    tPF2PAT2JFlavour           = edm::InputTag("analyze","PF2PAT2JFlavour");
    tPF2PAT2JHFEMfrac          = edm::InputTag("analyze","PF2PAT2JHFEMfrac");
    tPF2PAT2JHFHadfrac         = edm::InputTag("analyze","PF2PAT2JHFHadfrac");
    tPF2PAT2JIDLoose           = edm::InputTag("analyze","PF2PAT2JIDLoose");
    tPF2PAT2JL1FastJetScale    = edm::InputTag("analyze","PF2PAT2JL1FastJetScale");
    tPF2PAT2JNConstituents     = edm::InputTag("analyze","PF2PAT2JNConstituents");
    tPF2PAT2JNeuEmfrac         = edm::InputTag("analyze","PF2PAT2JNeuEmfrac");
    tPF2PAT2JNeuHadfrac        = edm::InputTag("analyze","PF2PAT2JNeuHadfrac");
    tPF2PAT2JNeuMult           = edm::InputTag("analyze","PF2PAT2JNeuMult");
    tPF2PAT2JPhi               = edm::InputTag("analyze","PF2PAT2JPhi");
    tPF2PAT2JPhofrac           = edm::InputTag("analyze","PF2PAT2JPhofrac");
    tPF2PAT2JPt                = edm::InputTag("analyze","PF2PAT2JPt");
    tPF2PAT2JPx                = edm::InputTag("analyze","PF2PAT2JPx");
    tPF2PAT2JPy                = edm::InputTag("analyze","PF2PAT2JPy");
    tPF2PAT2JPz                = edm::InputTag("analyze","PF2PAT2JPz");
    tPF2PAT2JScale             = edm::InputTag("analyze","PF2PAT2JScale");
    tPF2PAT2JcombinedSecondaryVertexBJetTags = edm::InputTag("analyze","PF2PAT2JcombinedSecondaryVertexBJetTags");
    tPF2PAT2JcombinedSecondaryVertexMVABJetTags = edm::InputTag("analyze","PF2PAT2JcombinedSecondaryVertexMVABJetTags");
    tPF2PAT2JjetBProbabilityBJetTags = edm::InputTag("analyze","PF2PAT2JjetBProbabilityBJetTags");
    tPF2PAT2JjetProbabilityBJetTags = edm::InputTag("analyze","PF2PAT2JjetProbabilityBJetTags");
    tPF2PAT2JsimpleSecondaryVertexHighEffBJetTags = edm::InputTag("analyze","PF2PAT2JsimpleSecondaryVertexHighEffBJetTags");
    tPF2PAT2JsimpleSecondaryVertexHighPurBJetTags = edm::InputTag("analyze","PF2PAT2JsimpleSecondaryVertexHighPurBJetTags");
    tPF2PAT2JtrackCountingHighEffBJetTags = edm::InputTag("analyze","PF2PAT2JtrackCountingHighEffBJetTags");
    tPF2PAT2JtrackCountingHighPurBJetTags = edm::InputTag("analyze","PF2PAT2JtrackCountingHighPurBJetTags");
    tPF2PAT2NJets              = edm::InputTag("analyze","PF2PAT2NJets");
    tPF2PAT3JArea              = edm::InputTag("analyze","PF2PAT3JArea");
    tPF2PAT3JChEmfrac          = edm::InputTag("analyze","PF2PAT3JChEmfrac");
    tPF2PAT3JChHadfrac         = edm::InputTag("analyze","PF2PAT3JChHadfrac");
    tPF2PAT3JChMufrac          = edm::InputTag("analyze","PF2PAT3JChMufrac");
    tPF2PAT3JChMult            = edm::InputTag("analyze","PF2PAT3JChMult");
    tPF2PAT3JE                 = edm::InputTag("analyze","PF2PAT3JE");
    tPF2PAT3JEt                = edm::InputTag("analyze","PF2PAT3JEt");
    tPF2PAT3JEta               = edm::InputTag("analyze","PF2PAT3JEta");
    tPF2PAT3JFlavour           = edm::InputTag("analyze","PF2PAT3JFlavour");
    tPF2PAT3JHFEMfrac          = edm::InputTag("analyze","PF2PAT3JHFEMfrac");
    tPF2PAT3JHFHadfrac         = edm::InputTag("analyze","PF2PAT3JHFHadfrac");
    tPF2PAT3JIDLoose           = edm::InputTag("analyze","PF2PAT3JIDLoose");
    tPF2PAT3JL1FastJetScale    = edm::InputTag("analyze","PF2PAT3JL1FastJetScale");
    tPF2PAT3JNConstituents     = edm::InputTag("analyze","PF2PAT3JNConstituents");
    tPF2PAT3JNeuEmfrac         = edm::InputTag("analyze","PF2PAT3JNeuEmfrac");
    tPF2PAT3JNeuHadfrac        = edm::InputTag("analyze","PF2PAT3JNeuHadfrac");
    tPF2PAT3JNeuMult           = edm::InputTag("analyze","PF2PAT3JNeuMult");
    tPF2PAT3JPhi               = edm::InputTag("analyze","PF2PAT3JPhi");
    tPF2PAT3JPhofrac           = edm::InputTag("analyze","PF2PAT3JPhofrac");
    tPF2PAT3JPt                = edm::InputTag("analyze","PF2PAT3JPt");
    tPF2PAT3JPx                = edm::InputTag("analyze","PF2PAT3JPx");
    tPF2PAT3JPy                = edm::InputTag("analyze","PF2PAT3JPy");
    tPF2PAT3JPz                = edm::InputTag("analyze","PF2PAT3JPz");
    tPF2PAT3JScale             = edm::InputTag("analyze","PF2PAT3JScale");
    tPF2PAT3JcombinedSecondaryVertexBJetTags = edm::InputTag("analyze","PF2PAT3JcombinedSecondaryVertexBJetTags");
    tPF2PAT3JcombinedSecondaryVertexMVABJetTags = edm::InputTag("analyze","PF2PAT3JcombinedSecondaryVertexMVABJetTags");
    tPF2PAT3JjetBProbabilityBJetTags = edm::InputTag("analyze","PF2PAT3JjetBProbabilityBJetTags");
    tPF2PAT3JjetProbabilityBJetTags = edm::InputTag("analyze","PF2PAT3JjetProbabilityBJetTags");
    tPF2PAT3JsimpleSecondaryVertexHighEffBJetTags = edm::InputTag("analyze","PF2PAT3JsimpleSecondaryVertexHighEffBJetTags");
    tPF2PAT3JsimpleSecondaryVertexHighPurBJetTags = edm::InputTag("analyze","PF2PAT3JsimpleSecondaryVertexHighPurBJetTags");
    tPF2PAT3JtrackCountingHighEffBJetTags = edm::InputTag("analyze","PF2PAT3JtrackCountingHighEffBJetTags");
    tPF2PAT3JtrackCountingHighPurBJetTags = edm::InputTag("analyze","PF2PAT3JtrackCountingHighPurBJetTags");
    tPF2PAT3NJets              = edm::InputTag("analyze","PF2PAT3NJets");
    tPF2PATAntiIsoJArea        = edm::InputTag("analyze","PF2PATAntiIsoJArea");
    tPF2PATAntiIsoJChEmfrac    = edm::InputTag("analyze","PF2PATAntiIsoJChEmfrac");
    tPF2PATAntiIsoJChHadfrac   = edm::InputTag("analyze","PF2PATAntiIsoJChHadfrac");
    tPF2PATAntiIsoJChMufrac    = edm::InputTag("analyze","PF2PATAntiIsoJChMufrac");
    tPF2PATAntiIsoJChMult      = edm::InputTag("analyze","PF2PATAntiIsoJChMult");
    tPF2PATAntiIsoJE           = edm::InputTag("analyze","PF2PATAntiIsoJE");
    tPF2PATAntiIsoJEt          = edm::InputTag("analyze","PF2PATAntiIsoJEt");
    tPF2PATAntiIsoJEta         = edm::InputTag("analyze","PF2PATAntiIsoJEta");
    tPF2PATAntiIsoJFlavour     = edm::InputTag("analyze","PF2PATAntiIsoJFlavour");
    tPF2PATAntiIsoJHFEMfrac    = edm::InputTag("analyze","PF2PATAntiIsoJHFEMfrac");
    tPF2PATAntiIsoJHFHadfrac   = edm::InputTag("analyze","PF2PATAntiIsoJHFHadfrac");
    tPF2PATAntiIsoJIDLoose     = edm::InputTag("analyze","PF2PATAntiIsoJIDLoose");
    tPF2PATAntiIsoJL1FastJetScale = edm::InputTag("analyze","PF2PATAntiIsoJL1FastJetScale");
    tPF2PATAntiIsoJNConstituents = edm::InputTag("analyze","PF2PATAntiIsoJNConstituents");
    tPF2PATAntiIsoJNeuEmfrac   = edm::InputTag("analyze","PF2PATAntiIsoJNeuEmfrac");
    tPF2PATAntiIsoJNeuHadfrac  = edm::InputTag("analyze","PF2PATAntiIsoJNeuHadfrac");
    tPF2PATAntiIsoJNeuMult     = edm::InputTag("analyze","PF2PATAntiIsoJNeuMult");
    tPF2PATAntiIsoJPhi         = edm::InputTag("analyze","PF2PATAntiIsoJPhi");
    tPF2PATAntiIsoJPhofrac     = edm::InputTag("analyze","PF2PATAntiIsoJPhofrac");
    tPF2PATAntiIsoJPt          = edm::InputTag("analyze","PF2PATAntiIsoJPt");
    tPF2PATAntiIsoJPx          = edm::InputTag("analyze","PF2PATAntiIsoJPx");
    tPF2PATAntiIsoJPy          = edm::InputTag("analyze","PF2PATAntiIsoJPy");
    tPF2PATAntiIsoJPz          = edm::InputTag("analyze","PF2PATAntiIsoJPz");
    tPF2PATAntiIsoJScale       = edm::InputTag("analyze","PF2PATAntiIsoJScale");
    tPF2PATAntiIsoJcombinedSecondaryVertexBJetTags = edm::InputTag("analyze","PF2PATAntiIsoJcombinedSecondaryVertexBJetTags");
    tPF2PATAntiIsoJcombinedSecondaryVertexMVABJetTags = edm::InputTag("analyze","PF2PATAntiIsoJcombinedSecondaryVertexMVABJetTags");
    tPF2PATAntiIsoJjetBProbabilityBJetTags = edm::InputTag("analyze","PF2PATAntiIsoJjetBProbabilityBJetTags");
    tPF2PATAntiIsoJjetProbabilityBJetTags = edm::InputTag("analyze","PF2PATAntiIsoJjetProbabilityBJetTags");
    tPF2PATAntiIsoJsimpleSecondaryVertexHighEffBJetTags = edm::InputTag("analyze","PF2PATAntiIsoJsimpleSecondaryVertexHighEffBJetTags");
    tPF2PATAntiIsoJsimpleSecondaryVertexHighPurBJetTags = edm::InputTag("analyze","PF2PATAntiIsoJsimpleSecondaryVertexHighPurBJetTags");
    tPF2PATAntiIsoJtrackCountingHighEffBJetTags = edm::InputTag("analyze","PF2PATAntiIsoJtrackCountingHighEffBJetTags");
    tPF2PATAntiIsoJtrackCountingHighPurBJetTags = edm::InputTag("analyze","PF2PATAntiIsoJtrackCountingHighPurBJetTags");
    tPF2PATAntiIsoNJets        = edm::InputTag("analyze","PF2PATAntiIsoNJets");
    tPFMET                     = edm::InputTag("analyze","PFMET");
    tPFMETPAT                  = edm::InputTag("analyze","PFMETPAT");
    tPFMETPATSignificance      = edm::InputTag("analyze","PFMETPATSignificance");
    tPFMETPATphi               = edm::InputTag("analyze","PFMETPATphi");
    tPFMETPATpx                = edm::InputTag("analyze","PFMETPATpx");
    tPFMETPATpy                = edm::InputTag("analyze","PFMETPATpy");
    tPFMETSignificance         = edm::InputTag("analyze","PFMETSignificance");
    tPFMETphi                  = edm::InputTag("analyze","PFMETphi");
    tPFMETpx                   = edm::InputTag("analyze","PFMETpx");
    tPFMETpy                   = edm::InputTag("analyze","PFMETpy");
    tPFSumEt                   = edm::InputTag("analyze","PFSumEt");
    tPUOOTnumInteractionsEarly = edm::InputTag("analyze","PUOOTnumInteractionsEarly");
    tPUOOTnumInteractionsLate  = edm::InputTag("analyze","PUOOTnumInteractionsLate");
    tPUWeightInTime            = edm::InputTag("analyze","PUWeightInTime");
    tPUWeightTotal             = edm::InputTag("analyze","PUWeightTotal");
    tPUnTrksHighPt             = edm::InputTag("analyze","PUnTrksHighPt");
    tPUnTrksLowPt              = edm::InputTag("analyze","PUnTrksLowPt");
    tPUnumFilled               = edm::InputTag("analyze","PUnumFilled");
    tPUnumInteractions         = edm::InputTag("analyze","PUnumInteractions");
    tPUnumTrueInteractions     = edm::InputTag("analyze","PUnumTrueInteractions");
    tPUsumPtHighPt             = edm::InputTag("analyze","PUsumPtHighPt");
    tPUsumPtLowPt              = edm::InputTag("analyze","PUsumPtLowPt");
    tPUzPositions              = edm::InputTag("analyze","PUzPositions");
    tPfEl2Charge               = edm::InputTag("analyze","PfEl2Charge");
    tPfEl2ChargedHadronIso     = edm::InputTag("analyze","PfEl2ChargedHadronIso");
    tPfEl2E                    = edm::InputTag("analyze","PfEl2E");
    tPfEl2Et                   = edm::InputTag("analyze","PfEl2Et");
    tPfEl2Eta                  = edm::InputTag("analyze","PfEl2Eta");
    tPfEl2ID80                 = edm::InputTag("analyze","PfEl2ID80");
    tPfEl2ID85                 = edm::InputTag("analyze","PfEl2ID85");
    tPfEl2ID90                 = edm::InputTag("analyze","PfEl2ID90");
    tPfEl2ID95                 = edm::InputTag("analyze","PfEl2ID95");
    tPfEl2MaxLepExc            = edm::InputTag("analyze","PfEl2MaxLepExc");
    tPfEl2NObjs                = edm::InputTag("analyze","PfEl2NObjs");
    tPfEl2NObjsTot             = edm::InputTag("analyze","PfEl2NObjsTot");
    tPfEl2NeutralHadronIso     = edm::InputTag("analyze","PfEl2NeutralHadronIso");
    tPfEl2ParticleIso          = edm::InputTag("analyze","PfEl2ParticleIso");
    tPfEl2Phi                  = edm::InputTag("analyze","PfEl2Phi");
    tPfEl2PhotonIso            = edm::InputTag("analyze","PfEl2PhotonIso");
    tPfEl2Pt                   = edm::InputTag("analyze","PfEl2Pt");
    tPfEl2Px                   = edm::InputTag("analyze","PfEl2Px");
    tPfEl2Py                   = edm::InputTag("analyze","PfEl2Py");
    tPfEl2Pz                   = edm::InputTag("analyze","PfEl2Pz");
    tPfEl3Charge               = edm::InputTag("analyze","PfEl3Charge");
    tPfEl3ChargedHadronIso     = edm::InputTag("analyze","PfEl3ChargedHadronIso");
    tPfEl3E                    = edm::InputTag("analyze","PfEl3E");
    tPfEl3Et                   = edm::InputTag("analyze","PfEl3Et");
    tPfEl3Eta                  = edm::InputTag("analyze","PfEl3Eta");
    tPfEl3ID80                 = edm::InputTag("analyze","PfEl3ID80");
    tPfEl3ID85                 = edm::InputTag("analyze","PfEl3ID85");
    tPfEl3ID90                 = edm::InputTag("analyze","PfEl3ID90");
    tPfEl3ID95                 = edm::InputTag("analyze","PfEl3ID95");
    tPfEl3MaxLepExc            = edm::InputTag("analyze","PfEl3MaxLepExc");
    tPfEl3NObjs                = edm::InputTag("analyze","PfEl3NObjs");
    tPfEl3NObjsTot             = edm::InputTag("analyze","PfEl3NObjsTot");
    tPfEl3NeutralHadronIso     = edm::InputTag("analyze","PfEl3NeutralHadronIso");
    tPfEl3ParticleIso          = edm::InputTag("analyze","PfEl3ParticleIso");
    tPfEl3Phi                  = edm::InputTag("analyze","PfEl3Phi");
    tPfEl3PhotonIso            = edm::InputTag("analyze","PfEl3PhotonIso");
    tPfEl3Pt                   = edm::InputTag("analyze","PfEl3Pt");
    tPfEl3Px                   = edm::InputTag("analyze","PfEl3Px");
    tPfEl3Py                   = edm::InputTag("analyze","PfEl3Py");
    tPfEl3Pz                   = edm::InputTag("analyze","PfEl3Pz");
    tPfElAntiIsoCharge         = edm::InputTag("analyze","PfElAntiIsoCharge");
    tPfElAntiIsoChargedHadronIso = edm::InputTag("analyze","PfElAntiIsoChargedHadronIso");
    tPfElAntiIsoE              = edm::InputTag("analyze","PfElAntiIsoE");
    tPfElAntiIsoEt             = edm::InputTag("analyze","PfElAntiIsoEt");
    tPfElAntiIsoEta            = edm::InputTag("analyze","PfElAntiIsoEta");
    tPfElAntiIsoID80           = edm::InputTag("analyze","PfElAntiIsoID80");
    tPfElAntiIsoID85           = edm::InputTag("analyze","PfElAntiIsoID85");
    tPfElAntiIsoID90           = edm::InputTag("analyze","PfElAntiIsoID90");
    tPfElAntiIsoID95           = edm::InputTag("analyze","PfElAntiIsoID95");
    tPfElAntiIsoMaxLepExc      = edm::InputTag("analyze","PfElAntiIsoMaxLepExc");
    tPfElAntiIsoNObjs          = edm::InputTag("analyze","PfElAntiIsoNObjs");
    tPfElAntiIsoNObjsTot       = edm::InputTag("analyze","PfElAntiIsoNObjsTot");
    tPfElAntiIsoNeutralHadronIso = edm::InputTag("analyze","PfElAntiIsoNeutralHadronIso");
    tPfElAntiIsoParticleIso    = edm::InputTag("analyze","PfElAntiIsoParticleIso");
    tPfElAntiIsoPhi            = edm::InputTag("analyze","PfElAntiIsoPhi");
    tPfElAntiIsoPhotonIso      = edm::InputTag("analyze","PfElAntiIsoPhotonIso");
    tPfElAntiIsoPt             = edm::InputTag("analyze","PfElAntiIsoPt");
    tPfElAntiIsoPx             = edm::InputTag("analyze","PfElAntiIsoPx");
    tPfElAntiIsoPy             = edm::InputTag("analyze","PfElAntiIsoPy");
    tPfElAntiIsoPz             = edm::InputTag("analyze","PfElAntiIsoPz");
    tPfMu2Charge               = edm::InputTag("analyze","PfMu2Charge");
    tPfMu2ChargedHadronIso     = edm::InputTag("analyze","PfMu2ChargedHadronIso");
    tPfMu2E                    = edm::InputTag("analyze","PfMu2E");
    tPfMu2Et                   = edm::InputTag("analyze","PfMu2Et");
    tPfMu2Eta                  = edm::InputTag("analyze","PfMu2Eta");
    tPfMu2MaxLepExc            = edm::InputTag("analyze","PfMu2MaxLepExc");
    tPfMu2NMatches             = edm::InputTag("analyze","PfMu2NMatches");
    tPfMu2NObjs                = edm::InputTag("analyze","PfMu2NObjs");
    tPfMu2NObjsTot             = edm::InputTag("analyze","PfMu2NObjsTot");
    tPfMu2NeutralHadronIso     = edm::InputTag("analyze","PfMu2NeutralHadronIso");
    tPfMu2ParticleIso          = edm::InputTag("analyze","PfMu2ParticleIso");
    tPfMu2Phi                  = edm::InputTag("analyze","PfMu2Phi");
    tPfMu2PhotonIso            = edm::InputTag("analyze","PfMu2PhotonIso");
    tPfMu2Pt                   = edm::InputTag("analyze","PfMu2Pt");
    tPfMu2PtErr                = edm::InputTag("analyze","PfMu2PtErr");
    tPfMu2Px                   = edm::InputTag("analyze","PfMu2Px");
    tPfMu2Py                   = edm::InputTag("analyze","PfMu2Py");
    tPfMu2Pz                   = edm::InputTag("analyze","PfMu2Pz");
    tPfMu3Charge               = edm::InputTag("analyze","PfMu3Charge");
    tPfMu3ChargedHadronIso     = edm::InputTag("analyze","PfMu3ChargedHadronIso");
    tPfMu3E                    = edm::InputTag("analyze","PfMu3E");
    tPfMu3Et                   = edm::InputTag("analyze","PfMu3Et");
    tPfMu3Eta                  = edm::InputTag("analyze","PfMu3Eta");
    tPfMu3MaxLepExc            = edm::InputTag("analyze","PfMu3MaxLepExc");
    tPfMu3NMatches             = edm::InputTag("analyze","PfMu3NMatches");
    tPfMu3NObjs                = edm::InputTag("analyze","PfMu3NObjs");
    tPfMu3NObjsTot             = edm::InputTag("analyze","PfMu3NObjsTot");
    tPfMu3NeutralHadronIso     = edm::InputTag("analyze","PfMu3NeutralHadronIso");
    tPfMu3ParticleIso          = edm::InputTag("analyze","PfMu3ParticleIso");
    tPfMu3Phi                  = edm::InputTag("analyze","PfMu3Phi");
    tPfMu3PhotonIso            = edm::InputTag("analyze","PfMu3PhotonIso");
    tPfMu3Pt                   = edm::InputTag("analyze","PfMu3Pt");
    tPfMu3PtErr                = edm::InputTag("analyze","PfMu3PtErr");
    tPfMu3Px                   = edm::InputTag("analyze","PfMu3Px");
    tPfMu3Py                   = edm::InputTag("analyze","PfMu3Py");
    tPfMu3Pz                   = edm::InputTag("analyze","PfMu3Pz");
    tPfMuAntiIsoCharge         = edm::InputTag("analyze","PfMuAntiIsoCharge");
    tPfMuAntiIsoChargedHadronIso = edm::InputTag("analyze","PfMuAntiIsoChargedHadronIso");
    tPfMuAntiIsoE              = edm::InputTag("analyze","PfMuAntiIsoE");
    tPfMuAntiIsoEt             = edm::InputTag("analyze","PfMuAntiIsoEt");
    tPfMuAntiIsoEta            = edm::InputTag("analyze","PfMuAntiIsoEta");
    tPfMuAntiIsoMaxLepExc      = edm::InputTag("analyze","PfMuAntiIsoMaxLepExc");
    tPfMuAntiIsoNMatches       = edm::InputTag("analyze","PfMuAntiIsoNMatches");
    tPfMuAntiIsoNObjs          = edm::InputTag("analyze","PfMuAntiIsoNObjs");
    tPfMuAntiIsoNObjsTot       = edm::InputTag("analyze","PfMuAntiIsoNObjsTot");
    tPfMuAntiIsoNeutralHadronIso = edm::InputTag("analyze","PfMuAntiIsoNeutralHadronIso");
    tPfMuAntiIsoParticleIso    = edm::InputTag("analyze","PfMuAntiIsoParticleIso");
    tPfMuAntiIsoPhi            = edm::InputTag("analyze","PfMuAntiIsoPhi");
    tPfMuAntiIsoPhotonIso      = edm::InputTag("analyze","PfMuAntiIsoPhotonIso");
    tPfMuAntiIsoPt             = edm::InputTag("analyze","PfMuAntiIsoPt");
    tPfMuAntiIsoPtErr          = edm::InputTag("analyze","PfMuAntiIsoPtErr");
    tPfMuAntiIsoPx             = edm::InputTag("analyze","PfMuAntiIsoPx");
    tPfMuAntiIsoPy             = edm::InputTag("analyze","PfMuAntiIsoPy");
    tPfMuAntiIsoPz             = edm::InputTag("analyze","PfMuAntiIsoPz");
    tPfTau2Charge              = edm::InputTag("analyze","PfTau2Charge");
    tPfTau2ChargedHadronIso    = edm::InputTag("analyze","PfTau2ChargedHadronIso");
    tPfTau2DecayMode           = edm::InputTag("analyze","PfTau2DecayMode");
    tPfTau2DecayModeFinding    = edm::InputTag("analyze","PfTau2DecayModeFinding");
    tPfTau2E                   = edm::InputTag("analyze","PfTau2E");
    tPfTau2EmFraction          = edm::InputTag("analyze","PfTau2EmFraction");
    tPfTau2Et                  = edm::InputTag("analyze","PfTau2Et");
    tPfTau2Eta                 = edm::InputTag("analyze","PfTau2Eta");
    tPfTau2JetEta              = edm::InputTag("analyze","PfTau2JetEta");
    tPfTau2JetMass             = edm::InputTag("analyze","PfTau2JetMass");
    tPfTau2JetPhi              = edm::InputTag("analyze","PfTau2JetPhi");
    tPfTau2JetPt               = edm::InputTag("analyze","PfTau2JetPt");
    tPfTau2LeadingNeuPt        = edm::InputTag("analyze","PfTau2LeadingNeuPt");
    tPfTau2LeadingTkEcalenergy = edm::InputTag("analyze","PfTau2LeadingTkEcalenergy");
    tPfTau2LeadingTkHcalenergy = edm::InputTag("analyze","PfTau2LeadingTkHcalenergy");
    tPfTau2LeadingTkPt         = edm::InputTag("analyze","PfTau2LeadingTkPt");
    tPfTau2LooseChargedIso     = edm::InputTag("analyze","PfTau2LooseChargedIso");
    tPfTau2LooseCombinedIsoDBSumPtCorr = edm::InputTag("analyze","PfTau2LooseCombinedIsoDBSumPtCorr");
    tPfTau2LooseElectronRejection = edm::InputTag("analyze","PfTau2LooseElectronRejection");
    tPfTau2LooseIso            = edm::InputTag("analyze","PfTau2LooseIso");
    tPfTau2LooseIsoDBSumPtCorr = edm::InputTag("analyze","PfTau2LooseIsoDBSumPtCorr");
    tPfTau2LooseMuonRejection  = edm::InputTag("analyze","PfTau2LooseMuonRejection");
    tPfTau2MaxLepExc           = edm::InputTag("analyze","PfTau2MaxLepExc");
    tPfTau2MediumChargedIso    = edm::InputTag("analyze","PfTau2MediumChargedIso");
    tPfTau2MediumCombinedIsoDBSumPtCorr = edm::InputTag("analyze","PfTau2MediumCombinedIsoDBSumPtCorr");
    tPfTau2MediumElectronRejection = edm::InputTag("analyze","PfTau2MediumElectronRejection");
    tPfTau2MediumIso           = edm::InputTag("analyze","PfTau2MediumIso");
    tPfTau2MediumIsoDBSumPtCorr = edm::InputTag("analyze","PfTau2MediumIsoDBSumPtCorr");
    tPfTau2NObjs               = edm::InputTag("analyze","PfTau2NObjs");
    tPfTau2NObjsTot            = edm::InputTag("analyze","PfTau2NObjsTot");
    tPfTau2NeutralHadronIso    = edm::InputTag("analyze","PfTau2NeutralHadronIso");
    tPfTau2NumChargedHadronsIsoCone = edm::InputTag("analyze","PfTau2NumChargedHadronsIsoCone");
    tPfTau2NumChargedHadronsSignalCone = edm::InputTag("analyze","PfTau2NumChargedHadronsSignalCone");
    tPfTau2NumNeutralHadronsIsoCone = edm::InputTag("analyze","PfTau2NumNeutralHadronsIsoCone");
    tPfTau2NumNeutralHadronsSignalCone = edm::InputTag("analyze","PfTau2NumNeutralHadronsSignalCone");
    tPfTau2NumParticlesIsolationCone = edm::InputTag("analyze","PfTau2NumParticlesIsolationCone");
    tPfTau2NumParticlesSignalCone = edm::InputTag("analyze","PfTau2NumParticlesSignalCone");
    tPfTau2NumPhotonsIsolationCone = edm::InputTag("analyze","PfTau2NumPhotonsIsolationCone");
    tPfTau2NumPhotonsSignalCone = edm::InputTag("analyze","PfTau2NumPhotonsSignalCone");
    tPfTau2ParticleIso         = edm::InputTag("analyze","PfTau2ParticleIso");
    tPfTau2Phi                 = edm::InputTag("analyze","PfTau2Phi");
    tPfTau2PhotonIso           = edm::InputTag("analyze","PfTau2PhotonIso");
    tPfTau2Pt                  = edm::InputTag("analyze","PfTau2Pt");
    tPfTau2PtSumChargedParticlesIsoCone = edm::InputTag("analyze","PfTau2PtSumChargedParticlesIsoCone");
    tPfTau2PtSumPhotonsIsoCone = edm::InputTag("analyze","PfTau2PtSumPhotonsIsoCone");
    tPfTau2Px                  = edm::InputTag("analyze","PfTau2Px");
    tPfTau2Py                  = edm::InputTag("analyze","PfTau2Py");
    tPfTau2Pz                  = edm::InputTag("analyze","PfTau2Pz");
    tPfTau2TightChargedIso     = edm::InputTag("analyze","PfTau2TightChargedIso");
    tPfTau2TightCombinedIsoDBSumPtCorr = edm::InputTag("analyze","PfTau2TightCombinedIsoDBSumPtCorr");
    tPfTau2TightElectronRejection = edm::InputTag("analyze","PfTau2TightElectronRejection");
    tPfTau2TightIso            = edm::InputTag("analyze","PfTau2TightIso");
    tPfTau2TightIsoDBSumPtCorr = edm::InputTag("analyze","PfTau2TightIsoDBSumPtCorr");
    tPfTau2TightMuonRejection  = edm::InputTag("analyze","PfTau2TightMuonRejection");
    tPfTau2VLooseChargedIso    = edm::InputTag("analyze","PfTau2VLooseChargedIso");
    tPfTau2VLooseCombinedIsoDBSumPtCorr = edm::InputTag("analyze","PfTau2VLooseCombinedIsoDBSumPtCorr");
    tPfTau2VLooseIso           = edm::InputTag("analyze","PfTau2VLooseIso");
    tPfTau2VLooseIsoDBSumPtCorr = edm::InputTag("analyze","PfTau2VLooseIsoDBSumPtCorr");
    tPfTau2Vz                  = edm::InputTag("analyze","PfTau2Vz");
    tPfTau3Charge              = edm::InputTag("analyze","PfTau3Charge");
    tPfTau3ChargedHadronIso    = edm::InputTag("analyze","PfTau3ChargedHadronIso");
    tPfTau3DecayMode           = edm::InputTag("analyze","PfTau3DecayMode");
    tPfTau3DecayModeFinding    = edm::InputTag("analyze","PfTau3DecayModeFinding");
    tPfTau3E                   = edm::InputTag("analyze","PfTau3E");
    tPfTau3EmFraction          = edm::InputTag("analyze","PfTau3EmFraction");
    tPfTau3Et                  = edm::InputTag("analyze","PfTau3Et");
    tPfTau3Eta                 = edm::InputTag("analyze","PfTau3Eta");
    tPfTau3JetEta              = edm::InputTag("analyze","PfTau3JetEta");
    tPfTau3JetMass             = edm::InputTag("analyze","PfTau3JetMass");
    tPfTau3JetPhi              = edm::InputTag("analyze","PfTau3JetPhi");
    tPfTau3JetPt               = edm::InputTag("analyze","PfTau3JetPt");
    tPfTau3LeadingNeuPt        = edm::InputTag("analyze","PfTau3LeadingNeuPt");
    tPfTau3LeadingTkEcalenergy = edm::InputTag("analyze","PfTau3LeadingTkEcalenergy");
    tPfTau3LeadingTkHcalenergy = edm::InputTag("analyze","PfTau3LeadingTkHcalenergy");
    tPfTau3LeadingTkPt         = edm::InputTag("analyze","PfTau3LeadingTkPt");
    tPfTau3LooseChargedIso     = edm::InputTag("analyze","PfTau3LooseChargedIso");
    tPfTau3LooseCombinedIsoDBSumPtCorr = edm::InputTag("analyze","PfTau3LooseCombinedIsoDBSumPtCorr");
    tPfTau3LooseElectronRejection = edm::InputTag("analyze","PfTau3LooseElectronRejection");
    tPfTau3LooseIso            = edm::InputTag("analyze","PfTau3LooseIso");
    tPfTau3LooseIsoDBSumPtCorr = edm::InputTag("analyze","PfTau3LooseIsoDBSumPtCorr");
    tPfTau3LooseMuonRejection  = edm::InputTag("analyze","PfTau3LooseMuonRejection");
    tPfTau3MaxLepExc           = edm::InputTag("analyze","PfTau3MaxLepExc");
    tPfTau3MediumChargedIso    = edm::InputTag("analyze","PfTau3MediumChargedIso");
    tPfTau3MediumCombinedIsoDBSumPtCorr = edm::InputTag("analyze","PfTau3MediumCombinedIsoDBSumPtCorr");
    tPfTau3MediumElectronRejection = edm::InputTag("analyze","PfTau3MediumElectronRejection");
    tPfTau3MediumIso           = edm::InputTag("analyze","PfTau3MediumIso");
    tPfTau3MediumIsoDBSumPtCorr = edm::InputTag("analyze","PfTau3MediumIsoDBSumPtCorr");
    tPfTau3NObjs               = edm::InputTag("analyze","PfTau3NObjs");
    tPfTau3NObjsTot            = edm::InputTag("analyze","PfTau3NObjsTot");
    tPfTau3NeutralHadronIso    = edm::InputTag("analyze","PfTau3NeutralHadronIso");
    tPfTau3NumChargedHadronsIsoCone = edm::InputTag("analyze","PfTau3NumChargedHadronsIsoCone");
    tPfTau3NumChargedHadronsSignalCone = edm::InputTag("analyze","PfTau3NumChargedHadronsSignalCone");
    tPfTau3NumNeutralHadronsIsoCone = edm::InputTag("analyze","PfTau3NumNeutralHadronsIsoCone");
    tPfTau3NumNeutralHadronsSignalCone = edm::InputTag("analyze","PfTau3NumNeutralHadronsSignalCone");
    tPfTau3NumParticlesIsolationCone = edm::InputTag("analyze","PfTau3NumParticlesIsolationCone");
    tPfTau3NumParticlesSignalCone = edm::InputTag("analyze","PfTau3NumParticlesSignalCone");
    tPfTau3NumPhotonsIsolationCone = edm::InputTag("analyze","PfTau3NumPhotonsIsolationCone");
    tPfTau3NumPhotonsSignalCone = edm::InputTag("analyze","PfTau3NumPhotonsSignalCone");
    tPfTau3ParticleIso         = edm::InputTag("analyze","PfTau3ParticleIso");
    tPfTau3Phi                 = edm::InputTag("analyze","PfTau3Phi");
    tPfTau3PhotonIso           = edm::InputTag("analyze","PfTau3PhotonIso");
    tPfTau3Pt                  = edm::InputTag("analyze","PfTau3Pt");
    tPfTau3PtSumChargedParticlesIsoCone = edm::InputTag("analyze","PfTau3PtSumChargedParticlesIsoCone");
    tPfTau3PtSumPhotonsIsoCone = edm::InputTag("analyze","PfTau3PtSumPhotonsIsoCone");
    tPfTau3Px                  = edm::InputTag("analyze","PfTau3Px");
    tPfTau3Py                  = edm::InputTag("analyze","PfTau3Py");
    tPfTau3Pz                  = edm::InputTag("analyze","PfTau3Pz");
    tPfTau3TightChargedIso     = edm::InputTag("analyze","PfTau3TightChargedIso");
    tPfTau3TightCombinedIsoDBSumPtCorr = edm::InputTag("analyze","PfTau3TightCombinedIsoDBSumPtCorr");
    tPfTau3TightElectronRejection = edm::InputTag("analyze","PfTau3TightElectronRejection");
    tPfTau3TightIso            = edm::InputTag("analyze","PfTau3TightIso");
    tPfTau3TightIsoDBSumPtCorr = edm::InputTag("analyze","PfTau3TightIsoDBSumPtCorr");
    tPfTau3TightMuonRejection  = edm::InputTag("analyze","PfTau3TightMuonRejection");
    tPfTau3VLooseChargedIso    = edm::InputTag("analyze","PfTau3VLooseChargedIso");
    tPfTau3VLooseCombinedIsoDBSumPtCorr = edm::InputTag("analyze","PfTau3VLooseCombinedIsoDBSumPtCorr");
    tPfTau3VLooseIso           = edm::InputTag("analyze","PfTau3VLooseIso");
    tPfTau3VLooseIsoDBSumPtCorr = edm::InputTag("analyze","PfTau3VLooseIsoDBSumPtCorr");
    tPfTau3Vz                  = edm::InputTag("analyze","PfTau3Vz");
    tPfTauAntiIsoCharge        = edm::InputTag("analyze","PfTauAntiIsoCharge");
    tPfTauAntiIsoChargedHadronIso = edm::InputTag("analyze","PfTauAntiIsoChargedHadronIso");
    tPfTauAntiIsoDecayMode     = edm::InputTag("analyze","PfTauAntiIsoDecayMode");
    tPfTauAntiIsoDecayModeFinding = edm::InputTag("analyze","PfTauAntiIsoDecayModeFinding");
    tPfTauAntiIsoE             = edm::InputTag("analyze","PfTauAntiIsoE");
    tPfTauAntiIsoEmFraction    = edm::InputTag("analyze","PfTauAntiIsoEmFraction");
    tPfTauAntiIsoEt            = edm::InputTag("analyze","PfTauAntiIsoEt");
    tPfTauAntiIsoEta           = edm::InputTag("analyze","PfTauAntiIsoEta");
    tPfTauAntiIsoJetEta        = edm::InputTag("analyze","PfTauAntiIsoJetEta");
    tPfTauAntiIsoJetMass       = edm::InputTag("analyze","PfTauAntiIsoJetMass");
    tPfTauAntiIsoJetPhi        = edm::InputTag("analyze","PfTauAntiIsoJetPhi");
    tPfTauAntiIsoJetPt         = edm::InputTag("analyze","PfTauAntiIsoJetPt");
    tPfTauAntiIsoLeadingNeuPt  = edm::InputTag("analyze","PfTauAntiIsoLeadingNeuPt");
    tPfTauAntiIsoLeadingTkEcalenergy = edm::InputTag("analyze","PfTauAntiIsoLeadingTkEcalenergy");
    tPfTauAntiIsoLeadingTkHcalenergy = edm::InputTag("analyze","PfTauAntiIsoLeadingTkHcalenergy");
    tPfTauAntiIsoLeadingTkPt   = edm::InputTag("analyze","PfTauAntiIsoLeadingTkPt");
    tPfTauAntiIsoLooseChargedIso = edm::InputTag("analyze","PfTauAntiIsoLooseChargedIso");
    tPfTauAntiIsoLooseCombinedIsoDBSumPtCorr = edm::InputTag("analyze","PfTauAntiIsoLooseCombinedIsoDBSumPtCorr");
    tPfTauAntiIsoLooseElectronRejection = edm::InputTag("analyze","PfTauAntiIsoLooseElectronRejection");
    tPfTauAntiIsoLooseIso      = edm::InputTag("analyze","PfTauAntiIsoLooseIso");
    tPfTauAntiIsoLooseIsoDBSumPtCorr = edm::InputTag("analyze","PfTauAntiIsoLooseIsoDBSumPtCorr");
    tPfTauAntiIsoLooseMuonRejection = edm::InputTag("analyze","PfTauAntiIsoLooseMuonRejection");
    tPfTauAntiIsoMaxLepExc     = edm::InputTag("analyze","PfTauAntiIsoMaxLepExc");
    tPfTauAntiIsoMediumChargedIso = edm::InputTag("analyze","PfTauAntiIsoMediumChargedIso");
    tPfTauAntiIsoMediumCombinedIsoDBSumPtCorr = edm::InputTag("analyze","PfTauAntiIsoMediumCombinedIsoDBSumPtCorr");
    tPfTauAntiIsoMediumElectronRejection = edm::InputTag("analyze","PfTauAntiIsoMediumElectronRejection");
    tPfTauAntiIsoMediumIso     = edm::InputTag("analyze","PfTauAntiIsoMediumIso");
    tPfTauAntiIsoMediumIsoDBSumPtCorr = edm::InputTag("analyze","PfTauAntiIsoMediumIsoDBSumPtCorr");
    tPfTauAntiIsoNObjs         = edm::InputTag("analyze","PfTauAntiIsoNObjs");
    tPfTauAntiIsoNObjsTot      = edm::InputTag("analyze","PfTauAntiIsoNObjsTot");
    tPfTauAntiIsoNeutralHadronIso = edm::InputTag("analyze","PfTauAntiIsoNeutralHadronIso");
    tPfTauAntiIsoNumChargedHadronsIsoCone = edm::InputTag("analyze","PfTauAntiIsoNumChargedHadronsIsoCone");
    tPfTauAntiIsoNumChargedHadronsSignalCone = edm::InputTag("analyze","PfTauAntiIsoNumChargedHadronsSignalCone");
    tPfTauAntiIsoNumNeutralHadronsIsoCone = edm::InputTag("analyze","PfTauAntiIsoNumNeutralHadronsIsoCone");
    tPfTauAntiIsoNumNeutralHadronsSignalCone = edm::InputTag("analyze","PfTauAntiIsoNumNeutralHadronsSignalCone");
    tPfTauAntiIsoNumParticlesIsolationCone = edm::InputTag("analyze","PfTauAntiIsoNumParticlesIsolationCone");
    tPfTauAntiIsoNumParticlesSignalCone = edm::InputTag("analyze","PfTauAntiIsoNumParticlesSignalCone");
    tPfTauAntiIsoNumPhotonsIsolationCone = edm::InputTag("analyze","PfTauAntiIsoNumPhotonsIsolationCone");
    tPfTauAntiIsoNumPhotonsSignalCone = edm::InputTag("analyze","PfTauAntiIsoNumPhotonsSignalCone");
    tPfTauAntiIsoParticleIso   = edm::InputTag("analyze","PfTauAntiIsoParticleIso");
    tPfTauAntiIsoPhi           = edm::InputTag("analyze","PfTauAntiIsoPhi");
    tPfTauAntiIsoPhotonIso     = edm::InputTag("analyze","PfTauAntiIsoPhotonIso");
    tPfTauAntiIsoPt            = edm::InputTag("analyze","PfTauAntiIsoPt");
    tPfTauAntiIsoPtSumChargedParticlesIsoCone = edm::InputTag("analyze","PfTauAntiIsoPtSumChargedParticlesIsoCone");
    tPfTauAntiIsoPtSumPhotonsIsoCone = edm::InputTag("analyze","PfTauAntiIsoPtSumPhotonsIsoCone");
    tPfTauAntiIsoPx            = edm::InputTag("analyze","PfTauAntiIsoPx");
    tPfTauAntiIsoPy            = edm::InputTag("analyze","PfTauAntiIsoPy");
    tPfTauAntiIsoPz            = edm::InputTag("analyze","PfTauAntiIsoPz");
    tPfTauAntiIsoTightChargedIso = edm::InputTag("analyze","PfTauAntiIsoTightChargedIso");
    tPfTauAntiIsoTightCombinedIsoDBSumPtCorr = edm::InputTag("analyze","PfTauAntiIsoTightCombinedIsoDBSumPtCorr");
    tPfTauAntiIsoTightElectronRejection = edm::InputTag("analyze","PfTauAntiIsoTightElectronRejection");
    tPfTauAntiIsoTightIso      = edm::InputTag("analyze","PfTauAntiIsoTightIso");
    tPfTauAntiIsoTightIsoDBSumPtCorr = edm::InputTag("analyze","PfTauAntiIsoTightIsoDBSumPtCorr");
    tPfTauAntiIsoTightMuonRejection = edm::InputTag("analyze","PfTauAntiIsoTightMuonRejection");
    tPfTauAntiIsoVLooseChargedIso = edm::InputTag("analyze","PfTauAntiIsoVLooseChargedIso");
    tPfTauAntiIsoVLooseCombinedIsoDBSumPtCorr = edm::InputTag("analyze","PfTauAntiIsoVLooseCombinedIsoDBSumPtCorr");
    tPfTauAntiIsoVLooseIso     = edm::InputTag("analyze","PfTauAntiIsoVLooseIso");
    tPfTauAntiIsoVLooseIsoDBSumPtCorr = edm::InputTag("analyze","PfTauAntiIsoVLooseIsoDBSumPtCorr");
    tPfTauAntiIsoVz            = edm::InputTag("analyze","PfTauAntiIsoVz");
    tPhoCaloPositionX          = edm::InputTag("analyze","PhoCaloPositionX");
    tPhoCaloPositionY          = edm::InputTag("analyze","PhoCaloPositionY");
    tPhoCaloPositionZ          = edm::InputTag("analyze","PhoCaloPositionZ");
    tPhoChargedHadronIso       = edm::InputTag("analyze","PhoChargedHadronIso");
    tPhoCone01ChargedHadronIsodR015dEta0pt0PFnoPU = edm::InputTag("analyze","PhoCone01ChargedHadronIsodR015dEta0pt0PFnoPU");
    tPhoCone01ChargedHadronIsodR015dEta0pt0dz0 = edm::InputTag("analyze","PhoCone01ChargedHadronIsodR015dEta0pt0dz0");
    tPhoCone01ChargedHadronIsodR015dEta0pt0dz1dxy01 = edm::InputTag("analyze","PhoCone01ChargedHadronIsodR015dEta0pt0dz1dxy01");
    tPhoCone01ChargedHadronIsodR0dEta0pt0PFnoPU = edm::InputTag("analyze","PhoCone01ChargedHadronIsodR0dEta0pt0PFnoPU");
    tPhoCone01ChargedHadronIsodR0dEta0pt0dz0 = edm::InputTag("analyze","PhoCone01ChargedHadronIsodR0dEta0pt0dz0");
    tPhoCone01ChargedHadronIsodR0dEta0pt0dz1dxy01 = edm::InputTag("analyze","PhoCone01ChargedHadronIsodR0dEta0pt0dz1dxy01");
    tPhoCone01NeutralHadronIsodR0dEta0pt0mvVtx = edm::InputTag("analyze","PhoCone01NeutralHadronIsodR0dEta0pt0mvVtx");
    tPhoCone01PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx = edm::InputTag("analyze","PhoCone01PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx");
    tPhoCone02ChargedHadronIsodR015dEta0pt0PFnoPU = edm::InputTag("analyze","PhoCone02ChargedHadronIsodR015dEta0pt0PFnoPU");
    tPhoCone02ChargedHadronIsodR015dEta0pt0dz0 = edm::InputTag("analyze","PhoCone02ChargedHadronIsodR015dEta0pt0dz0");
    tPhoCone02ChargedHadronIsodR015dEta0pt0dz1dxy01 = edm::InputTag("analyze","PhoCone02ChargedHadronIsodR015dEta0pt0dz1dxy01");
    tPhoCone02ChargedHadronIsodR0dEta0pt0PFnoPU = edm::InputTag("analyze","PhoCone02ChargedHadronIsodR0dEta0pt0PFnoPU");
    tPhoCone02ChargedHadronIsodR0dEta0pt0dz0 = edm::InputTag("analyze","PhoCone02ChargedHadronIsodR0dEta0pt0dz0");
    tPhoCone02ChargedHadronIsodR0dEta0pt0dz1dxy01 = edm::InputTag("analyze","PhoCone02ChargedHadronIsodR0dEta0pt0dz1dxy01");
    tPhoCone02NeutralHadronIsodR0dEta0pt0mvVtx = edm::InputTag("analyze","PhoCone02NeutralHadronIsodR0dEta0pt0mvVtx");
    tPhoCone02PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx = edm::InputTag("analyze","PhoCone02PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx");
    tPhoCone03ChargedHadronIsodR015dEta0pt0PFnoPU = edm::InputTag("analyze","PhoCone03ChargedHadronIsodR015dEta0pt0PFnoPU");
    tPhoCone03ChargedHadronIsodR015dEta0pt0dz0 = edm::InputTag("analyze","PhoCone03ChargedHadronIsodR015dEta0pt0dz0");
    tPhoCone03ChargedHadronIsodR015dEta0pt0dz1dxy01 = edm::InputTag("analyze","PhoCone03ChargedHadronIsodR015dEta0pt0dz1dxy01");
    tPhoCone03ChargedHadronIsodR0dEta0pt0PFnoPU = edm::InputTag("analyze","PhoCone03ChargedHadronIsodR0dEta0pt0PFnoPU");
    tPhoCone03ChargedHadronIsodR0dEta0pt0dz0 = edm::InputTag("analyze","PhoCone03ChargedHadronIsodR0dEta0pt0dz0");
    tPhoCone03ChargedHadronIsodR0dEta0pt0dz1dxy01 = edm::InputTag("analyze","PhoCone03ChargedHadronIsodR0dEta0pt0dz1dxy01");
    tPhoCone03NeutralHadronIsodR0dEta0pt0mvVtx = edm::InputTag("analyze","PhoCone03NeutralHadronIsodR0dEta0pt0mvVtx");
    tPhoCone03PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx = edm::InputTag("analyze","PhoCone03PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx");
    tPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPU = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR015dEta0pt0PFnoPU");
    tPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPUold = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR015dEta0pt0PFnoPUold");
    tPhoCone04ChargedHadronIsodR015dEta0pt0dz0 = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR015dEta0pt0dz0");
    tPhoCone04ChargedHadronIsodR015dEta0pt0dz0old = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR015dEta0pt0dz0old");
    tPhoCone04ChargedHadronIsodR015dEta0pt0dz1dxy01 = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR015dEta0pt0dz1dxy01");
    tPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPU = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR0dEta0pt0PFnoPU");
    tPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPUold = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR0dEta0pt0PFnoPUold");
    tPhoCone04ChargedHadronIsodR0dEta0pt0dz0 = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR0dEta0pt0dz0");
    tPhoCone04ChargedHadronIsodR0dEta0pt0dz0old = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR0dEta0pt0dz0old");
    tPhoCone04ChargedHadronIsodR0dEta0pt0dz1dxy01 = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR0dEta0pt0dz1dxy01");
    tPhoCone04NeutralHadronIsodR0dEta0pt0 = edm::InputTag("analyze","PhoCone04NeutralHadronIsodR0dEta0pt0");
    tPhoCone04NeutralHadronIsodR0dEta0pt0mvVtx = edm::InputTag("analyze","PhoCone04NeutralHadronIsodR0dEta0pt0mvVtx");
    tPhoCone04NeutralHadronIsodR0dEta0pt0nocracks = edm::InputTag("analyze","PhoCone04NeutralHadronIsodR0dEta0pt0nocracks");
    tPhoCone04NeutralHadronIsodR0dEta0pt5 = edm::InputTag("analyze","PhoCone04NeutralHadronIsodR0dEta0pt5");
    tPhoCone04NeutralHadronIsodR0dEta0pt5nocracks = edm::InputTag("analyze","PhoCone04NeutralHadronIsodR0dEta0pt5nocracks");
    tPhoCone04NeutralHadronIsodR7dEta0pt0 = edm::InputTag("analyze","PhoCone04NeutralHadronIsodR7dEta0pt0");
    tPhoCone04NeutralHadronIsodR7dEta0pt5 = edm::InputTag("analyze","PhoCone04NeutralHadronIsodR7dEta0pt5");
    tPhoCone04PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx = edm::InputTag("analyze","PhoCone04PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx");
    tPhoCone04PhotonIsodR0dEta0pt0 = edm::InputTag("analyze","PhoCone04PhotonIsodR0dEta0pt0");
    tPhoCone04PhotonIsodR0dEta0pt5 = edm::InputTag("analyze","PhoCone04PhotonIsodR0dEta0pt5");
    tPhoCone04PhotonIsodR8dEta0pt0 = edm::InputTag("analyze","PhoCone04PhotonIsodR8dEta0pt0");
    tPhoCone04PhotonIsodR8dEta0pt5 = edm::InputTag("analyze","PhoCone04PhotonIsodR8dEta0pt5");
    tPhoConvChi2Probability    = edm::InputTag("analyze","PhoConvChi2Probability");
    tPhoConvEoverP             = edm::InputTag("analyze","PhoConvEoverP");
    tPhoConvNtracks            = edm::InputTag("analyze","PhoConvNtracks");
    tPhoConvValidVtx           = edm::InputTag("analyze","PhoConvValidVtx");
    tPhoE1OverE9               = edm::InputTag("analyze","PhoE1OverE9");
    tPhoE1x5                   = edm::InputTag("analyze","PhoE1x5");
    tPhoE2x5                   = edm::InputTag("analyze","PhoE2x5");
    tPhoE3x3                   = edm::InputTag("analyze","PhoE3x3");
    tPhoE5x5                   = edm::InputTag("analyze","PhoE5x5");
    tPhoEnergy                 = edm::InputTag("analyze","PhoEnergy");
    tPhoEta                    = edm::InputTag("analyze","PhoEta");
    tPhoGood                   = edm::InputTag("analyze","PhoGood");
    tPhoH1overE                = edm::InputTag("analyze","PhoH1overE");
    tPhoH2overE                = edm::InputTag("analyze","PhoH2overE");
    tPhoHasConvTrks            = edm::InputTag("analyze","PhoHasConvTrks");
    tPhoHasPixSeed             = edm::InputTag("analyze","PhoHasPixSeed");
    tPhoHoverE                 = edm::InputTag("analyze","PhoHoverE");
    tPhoIsIso                  = edm::InputTag("analyze","PhoIsIso");
    tPhoIso03                  = edm::InputTag("analyze","PhoIso03");
    tPhoIso03Ecal              = edm::InputTag("analyze","PhoIso03Ecal");
    tPhoIso03Hcal              = edm::InputTag("analyze","PhoIso03Hcal");
    tPhoIso03HcalDepth1        = edm::InputTag("analyze","PhoIso03HcalDepth1");
    tPhoIso03HcalDepth2        = edm::InputTag("analyze","PhoIso03HcalDepth2");
    tPhoIso03TrkHollow         = edm::InputTag("analyze","PhoIso03TrkHollow");
    tPhoIso03TrkSolid          = edm::InputTag("analyze","PhoIso03TrkSolid");
    tPhoIso03nTrksHollow       = edm::InputTag("analyze","PhoIso03nTrksHollow");
    tPhoIso03nTrksSolid        = edm::InputTag("analyze","PhoIso03nTrksSolid");
    tPhoIso04                  = edm::InputTag("analyze","PhoIso04");
    tPhoIso04Ecal              = edm::InputTag("analyze","PhoIso04Ecal");
    tPhoIso04Hcal              = edm::InputTag("analyze","PhoIso04Hcal");
    tPhoIso04HcalDepth1        = edm::InputTag("analyze","PhoIso04HcalDepth1");
    tPhoIso04HcalDepth2        = edm::InputTag("analyze","PhoIso04HcalDepth2");
    tPhoIso04TrkHollow         = edm::InputTag("analyze","PhoIso04TrkHollow");
    tPhoIso04TrkSolid          = edm::InputTag("analyze","PhoIso04TrkSolid");
    tPhoIso04nTrksHollow       = edm::InputTag("analyze","PhoIso04nTrksHollow");
    tPhoIso04nTrksSolid        = edm::InputTag("analyze","PhoIso04nTrksSolid");
    tPhoMCmatchexitcode        = edm::InputTag("analyze","PhoMCmatchexitcode");
    tPhoMCmatchindex           = edm::InputTag("analyze","PhoMCmatchindex");
    tPhoNeutralHadronIso       = edm::InputTag("analyze","PhoNeutralHadronIso");
    tPhoPhi                    = edm::InputTag("analyze","PhoPhi");
    tPhoPhotonIso              = edm::InputTag("analyze","PhoPhotonIso");
    tPhoPt                     = edm::InputTag("analyze","PhoPt");
    tPhoPx                     = edm::InputTag("analyze","PhoPx");
    tPhoPy                     = edm::InputTag("analyze","PhoPy");
    tPhoPz                     = edm::InputTag("analyze","PhoPz");
    tPhoR9                     = edm::InputTag("analyze","PhoR9");
    tPhoS4OverS1               = edm::InputTag("analyze","PhoS4OverS1");
    tPhoSCEtaWidth             = edm::InputTag("analyze","PhoSCEtaWidth");
    tPhoSCRawEnergy            = edm::InputTag("analyze","PhoSCRawEnergy");
    tPhoSCSigmaPhiPhi          = edm::InputTag("analyze","PhoSCSigmaPhiPhi");
    tPhoScSeedSeverity         = edm::InputTag("analyze","PhoScSeedSeverity");
    tPhoSigmaEtaEta            = edm::InputTag("analyze","PhoSigmaEtaEta");
    tPhoSigmaIetaIeta          = edm::InputTag("analyze","PhoSigmaIetaIeta");
    tPhoisEB                   = edm::InputTag("analyze","PhoisEB");
    tPhoisEBEEGap              = edm::InputTag("analyze","PhoisEBEEGap");
    tPhoisEBEtaGap             = edm::InputTag("analyze","PhoisEBEtaGap");
    tPhoisEBPhiGap             = edm::InputTag("analyze","PhoisEBPhiGap");
    tPhoisEE                   = edm::InputTag("analyze","PhoisEE");
    tPhoisEEDeeGap             = edm::InputTag("analyze","PhoisEEDeeGap");
    tPhoisEERingGap            = edm::InputTag("analyze","PhoisEERingGap");
    tPhoisPFElectron           = edm::InputTag("analyze","PhoisPFElectron");
    tPhoisPFPhoton             = edm::InputTag("analyze","PhoisPFPhoton");
    tPhoisPFlowPhoton          = edm::InputTag("analyze","PhoisPFlowPhoton");
    tPhoisStandardPhoton       = edm::InputTag("analyze","PhoisStandardPhoton");
    tPhomaxEnergyXtal          = edm::InputTag("analyze","PhomaxEnergyXtal");
    tPhotSCindex               = edm::InputTag("analyze","PhotSCindex");
    tPrimVtxGood               = edm::InputTag("analyze","PrimVtxGood");
    tPrimVtxIsFake             = edm::InputTag("analyze","PrimVtxIsFake");
    tPrimVtxNChi2              = edm::InputTag("analyze","PrimVtxNChi2");
    tPrimVtxNdof               = edm::InputTag("analyze","PrimVtxNdof");
    tPrimVtxPtSum              = edm::InputTag("analyze","PrimVtxPtSum");
    tPrimVtxRho                = edm::InputTag("analyze","PrimVtxRho");
    tPrimVtxx                  = edm::InputTag("analyze","PrimVtxx");
    tPrimVtxxE                 = edm::InputTag("analyze","PrimVtxxE");
    tPrimVtxy                  = edm::InputTag("analyze","PrimVtxy");
    tPrimVtxyE                 = edm::InputTag("analyze","PrimVtxyE");
    tPrimVtxz                  = edm::InputTag("analyze","PrimVtxz");
    tPrimVtxzE                 = edm::InputTag("analyze","PrimVtxzE");
    tPromptnessLevel           = edm::InputTag("analyze","PromptnessLevel");
    tPtHat                     = edm::InputTag("analyze","PtHat");
    tQCDPartonicHT             = edm::InputTag("analyze","QCDPartonicHT");
    tRA2TrackingFailureFilterFlag = edm::InputTag("analyze","RA2TrackingFailureFilterFlag");
    tRawMET                    = edm::InputTag("analyze","RawMET");
    tRawMETSignificance        = edm::InputTag("analyze","RawMETSignificance");
    tRawMETemEtFrac            = edm::InputTag("analyze","RawMETemEtFrac");
    tRawMETemEtInEB            = edm::InputTag("analyze","RawMETemEtInEB");
    tRawMETemEtInEE            = edm::InputTag("analyze","RawMETemEtInEE");
    tRawMETemEtInHF            = edm::InputTag("analyze","RawMETemEtInHF");
    tRawMEThadEtFrac           = edm::InputTag("analyze","RawMEThadEtFrac");
    tRawMEThadEtInHB           = edm::InputTag("analyze","RawMEThadEtInHB");
    tRawMEThadEtInHE           = edm::InputTag("analyze","RawMEThadEtInHE");
    tRawMEThadEtInHF           = edm::InputTag("analyze","RawMEThadEtInHF");
    tRawMETphi                 = edm::InputTag("analyze","RawMETphi");
    tRawMETpx                  = edm::InputTag("analyze","RawMETpx");
    tRawMETpy                  = edm::InputTag("analyze","RawMETpy");
    tRecovRecHitFilterFlag     = edm::InputTag("analyze","RecovRecHitFilterFlag");
    tRho                       = edm::InputTag("analyze","Rho");
    tRhoForIso                 = edm::InputTag("analyze","RhoForIso");
    tRhoPFnoPU                 = edm::InputTag("analyze","RhoPFnoPU");
    tRun                       = edm::InputTag("analyze","Run");
    tSCBrem                    = edm::InputTag("analyze","SCBrem");
    tSCEnergy                  = edm::InputTag("analyze","SCEnergy");
    tSCEta                     = edm::InputTag("analyze","SCEta");
    tSCEtaWidth                = edm::InputTag("analyze","SCEtaWidth");
    tSCPhi                     = edm::InputTag("analyze","SCPhi");
    tSCPhiWidth                = edm::InputTag("analyze","SCPhiWidth");
    tSCPre                     = edm::InputTag("analyze","SCPre");
    tSCR9                      = edm::InputTag("analyze","SCR9");
    tSCRaw                     = edm::InputTag("analyze","SCRaw");
    tSCcrackcorr               = edm::InputTag("analyze","SCcrackcorr");
    tSCcrackcorrseed           = edm::InputTag("analyze","SCcrackcorrseed");
    tSCcrackcorrseedfactor     = edm::InputTag("analyze","SCcrackcorrseedfactor");
    tSClocalcorr               = edm::InputTag("analyze","SClocalcorr");
    tSClocalcorrseed           = edm::InputTag("analyze","SClocalcorrseed");
    tSClocalcorrseedfactor     = edm::InputTag("analyze","SClocalcorrseedfactor");
    tSigProcID                 = edm::InputTag("analyze","SigProcID");
    tSumEt                     = edm::InputTag("analyze","SumEt");
    tTCMET                     = edm::InputTag("analyze","TCMET");
    tTCMETSignificance         = edm::InputTag("analyze","TCMETSignificance");
    tTCMETphi                  = edm::InputTag("analyze","TCMETphi");
    tTCMETpx                   = edm::InputTag("analyze","TCMETpx");
    tTCMETpy                   = edm::InputTag("analyze","TCMETpy");
    tTrkEta                    = edm::InputTag("analyze","TrkEta");
    tTrkGood                   = edm::InputTag("analyze","TrkGood");
    tTrkNChi2                  = edm::InputTag("analyze","TrkNChi2");
    tTrkNHits                  = edm::InputTag("analyze","TrkNHits");
    tTrkPhi                    = edm::InputTag("analyze","TrkPhi");
    tTrkPt                     = edm::InputTag("analyze","TrkPt");
    tTrkPtSum                  = edm::InputTag("analyze","TrkPtSum");
    tTrkPtSumPhi               = edm::InputTag("analyze","TrkPtSumPhi");
    tTrkPtSumx                 = edm::InputTag("analyze","TrkPtSumx");
    tTrkPtSumy                 = edm::InputTag("analyze","TrkPtSumy");
    tTrkVtxDxy                 = edm::InputTag("analyze","TrkVtxDxy");
    tTrkVtxDz                  = edm::InputTag("analyze","TrkVtxDz");
    tVrtxChi2                  = edm::InputTag("analyze","VrtxChi2");
    tVrtxIsFake                = edm::InputTag("analyze","VrtxIsFake");
    tVrtxNdof                  = edm::InputTag("analyze","VrtxNdof");
    tVrtxNtrks                 = edm::InputTag("analyze","VrtxNtrks");
    tVrtxSumPt                 = edm::InputTag("analyze","VrtxSumPt");
    tVrtxX                     = edm::InputTag("analyze","VrtxX");
    tVrtxXE                    = edm::InputTag("analyze","VrtxXE");
    tVrtxY                     = edm::InputTag("analyze","VrtxY");
    tVrtxYE                    = edm::InputTag("analyze","VrtxYE");
    tVrtxZ                     = edm::InputTag("analyze","VrtxZ");
    tVrtxZE                    = edm::InputTag("analyze","VrtxZE");
    tWeight                    = edm::InputTag("analyze","Weight");
    tgenInfoEta                = edm::InputTag("analyze","genInfoEta");
    tgenInfoId                 = edm::InputTag("analyze","genInfoId");
    tgenInfoM                  = edm::InputTag("analyze","genInfoM");
    tgenInfoMo1                = edm::InputTag("analyze","genInfoMo1");
    tgenInfoMo2                = edm::InputTag("analyze","genInfoMo2");
    tgenInfoNMo                = edm::InputTag("analyze","genInfoNMo");
    tgenInfoPhi                = edm::InputTag("analyze","genInfoPhi");
    tgenInfoPromptFlag         = edm::InputTag("analyze","genInfoPromptFlag");
    tgenInfoPt                 = edm::InputTag("analyze","genInfoPt");
    tgenInfoPx                 = edm::InputTag("analyze","genInfoPx");
    tgenInfoPy                 = edm::InputTag("analyze","genInfoPy");
    tgenInfoPz                 = edm::InputTag("analyze","genInfoPz");
    tgenInfoStatus             = edm::InputTag("analyze","genInfoStatus");
    tnGenParticles             = edm::InputTag("analyze","nGenParticles");
    tpdfW                      = edm::InputTag("analyze","pdfW");
    tpdfWsum                   = edm::InputTag("analyze","pdfWsum");
    tprocess                   = edm::InputTag("analyze","process");
    tsignMu                    = edm::InputTag("analyze","signMu");
    txSMS                      = edm::InputTag("analyze","xSMS");
    txbarSMS                   = edm::InputTag("analyze","xbarSMS");

}
