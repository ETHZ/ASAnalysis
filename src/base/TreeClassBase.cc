// This file was automatically generated by fronga
// Wed May 15 14:01:13 2013
//
// DO NOT MODIFY UNLESS YOU KNOW EXACTLY WHAT YOU ARE DOING
//
#include "base/TreeClassBase.hh"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>

//____________________________________________________________________
TreeClassBase::TreeClassBase(const std::vector<std::string>& fileList)
{
    fEvent = new fwlite::ChainEvent(fileList);
    fCurRun = -1;
    Init();
}

//____________________________________________________________________
TreeClassBase::~TreeClassBase()
{
    if (!fEvent) return;
    delete fEvent;
}

//____________________________________________________________________
// Retrieve all branches ("getByLabel")
const bool TreeClassBase::GetAllByLabel(void) {

    const edm::EventBase* event = fEvent;
    bool result(true);

    // Load run information if run has changed
    if ( fCurRun != event->id().run() ) {
      fCurRun = event->id().run();
      const edm::RunBase& run = fEvent->getRun();

      // Get all run handles and assign to members
      result &= run.getByLabel( tExtXSecLO, hExtXSecLO );
      if ( hExtXSecLO.isValid() ) ExtXSecLO = *hExtXSecLO;
      result &= run.getByLabel( tExtXSecNLO, hExtXSecNLO );
      if ( hExtXSecNLO.isValid() ) ExtXSecNLO = *hExtXSecNLO;
      result &= run.getByLabel( tHLTLabels, hHLTLabels );
      if ( hHLTLabels.isValid() ) HLTLabels = *hHLTLabels;
      result &= run.getByLabel( tHLTNames, hHLTNames );
      if ( hHLTNames.isValid() ) HLTNames = *hHLTNames;
      result &= run.getByLabel( tIntXSec, hIntXSec );
      if ( hIntXSec.isValid() ) IntXSec = *hIntXSec;
      result &= run.getByLabel( tL1PhysMenu, hL1PhysMenu );
      if ( hL1PhysMenu.isValid() ) L1PhysMenu = *hL1PhysMenu;
      result &= run.getByLabel( tMaxElEta, hMaxElEta );
      if ( hMaxElEta.isValid() ) MaxElEta = *hMaxElEta;
      result &= run.getByLabel( tMaxGenJetEta, hMaxGenJetEta );
      if ( hMaxGenJetEta.isValid() ) MaxGenJetEta = *hMaxGenJetEta;
      result &= run.getByLabel( tMaxGenLeptEta, hMaxGenLeptEta );
      if ( hMaxGenLeptEta.isValid() ) MaxGenLeptEta = *hMaxGenLeptEta;
      result &= run.getByLabel( tMaxGenPhotEta, hMaxGenPhotEta );
      if ( hMaxGenPhotEta.isValid() ) MaxGenPhotEta = *hMaxGenPhotEta;
      result &= run.getByLabel( tMaxJEta, hMaxJEta );
      if ( hMaxJEta.isValid() ) MaxJEta = *hMaxJEta;
      result &= run.getByLabel( tMaxMuEta, hMaxMuEta );
      if ( hMaxMuEta.isValid() ) MaxMuEta = *hMaxMuEta;
      result &= run.getByLabel( tMaxNConv, hMaxNConv );
      if ( hMaxNConv.isValid() ) MaxNConv = *hMaxNConv;
      result &= run.getByLabel( tMaxNEBhits, hMaxNEBhits );
      if ( hMaxNEBhits.isValid() ) MaxNEBhits = *hMaxNEBhits;
      result &= run.getByLabel( tMaxNEles, hMaxNEles );
      if ( hMaxNEles.isValid() ) MaxNEles = *hMaxNEles;
      result &= run.getByLabel( tMaxNGenJet, hMaxNGenJet );
      if ( hMaxNGenJet.isValid() ) MaxNGenJet = *hMaxNGenJet;
      result &= run.getByLabel( tMaxNGenLep, hMaxNGenLep );
      if ( hMaxNGenLep.isValid() ) MaxNGenLep = *hMaxNGenLep;
      result &= run.getByLabel( tMaxNGenPho, hMaxNGenPho );
      if ( hMaxNGenPho.isValid() ) MaxNGenPho = *hMaxNGenPho;
      result &= run.getByLabel( tMaxNJets, hMaxNJets );
      if ( hMaxNJets.isValid() ) MaxNJets = *hMaxNJets;
      result &= run.getByLabel( tMaxNMus, hMaxNMus );
      if ( hMaxNMus.isValid() ) MaxNMus = *hMaxNMus;
      result &= run.getByLabel( tMaxNPfCand, hMaxNPfCand );
      if ( hMaxNPfCand.isValid() ) MaxNPfCand = *hMaxNPfCand;
      result &= run.getByLabel( tMaxNPhotons, hMaxNPhotons );
      if ( hMaxNPhotons.isValid() ) MaxNPhotons = *hMaxNPhotons;
      result &= run.getByLabel( tMaxNPileup, hMaxNPileup );
      if ( hMaxNPileup.isValid() ) MaxNPileup = *hMaxNPileup;
      result &= run.getByLabel( tMaxNSC, hMaxNSC );
      if ( hMaxNSC.isValid() ) MaxNSC = *hMaxNSC;
      result &= run.getByLabel( tMaxNTrks, hMaxNTrks );
      if ( hMaxNTrks.isValid() ) MaxNTrks = *hMaxNTrks;
      result &= run.getByLabel( tMaxNVrtx, hMaxNVrtx );
      if ( hMaxNVrtx.isValid() ) MaxNVrtx = *hMaxNVrtx;
      result &= run.getByLabel( tMaxNXtals, hMaxNXtals );
      if ( hMaxNXtals.isValid() ) MaxNXtals = *hMaxNXtals;
      result &= run.getByLabel( tMaxPhotonEta, hMaxPhotonEta );
      if ( hMaxPhotonEta.isValid() ) MaxPhotonEta = *hMaxPhotonEta;
      result &= run.getByLabel( tMaxTrkEta, hMaxTrkEta );
      if ( hMaxTrkEta.isValid() ) MaxTrkEta = *hMaxTrkEta;
      result &= run.getByLabel( tMaxTrkNChi2, hMaxTrkNChi2 );
      if ( hMaxTrkNChi2.isValid() ) MaxTrkNChi2 = *hMaxTrkNChi2;
      result &= run.getByLabel( tMinEBRechitE, hMinEBRechitE );
      if ( hMinEBRechitE.isValid() ) MinEBRechitE = *hMinEBRechitE;
      result &= run.getByLabel( tMinElPt, hMinElPt );
      if ( hMinElPt.isValid() ) MinElPt = *hMinElPt;
      result &= run.getByLabel( tMinGenJetPt, hMinGenJetPt );
      if ( hMinGenJetPt.isValid() ) MinGenJetPt = *hMinGenJetPt;
      result &= run.getByLabel( tMinGenLeptPt, hMinGenLeptPt );
      if ( hMinGenLeptPt.isValid() ) MinGenLeptPt = *hMinGenLeptPt;
      result &= run.getByLabel( tMinGenPhotPt, hMinGenPhotPt );
      if ( hMinGenPhotPt.isValid() ) MinGenPhotPt = *hMinGenPhotPt;
      result &= run.getByLabel( tMinJEMfrac, hMinJEMfrac );
      if ( hMinJEMfrac.isValid() ) MinJEMfrac = *hMinJEMfrac;
      result &= run.getByLabel( tMinJPt, hMinJPt );
      if ( hMinJPt.isValid() ) MinJPt = *hMinJPt;
      result &= run.getByLabel( tMinMuPt, hMinMuPt );
      if ( hMinMuPt.isValid() ) MinMuPt = *hMinMuPt;
      result &= run.getByLabel( tMinPhotonPt, hMinPhotonPt );
      if ( hMinPhotonPt.isValid() ) MinPhotonPt = *hMinPhotonPt;
      result &= run.getByLabel( tMinRawJPt, hMinRawJPt );
      if ( hMinRawJPt.isValid() ) MinRawJPt = *hMinRawJPt;
      result &= run.getByLabel( tMinSCraw, hMinSCraw );
      if ( hMinSCraw.isValid() ) MinSCraw = *hMinSCraw;
      result &= run.getByLabel( tMinTrkNHits, hMinTrkNHits );
      if ( hMinTrkNHits.isValid() ) MinTrkNHits = *hMinTrkNHits;
      result &= run.getByLabel( tMinTrkPt, hMinTrkPt );
      if ( hMinTrkPt.isValid() ) MinTrkPt = *hMinTrkPt;
      result &= run.getByLabel( tPileUpData, hPileUpData );
      if ( hPileUpData.isValid() ) PileUpData = *hPileUpData;
      result &= run.getByLabel( tPileUpMC, hPileUpMC );
      if ( hPileUpMC.isValid() ) PileUpMC = *hPileUpMC;


    }

    // Get all event handles and assign to members
    result &= event->getByLabel( tEcalDeadCellTriggerPrimitiveFilter, hEcalDeadCellTriggerPrimitiveFilter );
    if ( hEcalDeadCellTriggerPrimitiveFilter.isValid() ) EcalDeadCellTriggerPrimitiveFilter = *hEcalDeadCellTriggerPrimitiveFilter;
    result &= event->getByLabel( teeBadScFilter, heeBadScFilter );
    if ( heeBadScFilter.isValid() ) eeBadScFilter = *heeBadScFilter;
    result &= event->getByLabel( thcalLaserEventFilter, hhcalLaserEventFilter );
    if ( hhcalLaserEventFilter.isValid() ) hcalLaserEventFilter = *hhcalLaserEventFilter;
    result &= event->getByLabel( ttrackingFailureFilter, htrackingFailureFilter );
    if ( htrackingFailureFilter.isValid() ) trackingFailureFilter = *htrackingFailureFilter;
    result &= event->getByLabel( tCAJEMfrac, hCAJEMfrac );
    if ( hCAJEMfrac.isValid() ) CAJEMfrac = *hCAJEMfrac;
    result &= event->getByLabel( tCAJEta, hCAJEta );
    if ( hCAJEta.isValid() ) CAJEta = *hCAJEta;
    result &= event->getByLabel( tCAJPt, hCAJPt );
    if ( hCAJPt.isValid() ) CAJPt = *hCAJPt;
    result &= event->getByLabel( tCSCTightHaloID, hCSCTightHaloID );
    if ( hCSCTightHaloID.isValid() ) CSCTightHaloID = *hCSCTightHaloID;
    result &= event->getByLabel( tElCInfoIsGsfCtfCons, hElCInfoIsGsfCtfCons );
    if ( hElCInfoIsGsfCtfCons.isValid() ) ElCInfoIsGsfCtfCons = *hElCInfoIsGsfCtfCons;
    result &= event->getByLabel( tElCInfoIsGsfCtfScPixCons, hElCInfoIsGsfCtfScPixCons );
    if ( hElCInfoIsGsfCtfScPixCons.isValid() ) ElCInfoIsGsfCtfScPixCons = *hElCInfoIsGsfCtfScPixCons;
    result &= event->getByLabel( tElCInfoIsGsfScPixCons, hElCInfoIsGsfScPixCons );
    if ( hElCInfoIsGsfScPixCons.isValid() ) ElCInfoIsGsfScPixCons = *hElCInfoIsGsfScPixCons;
    result &= event->getByLabel( tElCaloEnergy, hElCaloEnergy );
    if ( hElCaloEnergy.isValid() ) ElCaloEnergy = *hElCaloEnergy;
    result &= event->getByLabel( tElCharge, hElCharge );
    if ( hElCharge.isValid() ) ElCharge = *hElCharge;
    result &= event->getByLabel( tElD0PV, hElD0PV );
    if ( hElD0PV.isValid() ) ElD0PV = *hElD0PV;
    result &= event->getByLabel( tElDR03EcalRecHitSumEt, hElDR03EcalRecHitSumEt );
    if ( hElDR03EcalRecHitSumEt.isValid() ) ElDR03EcalRecHitSumEt = *hElDR03EcalRecHitSumEt;
    result &= event->getByLabel( tElDR03HcalTowerSumEt, hElDR03HcalTowerSumEt );
    if ( hElDR03HcalTowerSumEt.isValid() ) ElDR03HcalTowerSumEt = *hElDR03HcalTowerSumEt;
    result &= event->getByLabel( tElDR03TkSumPt, hElDR03TkSumPt );
    if ( hElDR03TkSumPt.isValid() ) ElDR03TkSumPt = *hElDR03TkSumPt;
    result &= event->getByLabel( tElDeltaEtaSuperClusterAtVtx, hElDeltaEtaSuperClusterAtVtx );
    if ( hElDeltaEtaSuperClusterAtVtx.isValid() ) ElDeltaEtaSuperClusterAtVtx = *hElDeltaEtaSuperClusterAtVtx;
    result &= event->getByLabel( tElDeltaPhiSuperClusterAtVtx, hElDeltaPhiSuperClusterAtVtx );
    if ( hElDeltaPhiSuperClusterAtVtx.isValid() ) ElDeltaPhiSuperClusterAtVtx = *hElDeltaPhiSuperClusterAtVtx;
    result &= event->getByLabel( tElDzPV, hElDzPV );
    if ( hElDzPV.isValid() ) ElDzPV = *hElDzPV;
    result &= event->getByLabel( tElE, hElE );
    if ( hElE.isValid() ) ElE = *hElE;
    result &= event->getByLabel( tElESuperClusterOverP, hElESuperClusterOverP );
    if ( hElESuperClusterOverP.isValid() ) ElESuperClusterOverP = *hElESuperClusterOverP;
    result &= event->getByLabel( tElEt, hElEt );
    if ( hElEt.isValid() ) ElEt = *hElEt;
    result &= event->getByLabel( tElEta, hElEta );
    if ( hElEta.isValid() ) ElEta = *hElEta;
    result &= event->getByLabel( tElEventelPFIsoValueCharged03PFIdStandard, hElEventelPFIsoValueCharged03PFIdStandard );
    if ( hElEventelPFIsoValueCharged03PFIdStandard.isValid() ) ElEventelPFIsoValueCharged03PFIdStandard = *hElEventelPFIsoValueCharged03PFIdStandard;
    result &= event->getByLabel( tElEventelPFIsoValueGamma03PFIdStandard, hElEventelPFIsoValueGamma03PFIdStandard );
    if ( hElEventelPFIsoValueGamma03PFIdStandard.isValid() ) ElEventelPFIsoValueGamma03PFIdStandard = *hElEventelPFIsoValueGamma03PFIdStandard;
    result &= event->getByLabel( tElEventelPFIsoValueNeutral03PFIdStandard, hElEventelPFIsoValueNeutral03PFIdStandard );
    if ( hElEventelPFIsoValueNeutral03PFIdStandard.isValid() ) ElEventelPFIsoValueNeutral03PFIdStandard = *hElEventelPFIsoValueNeutral03PFIdStandard;
    result &= event->getByLabel( tElGenE, hElGenE );
    if ( hElGenE.isValid() ) ElGenE = *hElGenE;
    result &= event->getByLabel( tElGenEta, hElGenEta );
    if ( hElGenEta.isValid() ) ElGenEta = *hElGenEta;
    result &= event->getByLabel( tElGenGMID, hElGenGMID );
    if ( hElGenGMID.isValid() ) ElGenGMID = *hElGenGMID;
    result &= event->getByLabel( tElGenID, hElGenID );
    if ( hElGenID.isValid() ) ElGenID = *hElGenID;
    result &= event->getByLabel( tElGenMID, hElGenMID );
    if ( hElGenMID.isValid() ) ElGenMID = *hElGenMID;
    result &= event->getByLabel( tElGenPhi, hElGenPhi );
    if ( hElGenPhi.isValid() ) ElGenPhi = *hElGenPhi;
    result &= event->getByLabel( tElGenPt, hElGenPt );
    if ( hElGenPt.isValid() ) ElGenPt = *hElGenPt;
    result &= event->getByLabel( tElGood, hElGood );
    if ( hElGood.isValid() ) ElGood = *hElGood;
    result &= event->getByLabel( tElHcalOverEcal, hElHcalOverEcal );
    if ( hElHcalOverEcal.isValid() ) ElHcalOverEcal = *hElHcalOverEcal;
    result &= event->getByLabel( tElNumberOfMissingInnerHits, hElNumberOfMissingInnerHits );
    if ( hElNumberOfMissingInnerHits.isValid() ) ElNumberOfMissingInnerHits = *hElNumberOfMissingInnerHits;
    result &= event->getByLabel( tElPassConversionVeto, hElPassConversionVeto );
    if ( hElPassConversionVeto.isValid() ) ElPassConversionVeto = *hElPassConversionVeto;
    result &= event->getByLabel( tElPhi, hElPhi );
    if ( hElPhi.isValid() ) ElPhi = *hElPhi;
    result &= event->getByLabel( tElPt, hElPt );
    if ( hElPt.isValid() ) ElPt = *hElPt;
    result &= event->getByLabel( tElPx, hElPx );
    if ( hElPx.isValid() ) ElPx = *hElPx;
    result &= event->getByLabel( tElPy, hElPy );
    if ( hElPy.isValid() ) ElPy = *hElPy;
    result &= event->getByLabel( tElPz, hElPz );
    if ( hElPz.isValid() ) ElPz = *hElPz;
    result &= event->getByLabel( tElRelIso03, hElRelIso03 );
    if ( hElRelIso03.isValid() ) ElRelIso03 = *hElRelIso03;
    result &= event->getByLabel( tElSCEta, hElSCEta );
    if ( hElSCEta.isValid() ) ElSCEta = *hElSCEta;
    result &= event->getByLabel( tElSigmaIetaIeta, hElSigmaIetaIeta );
    if ( hElSigmaIetaIeta.isValid() ) ElSigmaIetaIeta = *hElSigmaIetaIeta;
    result &= event->getByLabel( tElelectronRadPFIsoChHad03, hElelectronRadPFIsoChHad03 );
    if ( hElelectronRadPFIsoChHad03.isValid() ) ElelectronRadPFIsoChHad03 = *hElelectronRadPFIsoChHad03;
    result &= event->getByLabel( tElelectronRadPFIsoNHad03, hElelectronRadPFIsoNHad03 );
    if ( hElelectronRadPFIsoNHad03.isValid() ) ElelectronRadPFIsoNHad03 = *hElelectronRadPFIsoNHad03;
    result &= event->getByLabel( tElelectronRadPFIsoPhoton03, hElelectronRadPFIsoPhoton03 );
    if ( hElelectronRadPFIsoPhoton03.isValid() ) ElelectronRadPFIsoPhoton03 = *hElelectronRadPFIsoPhoton03;
    result &= event->getByLabel( tEvent, hEvent );
    if ( hEvent.isValid() ) Event = *hEvent;
    result &= event->getByLabel( tGenJetE, hGenJetE );
    if ( hGenJetE.isValid() ) GenJetE = *hGenJetE;
    result &= event->getByLabel( tGenJetEta, hGenJetEta );
    if ( hGenJetEta.isValid() ) GenJetEta = *hGenJetEta;
    result &= event->getByLabel( tGenJetPhi, hGenJetPhi );
    if ( hGenJetPhi.isValid() ) GenJetPhi = *hGenJetPhi;
    result &= event->getByLabel( tGenJetPt, hGenJetPt );
    if ( hGenJetPt.isValid() ) GenJetPt = *hGenJetPt;
    result &= event->getByLabel( tGenLeptonEta, hGenLeptonEta );
    if ( hGenLeptonEta.isValid() ) GenLeptonEta = *hGenLeptonEta;
    result &= event->getByLabel( tGenLeptonGMID, hGenLeptonGMID );
    if ( hGenLeptonGMID.isValid() ) GenLeptonGMID = *hGenLeptonGMID;
    result &= event->getByLabel( tGenLeptonID, hGenLeptonID );
    if ( hGenLeptonID.isValid() ) GenLeptonID = *hGenLeptonID;
    result &= event->getByLabel( tGenLeptonMID, hGenLeptonMID );
    if ( hGenLeptonMID.isValid() ) GenLeptonMID = *hGenLeptonMID;
    result &= event->getByLabel( tGenLeptonPhi, hGenLeptonPhi );
    if ( hGenLeptonPhi.isValid() ) GenLeptonPhi = *hGenLeptonPhi;
    result &= event->getByLabel( tGenLeptonPt, hGenLeptonPt );
    if ( hGenLeptonPt.isValid() ) GenLeptonPt = *hGenLeptonPt;
    result &= event->getByLabel( tGenMET, hGenMET );
    if ( hGenMET.isValid() ) GenMET = *hGenMET;
    result &= event->getByLabel( tGenMETpx, hGenMETpx );
    if ( hGenMETpx.isValid() ) GenMETpx = *hGenMETpx;
    result &= event->getByLabel( tGenMETpy, hGenMETpy );
    if ( hGenMETpy.isValid() ) GenMETpy = *hGenMETpy;
    result &= event->getByLabel( tHBHENoiseFilterResult, hHBHENoiseFilterResult );
    if ( hHBHENoiseFilterResult.isValid() ) HBHENoiseFilterResult = *hHBHENoiseFilterResult;
    result &= event->getByLabel( tHLTObjectEta0, hHLTObjectEta0 );
    if ( hHLTObjectEta0.isValid() ) HLTObjectEta0 = *hHLTObjectEta0;
    result &= event->getByLabel( tHLTObjectEta1, hHLTObjectEta1 );
    if ( hHLTObjectEta1.isValid() ) HLTObjectEta1 = *hHLTObjectEta1;
    result &= event->getByLabel( tHLTObjectID0, hHLTObjectID0 );
    if ( hHLTObjectID0.isValid() ) HLTObjectID0 = *hHLTObjectID0;
    result &= event->getByLabel( tHLTObjectID1, hHLTObjectID1 );
    if ( hHLTObjectID1.isValid() ) HLTObjectID1 = *hHLTObjectID1;
    result &= event->getByLabel( tHLTObjectPhi0, hHLTObjectPhi0 );
    if ( hHLTObjectPhi0.isValid() ) HLTObjectPhi0 = *hHLTObjectPhi0;
    result &= event->getByLabel( tHLTObjectPhi1, hHLTObjectPhi1 );
    if ( hHLTObjectPhi1.isValid() ) HLTObjectPhi1 = *hHLTObjectPhi1;
    result &= event->getByLabel( tHLTObjectPt0, hHLTObjectPt0 );
    if ( hHLTObjectPt0.isValid() ) HLTObjectPt0 = *hHLTObjectPt0;
    result &= event->getByLabel( tHLTObjectPt1, hHLTObjectPt1 );
    if ( hHLTObjectPt1.isValid() ) HLTObjectPt1 = *hHLTObjectPt1;
    result &= event->getByLabel( tHLTPrescale, hHLTPrescale );
    if ( hHLTPrescale.isValid() ) HLTPrescale = *hHLTPrescale;
    result &= event->getByLabel( tHLTResults, hHLTResults );
    if ( hHLTResults.isValid() ) HLTResults = *hHLTResults;
    result &= event->getByLabel( tJArea, hJArea );
    if ( hJArea.isValid() ) JArea = *hJArea;
    result &= event->getByLabel( tJChargedEmFrac, hJChargedEmFrac );
    if ( hJChargedEmFrac.isValid() ) JChargedEmFrac = *hJChargedEmFrac;
    result &= event->getByLabel( tJChargedHadFrac, hJChargedHadFrac );
    if ( hJChargedHadFrac.isValid() ) JChargedHadFrac = *hJChargedHadFrac;
    result &= event->getByLabel( tJE, hJE );
    if ( hJE.isValid() ) JE = *hJE;
    result &= event->getByLabel( tJEcorr, hJEcorr );
    if ( hJEcorr.isValid() ) JEcorr = *hJEcorr;
    result &= event->getByLabel( tJEt, hJEt );
    if ( hJEt.isValid() ) JEt = *hJEt;
    result &= event->getByLabel( tJEta, hJEta );
    if ( hJEta.isValid() ) JEta = *hJEta;
    result &= event->getByLabel( tJGood, hJGood );
    if ( hJGood.isValid() ) JGood = *hJGood;
    result &= event->getByLabel( tJMetCorrArea, hJMetCorrArea );
    if ( hJMetCorrArea.isValid() ) JMetCorrArea = *hJMetCorrArea;
    result &= event->getByLabel( tJMetCorrEMF, hJMetCorrEMF );
    if ( hJMetCorrEMF.isValid() ) JMetCorrEMF = *hJMetCorrEMF;
    result &= event->getByLabel( tJMetCorrNoMuPt, hJMetCorrNoMuPt );
    if ( hJMetCorrNoMuPt.isValid() ) JMetCorrNoMuPt = *hJMetCorrNoMuPt;
    result &= event->getByLabel( tJMetCorrPhi, hJMetCorrPhi );
    if ( hJMetCorrPhi.isValid() ) JMetCorrPhi = *hJMetCorrPhi;
    result &= event->getByLabel( tJMetCorrRawEta, hJMetCorrRawEta );
    if ( hJMetCorrRawEta.isValid() ) JMetCorrRawEta = *hJMetCorrRawEta;
    result &= event->getByLabel( tJMetCorrRawPt, hJMetCorrRawPt );
    if ( hJMetCorrRawPt.isValid() ) JMetCorrRawPt = *hJMetCorrRawPt;
    result &= event->getByLabel( tJNAssoTracks, hJNAssoTracks );
    if ( hJNAssoTracks.isValid() ) JNAssoTracks = *hJNAssoTracks;
    result &= event->getByLabel( tJNConstituents, hJNConstituents );
    if ( hJNConstituents.isValid() ) JNConstituents = *hJNConstituents;
    result &= event->getByLabel( tJNeutralEmFrac, hJNeutralEmFrac );
    if ( hJNeutralEmFrac.isValid() ) JNeutralEmFrac = *hJNeutralEmFrac;
    result &= event->getByLabel( tJNeutralHadFrac, hJNeutralHadFrac );
    if ( hJNeutralHadFrac.isValid() ) JNeutralHadFrac = *hJNeutralHadFrac;
    result &= event->getByLabel( tJPartonFlavour, hJPartonFlavour );
    if ( hJPartonFlavour.isValid() ) JPartonFlavour = *hJPartonFlavour;
    result &= event->getByLabel( tJPhi, hJPhi );
    if ( hJPhi.isValid() ) JPhi = *hJPhi;
    result &= event->getByLabel( tJPt, hJPt );
    if ( hJPt.isValid() ) JPt = *hJPt;
    result &= event->getByLabel( tJPx, hJPx );
    if ( hJPx.isValid() ) JPx = *hJPx;
    result &= event->getByLabel( tJPy, hJPy );
    if ( hJPy.isValid() ) JPy = *hJPy;
    result &= event->getByLabel( tJPz, hJPz );
    if ( hJPz.isValid() ) JPz = *hJPz;
    result &= event->getByLabel( tJnewPFCombinedSecondaryVertexBPFJetTags, hJnewPFCombinedSecondaryVertexBPFJetTags );
    if ( hJnewPFCombinedSecondaryVertexBPFJetTags.isValid() ) JnewPFCombinedSecondaryVertexBPFJetTags = *hJnewPFCombinedSecondaryVertexBPFJetTags;
    result &= event->getByLabel( tJnewPFCombinedSecondaryVertexMVABPFJetTags, hJnewPFCombinedSecondaryVertexMVABPFJetTags );
    if ( hJnewPFCombinedSecondaryVertexMVABPFJetTags.isValid() ) JnewPFCombinedSecondaryVertexMVABPFJetTags = *hJnewPFCombinedSecondaryVertexMVABPFJetTags;
    result &= event->getByLabel( tLumiSection, hLumiSection );
    if ( hLumiSection.isValid() ) LumiSection = *hLumiSection;
    result &= event->getByLabel( tMassChi, hMassChi );
    if ( hMassChi.isValid() ) MassChi = *hMassChi;
    result &= event->getByLabel( tMassGlu, hMassGlu );
    if ( hMassGlu.isValid() ) MassGlu = *hMassGlu;
    result &= event->getByLabel( tMassLSP, hMassLSP );
    if ( hMassLSP.isValid() ) MassLSP = *hMassLSP;
    result &= event->getByLabel( tMuCharge, hMuCharge );
    if ( hMuCharge.isValid() ) MuCharge = *hMuCharge;
    result &= event->getByLabel( tMuD0PV, hMuD0PV );
    if ( hMuD0PV.isValid() ) MuD0PV = *hMuD0PV;
    result &= event->getByLabel( tMuDzPV, hMuDzPV );
    if ( hMuDzPV.isValid() ) MuDzPV = *hMuDzPV;
    result &= event->getByLabel( tMuE, hMuE );
    if ( hMuE.isValid() ) MuE = *hMuE;
    result &= event->getByLabel( tMuEta, hMuEta );
    if ( hMuEta.isValid() ) MuEta = *hMuEta;
    result &= event->getByLabel( tMuGenE, hMuGenE );
    if ( hMuGenE.isValid() ) MuGenE = *hMuGenE;
    result &= event->getByLabel( tMuGenEta, hMuGenEta );
    if ( hMuGenEta.isValid() ) MuGenEta = *hMuGenEta;
    result &= event->getByLabel( tMuGenGMID, hMuGenGMID );
    if ( hMuGenGMID.isValid() ) MuGenGMID = *hMuGenGMID;
    result &= event->getByLabel( tMuGenID, hMuGenID );
    if ( hMuGenID.isValid() ) MuGenID = *hMuGenID;
    result &= event->getByLabel( tMuGenMID, hMuGenMID );
    if ( hMuGenMID.isValid() ) MuGenMID = *hMuGenMID;
    result &= event->getByLabel( tMuGenPhi, hMuGenPhi );
    if ( hMuGenPhi.isValid() ) MuGenPhi = *hMuGenPhi;
    result &= event->getByLabel( tMuGenPt, hMuGenPt );
    if ( hMuGenPt.isValid() ) MuGenPt = *hMuGenPt;
    result &= event->getByLabel( tMuGood, hMuGood );
    if ( hMuGood.isValid() ) MuGood = *hMuGood;
    result &= event->getByLabel( tMuIsGlobalMuon, hMuIsGlobalMuon );
    if ( hMuIsGlobalMuon.isValid() ) MuIsGlobalMuon = *hMuIsGlobalMuon;
    result &= event->getByLabel( tMuIsPFMuon, hMuIsPFMuon );
    if ( hMuIsPFMuon.isValid() ) MuIsPFMuon = *hMuIsPFMuon;
    result &= event->getByLabel( tMuIsTMLSTight, hMuIsTMLSTight );
    if ( hMuIsTMLSTight.isValid() ) MuIsTMLSTight = *hMuIsTMLSTight;
    result &= event->getByLabel( tMuIsTrackerMuon, hMuIsTrackerMuon );
    if ( hMuIsTrackerMuon.isValid() ) MuIsTrackerMuon = *hMuIsTrackerMuon;
    result &= event->getByLabel( tMuJESCorrMET, hMuJESCorrMET );
    if ( hMuJESCorrMET.isValid() ) MuJESCorrMET = *hMuJESCorrMET;
    result &= event->getByLabel( tMuNChi2, hMuNChi2 );
    if ( hMuNChi2.isValid() ) MuNChi2 = *hMuNChi2;
    result &= event->getByLabel( tMuNGlMuHits, hMuNGlMuHits );
    if ( hMuNGlMuHits.isValid() ) MuNGlMuHits = *hMuNGlMuHits;
    result &= event->getByLabel( tMuNMatchedStations, hMuNMatchedStations );
    if ( hMuNMatchedStations.isValid() ) MuNMatchedStations = *hMuNMatchedStations;
    result &= event->getByLabel( tMuNMatches, hMuNMatches );
    if ( hMuNMatches.isValid() ) MuNMatches = *hMuNMatches;
    result &= event->getByLabel( tMuNMuHits, hMuNMuHits );
    if ( hMuNMuHits.isValid() ) MuNMuHits = *hMuNMuHits;
    result &= event->getByLabel( tMuNPxHits, hMuNPxHits );
    if ( hMuNPxHits.isValid() ) MuNPxHits = *hMuNPxHits;
    result &= event->getByLabel( tMuNSiLayers, hMuNSiLayers );
    if ( hMuNSiLayers.isValid() ) MuNSiLayers = *hMuNSiLayers;
    result &= event->getByLabel( tMuPfIsoR03ChHad, hMuPfIsoR03ChHad );
    if ( hMuPfIsoR03ChHad.isValid() ) MuPfIsoR03ChHad = *hMuPfIsoR03ChHad;
    result &= event->getByLabel( tMuPfIsoR03NeHad, hMuPfIsoR03NeHad );
    if ( hMuPfIsoR03NeHad.isValid() ) MuPfIsoR03NeHad = *hMuPfIsoR03NeHad;
    result &= event->getByLabel( tMuPfIsoR03Photon, hMuPfIsoR03Photon );
    if ( hMuPfIsoR03Photon.isValid() ) MuPfIsoR03Photon = *hMuPfIsoR03Photon;
    result &= event->getByLabel( tMuPfIsoR03SumPUPt, hMuPfIsoR03SumPUPt );
    if ( hMuPfIsoR03SumPUPt.isValid() ) MuPfIsoR03SumPUPt = *hMuPfIsoR03SumPUPt;
    result &= event->getByLabel( tMuPfIsoR04ChHad, hMuPfIsoR04ChHad );
    if ( hMuPfIsoR04ChHad.isValid() ) MuPfIsoR04ChHad = *hMuPfIsoR04ChHad;
    result &= event->getByLabel( tMuPfIsoR04NeHad, hMuPfIsoR04NeHad );
    if ( hMuPfIsoR04NeHad.isValid() ) MuPfIsoR04NeHad = *hMuPfIsoR04NeHad;
    result &= event->getByLabel( tMuPfIsoR04Photon, hMuPfIsoR04Photon );
    if ( hMuPfIsoR04Photon.isValid() ) MuPfIsoR04Photon = *hMuPfIsoR04Photon;
    result &= event->getByLabel( tMuPfIsoR04SumPUPt, hMuPfIsoR04SumPUPt );
    if ( hMuPfIsoR04SumPUPt.isValid() ) MuPfIsoR04SumPUPt = *hMuPfIsoR04SumPUPt;
    result &= event->getByLabel( tMuPt, hMuPt );
    if ( hMuPt.isValid() ) MuPt = *hMuPt;
    result &= event->getByLabel( tMuPx, hMuPx );
    if ( hMuPx.isValid() ) MuPx = *hMuPx;
    result &= event->getByLabel( tMuPy, hMuPy );
    if ( hMuPy.isValid() ) MuPy = *hMuPy;
    result &= event->getByLabel( tMuPz, hMuPz );
    if ( hMuPz.isValid() ) MuPz = *hMuPz;
    result &= event->getByLabel( tMumuonRadPFIsoChHad03, hMumuonRadPFIsoChHad03 );
    if ( hMumuonRadPFIsoChHad03.isValid() ) MumuonRadPFIsoChHad03 = *hMumuonRadPFIsoChHad03;
    result &= event->getByLabel( tMumuonRadPFIsoNHad03, hMumuonRadPFIsoNHad03 );
    if ( hMumuonRadPFIsoNHad03.isValid() ) MumuonRadPFIsoNHad03 = *hMumuonRadPFIsoNHad03;
    result &= event->getByLabel( tMumuonRadPFIsoPhoton03, hMumuonRadPFIsoPhoton03 );
    if ( hMumuonRadPFIsoPhoton03.isValid() ) MumuonRadPFIsoPhoton03 = *hMumuonRadPFIsoPhoton03;
    result &= event->getByLabel( tNEles, hNEles );
    if ( hNEles.isValid() ) NEles = *hNEles;
    result &= event->getByLabel( tNGenJets, hNGenJets );
    if ( hNGenJets.isValid() ) NGenJets = *hNGenJets;
    result &= event->getByLabel( tNGenLeptons, hNGenLeptons );
    if ( hNGenLeptons.isValid() ) NGenLeptons = *hNGenLeptons;
    result &= event->getByLabel( tNHLTObjs, hNHLTObjs );
    if ( hNHLTObjs.isValid() ) NHLTObjs = *hNHLTObjs;
    result &= event->getByLabel( tNJets, hNJets );
    if ( hNJets.isValid() ) NJets = *hNJets;
    result &= event->getByLabel( tNMus, hNMus );
    if ( hNMus.isValid() ) NMus = *hNMus;
    result &= event->getByLabel( tNPdfs, hNPdfs );
    if ( hNPdfs.isValid() ) NPdfs = *hNPdfs;
    result &= event->getByLabel( tNPhotons, hNPhotons );
    if ( hNPhotons.isValid() ) NPhotons = *hNPhotons;
    result &= event->getByLabel( tNVrtx, hNVrtx );
    if ( hNVrtx.isValid() ) NVrtx = *hNVrtx;
    result &= event->getByLabel( tPFCHSJE, hPFCHSJE );
    if ( hPFCHSJE.isValid() ) PFCHSJE = *hPFCHSJE;
    result &= event->getByLabel( tPFCHSJEta, hPFCHSJEta );
    if ( hPFCHSJEta.isValid() ) PFCHSJEta = *hPFCHSJEta;
    result &= event->getByLabel( tPFCHSJFlavour, hPFCHSJFlavour );
    if ( hPFCHSJFlavour.isValid() ) PFCHSJFlavour = *hPFCHSJFlavour;
    result &= event->getByLabel( tPFCHSJIDLoose, hPFCHSJIDLoose );
    if ( hPFCHSJIDLoose.isValid() ) PFCHSJIDLoose = *hPFCHSJIDLoose;
    result &= event->getByLabel( tPFCHSJPhi, hPFCHSJPhi );
    if ( hPFCHSJPhi.isValid() ) PFCHSJPhi = *hPFCHSJPhi;
    result &= event->getByLabel( tPFCHSJPt, hPFCHSJPt );
    if ( hPFCHSJPt.isValid() ) PFCHSJPt = *hPFCHSJPt;
    result &= event->getByLabel( tPFCHSNJets, hPFCHSNJets );
    if ( hPFCHSNJets.isValid() ) PFCHSNJets = *hPFCHSNJets;
    result &= event->getByLabel( tPFMET, hPFMET );
    if ( hPFMET.isValid() ) PFMET = *hPFMET;
    result &= event->getByLabel( tPFMETpx, hPFMETpx );
    if ( hPFMETpx.isValid() ) PFMETpx = *hPFMETpx;
    result &= event->getByLabel( tPFMETpy, hPFMETpy );
    if ( hPFMETpy.isValid() ) PFMETpy = *hPFMETpy;
    result &= event->getByLabel( tPFType1MET, hPFType1MET );
    if ( hPFType1MET.isValid() ) PFType1MET = *hPFType1MET;
    result &= event->getByLabel( tPFType1METpx, hPFType1METpx );
    if ( hPFType1METpx.isValid() ) PFType1METpx = *hPFType1METpx;
    result &= event->getByLabel( tPFType1METpy, hPFType1METpy );
    if ( hPFType1METpy.isValid() ) PFType1METpy = *hPFType1METpy;
    result &= event->getByLabel( tPUnumTrueInteractions, hPUnumTrueInteractions );
    if ( hPUnumTrueInteractions.isValid() ) PUnumTrueInteractions = *hPUnumTrueInteractions;
    result &= event->getByLabel( tPhoEta, hPhoEta );
    if ( hPhoEta.isValid() ) PhoEta = *hPhoEta;
    result &= event->getByLabel( tPhoGood, hPhoGood );
    if ( hPhoGood.isValid() ) PhoGood = *hPhoGood;
    result &= event->getByLabel( tPhoNewIsoPFCharged, hPhoNewIsoPFCharged );
    if ( hPhoNewIsoPFCharged.isValid() ) PhoNewIsoPFCharged = *hPhoNewIsoPFCharged;
    result &= event->getByLabel( tPhoNewIsoPFNeutral, hPhoNewIsoPFNeutral );
    if ( hPhoNewIsoPFNeutral.isValid() ) PhoNewIsoPFNeutral = *hPhoNewIsoPFNeutral;
    result &= event->getByLabel( tPhoNewIsoPFPhoton, hPhoNewIsoPFPhoton );
    if ( hPhoNewIsoPFPhoton.isValid() ) PhoNewIsoPFPhoton = *hPhoNewIsoPFPhoton;
    result &= event->getByLabel( tPhoPt, hPhoPt );
    if ( hPhoPt.isValid() ) PhoPt = *hPhoPt;
    result &= event->getByLabel( tPrimVtxGood, hPrimVtxGood );
    if ( hPrimVtxGood.isValid() ) PrimVtxGood = *hPrimVtxGood;
    result &= event->getByLabel( tPrimVtxIsFake, hPrimVtxIsFake );
    if ( hPrimVtxIsFake.isValid() ) PrimVtxIsFake = *hPrimVtxIsFake;
    result &= event->getByLabel( tPrimVtxNdof, hPrimVtxNdof );
    if ( hPrimVtxNdof.isValid() ) PrimVtxNdof = *hPrimVtxNdof;
    result &= event->getByLabel( tPrimVtxx, hPrimVtxx );
    if ( hPrimVtxx.isValid() ) PrimVtxx = *hPrimVtxx;
    result &= event->getByLabel( tPrimVtxy, hPrimVtxy );
    if ( hPrimVtxy.isValid() ) PrimVtxy = *hPrimVtxy;
    result &= event->getByLabel( tPrimVtxz, hPrimVtxz );
    if ( hPrimVtxz.isValid() ) PrimVtxz = *hPrimVtxz;
    result &= event->getByLabel( tPromptnessLevel, hPromptnessLevel );
    if ( hPromptnessLevel.isValid() ) PromptnessLevel = *hPromptnessLevel;
    result &= event->getByLabel( tRawMET, hRawMET );
    if ( hRawMET.isValid() ) RawMET = *hRawMET;
    result &= event->getByLabel( tRho, hRho );
    if ( hRho.isValid() ) Rho = *hRho;
    result &= event->getByLabel( tRhoForIso, hRhoForIso );
    if ( hRhoForIso.isValid() ) RhoForIso = *hRhoForIso;
    result &= event->getByLabel( tRun, hRun );
    if ( hRun.isValid() ) Run = *hRun;
    result &= event->getByLabel( tSumEt, hSumEt );
    if ( hSumEt.isValid() ) SumEt = *hSumEt;
    result &= event->getByLabel( tTCMET, hTCMET );
    if ( hTCMET.isValid() ) TCMET = *hTCMET;
    result &= event->getByLabel( tTCMETpx, hTCMETpx );
    if ( hTCMETpx.isValid() ) TCMETpx = *hTCMETpx;
    result &= event->getByLabel( tTCMETpy, hTCMETpy );
    if ( hTCMETpy.isValid() ) TCMETpy = *hTCMETpy;
    result &= event->getByLabel( tTauDecayModeFinding, hTauDecayModeFinding );
    if ( hTauDecayModeFinding.isValid() ) TauDecayModeFinding = *hTauDecayModeFinding;
    result &= event->getByLabel( tTauEta, hTauEta );
    if ( hTauEta.isValid() ) TauEta = *hTauEta;
    result &= event->getByLabel( tTauNObjs, hTauNObjs );
    if ( hTauNObjs.isValid() ) TauNObjs = *hTauNObjs;
    result &= event->getByLabel( tTauPt, hTauPt );
    if ( hTauPt.isValid() ) TauPt = *hTauPt;
    result &= event->getByLabel( tgenInfoEta, hgenInfoEta );
    if ( hgenInfoEta.isValid() ) genInfoEta = *hgenInfoEta;
    result &= event->getByLabel( tgenInfoId, hgenInfoId );
    if ( hgenInfoId.isValid() ) genInfoId = *hgenInfoId;
    result &= event->getByLabel( tgenInfoM, hgenInfoM );
    if ( hgenInfoM.isValid() ) genInfoM = *hgenInfoM;
    result &= event->getByLabel( tgenInfoMo1, hgenInfoMo1 );
    if ( hgenInfoMo1.isValid() ) genInfoMo1 = *hgenInfoMo1;
    result &= event->getByLabel( tgenInfoMo2, hgenInfoMo2 );
    if ( hgenInfoMo2.isValid() ) genInfoMo2 = *hgenInfoMo2;
    result &= event->getByLabel( tgenInfoPhi, hgenInfoPhi );
    if ( hgenInfoPhi.isValid() ) genInfoPhi = *hgenInfoPhi;
    result &= event->getByLabel( tgenInfoPt, hgenInfoPt );
    if ( hgenInfoPt.isValid() ) genInfoPt = *hgenInfoPt;
    result &= event->getByLabel( tgenInfoStatus, hgenInfoStatus );
    if ( hgenInfoStatus.isValid() ) genInfoStatus = *hgenInfoStatus;
    result &= event->getByLabel( tnGenParticles, hnGenParticles );
    if ( hnGenParticles.isValid() ) nGenParticles = *hnGenParticles;
    result &= event->getByLabel( tpdfW, hpdfW );
    if ( hpdfW.isValid() ) pdfW = *hpdfW;
    result &= event->getByLabel( tpdfWsum, hpdfWsum );
    if ( hpdfWsum.isValid() ) pdfWsum = *hpdfWsum;
    result &= event->getByLabel( tprocess, hprocess );
    if ( hprocess.isValid() ) process = *hprocess;
    result &= event->getByLabel( txSMS, hxSMS );
    if ( hxSMS.isValid() ) xSMS = *hxSMS;
    result &= event->getByLabel( txbarSMS, hxbarSMS );
    if ( hxbarSMS.isValid() ) xbarSMS = *hxbarSMS;

    return result;
    
}


//____________________________________________________________________
// Called at init: define "tags"
void TreeClassBase::Init(void)
{

    tExtXSecLO                 = edm::InputTag("analyze","ExtXSecLO");
    tExtXSecNLO                = edm::InputTag("analyze","ExtXSecNLO");
    tHLTLabels                 = edm::InputTag("analyze","HLTLabels");
    tHLTNames                  = edm::InputTag("analyze","HLTNames");
    tIntXSec                   = edm::InputTag("analyze","IntXSec");
    tL1PhysMenu                = edm::InputTag("analyze","L1PhysMenu");
    tMaxElEta                  = edm::InputTag("analyze","MaxElEta");
    tMaxGenJetEta              = edm::InputTag("analyze","MaxGenJetEta");
    tMaxGenLeptEta             = edm::InputTag("analyze","MaxGenLeptEta");
    tMaxGenPhotEta             = edm::InputTag("analyze","MaxGenPhotEta");
    tMaxJEta                   = edm::InputTag("analyze","MaxJEta");
    tMaxMuEta                  = edm::InputTag("analyze","MaxMuEta");
    tMaxNConv                  = edm::InputTag("analyze","MaxNConv");
    tMaxNEBhits                = edm::InputTag("analyze","MaxNEBhits");
    tMaxNEles                  = edm::InputTag("analyze","MaxNEles");
    tMaxNGenJet                = edm::InputTag("analyze","MaxNGenJet");
    tMaxNGenLep                = edm::InputTag("analyze","MaxNGenLep");
    tMaxNGenPho                = edm::InputTag("analyze","MaxNGenPho");
    tMaxNJets                  = edm::InputTag("analyze","MaxNJets");
    tMaxNMus                   = edm::InputTag("analyze","MaxNMus");
    tMaxNPfCand                = edm::InputTag("analyze","MaxNPfCand");
    tMaxNPhotons               = edm::InputTag("analyze","MaxNPhotons");
    tMaxNPileup                = edm::InputTag("analyze","MaxNPileup");
    tMaxNSC                    = edm::InputTag("analyze","MaxNSC");
    tMaxNTrks                  = edm::InputTag("analyze","MaxNTrks");
    tMaxNVrtx                  = edm::InputTag("analyze","MaxNVrtx");
    tMaxNXtals                 = edm::InputTag("analyze","MaxNXtals");
    tMaxPhotonEta              = edm::InputTag("analyze","MaxPhotonEta");
    tMaxTrkEta                 = edm::InputTag("analyze","MaxTrkEta");
    tMaxTrkNChi2               = edm::InputTag("analyze","MaxTrkNChi2");
    tMinEBRechitE              = edm::InputTag("analyze","MinEBRechitE");
    tMinElPt                   = edm::InputTag("analyze","MinElPt");
    tMinGenJetPt               = edm::InputTag("analyze","MinGenJetPt");
    tMinGenLeptPt              = edm::InputTag("analyze","MinGenLeptPt");
    tMinGenPhotPt              = edm::InputTag("analyze","MinGenPhotPt");
    tMinJEMfrac                = edm::InputTag("analyze","MinJEMfrac");
    tMinJPt                    = edm::InputTag("analyze","MinJPt");
    tMinMuPt                   = edm::InputTag("analyze","MinMuPt");
    tMinPhotonPt               = edm::InputTag("analyze","MinPhotonPt");
    tMinRawJPt                 = edm::InputTag("analyze","MinRawJPt");
    tMinSCraw                  = edm::InputTag("analyze","MinSCraw");
    tMinTrkNHits               = edm::InputTag("analyze","MinTrkNHits");
    tMinTrkPt                  = edm::InputTag("analyze","MinTrkPt");
    tPileUpData                = edm::InputTag("analyze","PileUpData");
    tPileUpMC                  = edm::InputTag("analyze","PileUpMC");
    tEcalDeadCellTriggerPrimitiveFilter = edm::InputTag("EcalDeadCellTriggerPrimitiveFilter","");
    teeBadScFilter             = edm::InputTag("eeBadScFilter","");
    thcalLaserEventFilter      = edm::InputTag("hcalLaserEventFilter","");
    ttrackingFailureFilter     = edm::InputTag("trackingFailureFilter","");
    tCAJEMfrac                 = edm::InputTag("analyze","CAJEMfrac");
    tCAJEta                    = edm::InputTag("analyze","CAJEta");
    tCAJPt                     = edm::InputTag("analyze","CAJPt");
    tCSCTightHaloID            = edm::InputTag("analyze","CSCTightHaloID");
    tElCInfoIsGsfCtfCons       = edm::InputTag("analyze","ElCInfoIsGsfCtfCons");
    tElCInfoIsGsfCtfScPixCons  = edm::InputTag("analyze","ElCInfoIsGsfCtfScPixCons");
    tElCInfoIsGsfScPixCons     = edm::InputTag("analyze","ElCInfoIsGsfScPixCons");
    tElCaloEnergy              = edm::InputTag("analyze","ElCaloEnergy");
    tElCharge                  = edm::InputTag("analyze","ElCharge");
    tElD0PV                    = edm::InputTag("analyze","ElD0PV");
    tElDR03EcalRecHitSumEt     = edm::InputTag("analyze","ElDR03EcalRecHitSumEt");
    tElDR03HcalTowerSumEt      = edm::InputTag("analyze","ElDR03HcalTowerSumEt");
    tElDR03TkSumPt             = edm::InputTag("analyze","ElDR03TkSumPt");
    tElDeltaEtaSuperClusterAtVtx = edm::InputTag("analyze","ElDeltaEtaSuperClusterAtVtx");
    tElDeltaPhiSuperClusterAtVtx = edm::InputTag("analyze","ElDeltaPhiSuperClusterAtVtx");
    tElDzPV                    = edm::InputTag("analyze","ElDzPV");
    tElE                       = edm::InputTag("analyze","ElE");
    tElESuperClusterOverP      = edm::InputTag("analyze","ElESuperClusterOverP");
    tElEt                      = edm::InputTag("analyze","ElEt");
    tElEta                     = edm::InputTag("analyze","ElEta");
    tElEventelPFIsoValueCharged03PFIdStandard = edm::InputTag("analyze","ElEventelPFIsoValueCharged03PFIdStandard");
    tElEventelPFIsoValueGamma03PFIdStandard = edm::InputTag("analyze","ElEventelPFIsoValueGamma03PFIdStandard");
    tElEventelPFIsoValueNeutral03PFIdStandard = edm::InputTag("analyze","ElEventelPFIsoValueNeutral03PFIdStandard");
    tElGenE                    = edm::InputTag("analyze","ElGenE");
    tElGenEta                  = edm::InputTag("analyze","ElGenEta");
    tElGenGMID                 = edm::InputTag("analyze","ElGenGMID");
    tElGenID                   = edm::InputTag("analyze","ElGenID");
    tElGenMID                  = edm::InputTag("analyze","ElGenMID");
    tElGenPhi                  = edm::InputTag("analyze","ElGenPhi");
    tElGenPt                   = edm::InputTag("analyze","ElGenPt");
    tElGood                    = edm::InputTag("analyze","ElGood");
    tElHcalOverEcal            = edm::InputTag("analyze","ElHcalOverEcal");
    tElNumberOfMissingInnerHits = edm::InputTag("analyze","ElNumberOfMissingInnerHits");
    tElPassConversionVeto      = edm::InputTag("analyze","ElPassConversionVeto");
    tElPhi                     = edm::InputTag("analyze","ElPhi");
    tElPt                      = edm::InputTag("analyze","ElPt");
    tElPx                      = edm::InputTag("analyze","ElPx");
    tElPy                      = edm::InputTag("analyze","ElPy");
    tElPz                      = edm::InputTag("analyze","ElPz");
    tElRelIso03                = edm::InputTag("analyze","ElRelIso03");
    tElSCEta                   = edm::InputTag("analyze","ElSCEta");
    tElSigmaIetaIeta           = edm::InputTag("analyze","ElSigmaIetaIeta");
    tElelectronRadPFIsoChHad03 = edm::InputTag("analyze","ElelectronRadPFIsoChHad03");
    tElelectronRadPFIsoNHad03  = edm::InputTag("analyze","ElelectronRadPFIsoNHad03");
    tElelectronRadPFIsoPhoton03 = edm::InputTag("analyze","ElelectronRadPFIsoPhoton03");
    tEvent                     = edm::InputTag("analyze","Event");
    tGenJetE                   = edm::InputTag("analyze","GenJetE");
    tGenJetEta                 = edm::InputTag("analyze","GenJetEta");
    tGenJetPhi                 = edm::InputTag("analyze","GenJetPhi");
    tGenJetPt                  = edm::InputTag("analyze","GenJetPt");
    tGenLeptonEta              = edm::InputTag("analyze","GenLeptonEta");
    tGenLeptonGMID             = edm::InputTag("analyze","GenLeptonGMID");
    tGenLeptonID               = edm::InputTag("analyze","GenLeptonID");
    tGenLeptonMID              = edm::InputTag("analyze","GenLeptonMID");
    tGenLeptonPhi              = edm::InputTag("analyze","GenLeptonPhi");
    tGenLeptonPt               = edm::InputTag("analyze","GenLeptonPt");
    tGenMET                    = edm::InputTag("analyze","GenMET");
    tGenMETpx                  = edm::InputTag("analyze","GenMETpx");
    tGenMETpy                  = edm::InputTag("analyze","GenMETpy");
    tHBHENoiseFilterResult     = edm::InputTag("HBHENoiseFilterResultProducer","HBHENoiseFilterResult");
    tHLTObjectEta0             = edm::InputTag("analyze","HLTObjectEta0");
    tHLTObjectEta1             = edm::InputTag("analyze","HLTObjectEta1");
    tHLTObjectID0              = edm::InputTag("analyze","HLTObjectID0");
    tHLTObjectID1              = edm::InputTag("analyze","HLTObjectID1");
    tHLTObjectPhi0             = edm::InputTag("analyze","HLTObjectPhi0");
    tHLTObjectPhi1             = edm::InputTag("analyze","HLTObjectPhi1");
    tHLTObjectPt0              = edm::InputTag("analyze","HLTObjectPt0");
    tHLTObjectPt1              = edm::InputTag("analyze","HLTObjectPt1");
    tHLTPrescale               = edm::InputTag("analyze","HLTPrescale");
    tHLTResults                = edm::InputTag("analyze","HLTResults");
    tJArea                     = edm::InputTag("analyze","JArea");
    tJChargedEmFrac            = edm::InputTag("analyze","JChargedEmFrac");
    tJChargedHadFrac           = edm::InputTag("analyze","JChargedHadFrac");
    tJE                        = edm::InputTag("analyze","JE");
    tJEcorr                    = edm::InputTag("analyze","JEcorr");
    tJEt                       = edm::InputTag("analyze","JEt");
    tJEta                      = edm::InputTag("analyze","JEta");
    tJGood                     = edm::InputTag("analyze","JGood");
    tJMetCorrArea              = edm::InputTag("analyze","JMetCorrArea");
    tJMetCorrEMF               = edm::InputTag("analyze","JMetCorrEMF");
    tJMetCorrNoMuPt            = edm::InputTag("analyze","JMetCorrNoMuPt");
    tJMetCorrPhi               = edm::InputTag("analyze","JMetCorrPhi");
    tJMetCorrRawEta            = edm::InputTag("analyze","JMetCorrRawEta");
    tJMetCorrRawPt             = edm::InputTag("analyze","JMetCorrRawPt");
    tJNAssoTracks              = edm::InputTag("analyze","JNAssoTracks");
    tJNConstituents            = edm::InputTag("analyze","JNConstituents");
    tJNeutralEmFrac            = edm::InputTag("analyze","JNeutralEmFrac");
    tJNeutralHadFrac           = edm::InputTag("analyze","JNeutralHadFrac");
    tJPartonFlavour            = edm::InputTag("analyze","JPartonFlavour");
    tJPhi                      = edm::InputTag("analyze","JPhi");
    tJPt                       = edm::InputTag("analyze","JPt");
    tJPx                       = edm::InputTag("analyze","JPx");
    tJPy                       = edm::InputTag("analyze","JPy");
    tJPz                       = edm::InputTag("analyze","JPz");
    tJnewPFCombinedSecondaryVertexBPFJetTags = edm::InputTag("analyze","JnewPFCombinedSecondaryVertexBPFJetTags");
    tJnewPFCombinedSecondaryVertexMVABPFJetTags = edm::InputTag("analyze","JnewPFCombinedSecondaryVertexMVABPFJetTags");
    tLumiSection               = edm::InputTag("analyze","LumiSection");
    tMassChi                   = edm::InputTag("analyze","MassChi");
    tMassGlu                   = edm::InputTag("analyze","MassGlu");
    tMassLSP                   = edm::InputTag("analyze","MassLSP");
    tMuCharge                  = edm::InputTag("analyze","MuCharge");
    tMuD0PV                    = edm::InputTag("analyze","MuD0PV");
    tMuDzPV                    = edm::InputTag("analyze","MuDzPV");
    tMuE                       = edm::InputTag("analyze","MuE");
    tMuEta                     = edm::InputTag("analyze","MuEta");
    tMuGenE                    = edm::InputTag("analyze","MuGenE");
    tMuGenEta                  = edm::InputTag("analyze","MuGenEta");
    tMuGenGMID                 = edm::InputTag("analyze","MuGenGMID");
    tMuGenID                   = edm::InputTag("analyze","MuGenID");
    tMuGenMID                  = edm::InputTag("analyze","MuGenMID");
    tMuGenPhi                  = edm::InputTag("analyze","MuGenPhi");
    tMuGenPt                   = edm::InputTag("analyze","MuGenPt");
    tMuGood                    = edm::InputTag("analyze","MuGood");
    tMuIsGlobalMuon            = edm::InputTag("analyze","MuIsGlobalMuon");
    tMuIsPFMuon                = edm::InputTag("analyze","MuIsPFMuon");
    tMuIsTMLSTight             = edm::InputTag("analyze","MuIsTMLSTight");
    tMuIsTrackerMuon           = edm::InputTag("analyze","MuIsTrackerMuon");
    tMuJESCorrMET              = edm::InputTag("analyze","MuJESCorrMET");
    tMuNChi2                   = edm::InputTag("analyze","MuNChi2");
    tMuNGlMuHits               = edm::InputTag("analyze","MuNGlMuHits");
    tMuNMatchedStations        = edm::InputTag("analyze","MuNMatchedStations");
    tMuNMatches                = edm::InputTag("analyze","MuNMatches");
    tMuNMuHits                 = edm::InputTag("analyze","MuNMuHits");
    tMuNPxHits                 = edm::InputTag("analyze","MuNPxHits");
    tMuNSiLayers               = edm::InputTag("analyze","MuNSiLayers");
    tMuPfIsoR03ChHad           = edm::InputTag("analyze","MuPfIsoR03ChHad");
    tMuPfIsoR03NeHad           = edm::InputTag("analyze","MuPfIsoR03NeHad");
    tMuPfIsoR03Photon          = edm::InputTag("analyze","MuPfIsoR03Photon");
    tMuPfIsoR03SumPUPt         = edm::InputTag("analyze","MuPfIsoR03SumPUPt");
    tMuPfIsoR04ChHad           = edm::InputTag("analyze","MuPfIsoR04ChHad");
    tMuPfIsoR04NeHad           = edm::InputTag("analyze","MuPfIsoR04NeHad");
    tMuPfIsoR04Photon          = edm::InputTag("analyze","MuPfIsoR04Photon");
    tMuPfIsoR04SumPUPt         = edm::InputTag("analyze","MuPfIsoR04SumPUPt");
    tMuPt                      = edm::InputTag("analyze","MuPt");
    tMuPx                      = edm::InputTag("analyze","MuPx");
    tMuPy                      = edm::InputTag("analyze","MuPy");
    tMuPz                      = edm::InputTag("analyze","MuPz");
    tMumuonRadPFIsoChHad03     = edm::InputTag("analyze","MumuonRadPFIsoChHad03");
    tMumuonRadPFIsoNHad03      = edm::InputTag("analyze","MumuonRadPFIsoNHad03");
    tMumuonRadPFIsoPhoton03    = edm::InputTag("analyze","MumuonRadPFIsoPhoton03");
    tNEles                     = edm::InputTag("analyze","NEles");
    tNGenJets                  = edm::InputTag("analyze","NGenJets");
    tNGenLeptons               = edm::InputTag("analyze","NGenLeptons");
    tNHLTObjs                  = edm::InputTag("analyze","NHLTObjs");
    tNJets                     = edm::InputTag("analyze","NJets");
    tNMus                      = edm::InputTag("analyze","NMus");
    tNPdfs                     = edm::InputTag("analyze","NPdfs");
    tNPhotons                  = edm::InputTag("analyze","NPhotons");
    tNVrtx                     = edm::InputTag("analyze","NVrtx");
    tPFCHSJE                   = edm::InputTag("analyze","PFCHSJE");
    tPFCHSJEta                 = edm::InputTag("analyze","PFCHSJEta");
    tPFCHSJFlavour             = edm::InputTag("analyze","PFCHSJFlavour");
    tPFCHSJIDLoose             = edm::InputTag("analyze","PFCHSJIDLoose");
    tPFCHSJPhi                 = edm::InputTag("analyze","PFCHSJPhi");
    tPFCHSJPt                  = edm::InputTag("analyze","PFCHSJPt");
    tPFCHSNJets                = edm::InputTag("analyze","PFCHSNJets");
    tPFMET                     = edm::InputTag("analyze","PFMET");
    tPFMETpx                   = edm::InputTag("analyze","PFMETpx");
    tPFMETpy                   = edm::InputTag("analyze","PFMETpy");
    tPFType1MET                = edm::InputTag("analyze","PFType1MET");
    tPFType1METpx              = edm::InputTag("analyze","PFType1METpx");
    tPFType1METpy              = edm::InputTag("analyze","PFType1METpy");
    tPUnumTrueInteractions     = edm::InputTag("analyze","PUnumTrueInteractions");
    tPhoEta                    = edm::InputTag("analyze","PhoEta");
    tPhoGood                   = edm::InputTag("analyze","PhoGood");
    tPhoNewIsoPFCharged        = edm::InputTag("analyze","PhoNewIsoPFCharged");
    tPhoNewIsoPFNeutral        = edm::InputTag("analyze","PhoNewIsoPFNeutral");
    tPhoNewIsoPFPhoton         = edm::InputTag("analyze","PhoNewIsoPFPhoton");
    tPhoPt                     = edm::InputTag("analyze","PhoPt");
    tPrimVtxGood               = edm::InputTag("analyze","PrimVtxGood");
    tPrimVtxIsFake             = edm::InputTag("analyze","PrimVtxIsFake");
    tPrimVtxNdof               = edm::InputTag("analyze","PrimVtxNdof");
    tPrimVtxx                  = edm::InputTag("analyze","PrimVtxx");
    tPrimVtxy                  = edm::InputTag("analyze","PrimVtxy");
    tPrimVtxz                  = edm::InputTag("analyze","PrimVtxz");
    tPromptnessLevel           = edm::InputTag("analyze","PromptnessLevel");
    tRawMET                    = edm::InputTag("analyze","RawMET");
    tRho                       = edm::InputTag("analyze","Rho");
    tRhoForIso                 = edm::InputTag("analyze","RhoForIso");
    tRun                       = edm::InputTag("analyze","Run");
    tSumEt                     = edm::InputTag("analyze","SumEt");
    tTCMET                     = edm::InputTag("analyze","TCMET");
    tTCMETpx                   = edm::InputTag("analyze","TCMETpx");
    tTCMETpy                   = edm::InputTag("analyze","TCMETpy");
    tTauDecayModeFinding       = edm::InputTag("analyze","TauDecayModeFinding");
    tTauEta                    = edm::InputTag("analyze","TauEta");
    tTauNObjs                  = edm::InputTag("analyze","TauNObjs");
    tTauPt                     = edm::InputTag("analyze","TauPt");
    tgenInfoEta                = edm::InputTag("analyze","genInfoEta");
    tgenInfoId                 = edm::InputTag("analyze","genInfoId");
    tgenInfoM                  = edm::InputTag("analyze","genInfoM");
    tgenInfoMo1                = edm::InputTag("analyze","genInfoMo1");
    tgenInfoMo2                = edm::InputTag("analyze","genInfoMo2");
    tgenInfoPhi                = edm::InputTag("analyze","genInfoPhi");
    tgenInfoPt                 = edm::InputTag("analyze","genInfoPt");
    tgenInfoStatus             = edm::InputTag("analyze","genInfoStatus");
    tnGenParticles             = edm::InputTag("analyze","nGenParticles");
    tpdfW                      = edm::InputTag("analyze","pdfW");
    tpdfWsum                   = edm::InputTag("analyze","pdfWsum");
    tprocess                   = edm::InputTag("analyze","process");
    txSMS                      = edm::InputTag("analyze","xSMS");
    txbarSMS                   = edm::InputTag("analyze","xbarSMS");

}
