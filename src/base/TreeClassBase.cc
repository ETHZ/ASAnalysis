#include "base/TreeClassBase.hh"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>

//____________________________________________________________________
TreeClassBase::TreeClassBase(const std::vector<std::string>& fileList)
{
    fEvent = new fwlite::ChainEvent(fileList);
    fCurRun = -1;
    Init();
}

//____________________________________________________________________
TreeClassBase::~TreeClassBase()
{
    if (!fEvent) return;
    delete fEvent;
}

//____________________________________________________________________
// Retrieve all branches ("getByLabel")
const bool TreeClassBase::GetAllByLabel(void) {

    const edm::EventBase* event = fEvent;
    bool result;

    // Load run information if run has changed
    if ( fCurRun != event->id().run() ) {
      fCurRun = event->id().run();
      const edm::RunBase& run = fEvent->getRun();

      // Get all run handles and assign to members
      result &= run.getByLabel( tBtagMatchDeltaR, hBtagMatchDeltaR );
      if ( hBtagMatchDeltaR.isValid() ) BtagMatchDeltaR = *hBtagMatchDeltaR;
      result &= run.getByLabel( tExtXSecLO, hExtXSecLO );
      if ( hExtXSecLO.isValid() ) ExtXSecLO = *hExtXSecLO;
      result &= run.getByLabel( tExtXSecNLO, hExtXSecNLO );
      if ( hExtXSecNLO.isValid() ) ExtXSecNLO = *hExtXSecNLO;
      result &= run.getByLabel( tHLTLabels, hHLTLabels );
      if ( hHLTLabels.isValid() ) HLTLabels = *hHLTLabels;
      result &= run.getByLabel( tHLTNames, hHLTNames );
      if ( hHLTNames.isValid() ) HLTNames = *hHLTNames;
      result &= run.getByLabel( tIntXSec, hIntXSec );
      if ( hIntXSec.isValid() ) IntXSec = *hIntXSec;
      result &= run.getByLabel( tL1PhysMenu, hL1PhysMenu );
      if ( hL1PhysMenu.isValid() ) L1PhysMenu = *hL1PhysMenu;
      result &= run.getByLabel( tMaxElEta, hMaxElEta );
      if ( hMaxElEta.isValid() ) MaxElEta = *hMaxElEta;
      result &= run.getByLabel( tMaxGenJetEta, hMaxGenJetEta );
      if ( hMaxGenJetEta.isValid() ) MaxGenJetEta = *hMaxGenJetEta;
      result &= run.getByLabel( tMaxGenLeptEta, hMaxGenLeptEta );
      if ( hMaxGenLeptEta.isValid() ) MaxGenLeptEta = *hMaxGenLeptEta;
      result &= run.getByLabel( tMaxGenPhotEta, hMaxGenPhotEta );
      if ( hMaxGenPhotEta.isValid() ) MaxGenPhotEta = *hMaxGenPhotEta;
      result &= run.getByLabel( tMaxJEta, hMaxJEta );
      if ( hMaxJEta.isValid() ) MaxJEta = *hMaxJEta;
      result &= run.getByLabel( tMaxMuEta, hMaxMuEta );
      if ( hMaxMuEta.isValid() ) MaxMuEta = *hMaxMuEta;
      result &= run.getByLabel( tMaxNEBhits, hMaxNEBhits );
      if ( hMaxNEBhits.isValid() ) MaxNEBhits = *hMaxNEBhits;
      result &= run.getByLabel( tMaxNEles, hMaxNEles );
      if ( hMaxNEles.isValid() ) MaxNEles = *hMaxNEles;
      result &= run.getByLabel( tMaxNGenJet, hMaxNGenJet );
      if ( hMaxNGenJet.isValid() ) MaxNGenJet = *hMaxNGenJet;
      result &= run.getByLabel( tMaxNGenLep, hMaxNGenLep );
      if ( hMaxNGenLep.isValid() ) MaxNGenLep = *hMaxNGenLep;
      result &= run.getByLabel( tMaxNGenPho, hMaxNGenPho );
      if ( hMaxNGenPho.isValid() ) MaxNGenPho = *hMaxNGenPho;
      result &= run.getByLabel( tMaxNJets, hMaxNJets );
      if ( hMaxNJets.isValid() ) MaxNJets = *hMaxNJets;
      result &= run.getByLabel( tMaxNMus, hMaxNMus );
      if ( hMaxNMus.isValid() ) MaxNMus = *hMaxNMus;
      result &= run.getByLabel( tMaxNPhotons, hMaxNPhotons );
      if ( hMaxNPhotons.isValid() ) MaxNPhotons = *hMaxNPhotons;
      result &= run.getByLabel( tMaxNPileup, hMaxNPileup );
      if ( hMaxNPileup.isValid() ) MaxNPileup = *hMaxNPileup;
      result &= run.getByLabel( tMaxNSC, hMaxNSC );
      if ( hMaxNSC.isValid() ) MaxNSC = *hMaxNSC;
      result &= run.getByLabel( tMaxNTrks, hMaxNTrks );
      if ( hMaxNTrks.isValid() ) MaxNTrks = *hMaxNTrks;
      result &= run.getByLabel( tMaxNVrtx, hMaxNVrtx );
      if ( hMaxNVrtx.isValid() ) MaxNVrtx = *hMaxNVrtx;
      result &= run.getByLabel( tMaxPhotonEta, hMaxPhotonEta );
      if ( hMaxPhotonEta.isValid() ) MaxPhotonEta = *hMaxPhotonEta;
      result &= run.getByLabel( tMaxTrkEta, hMaxTrkEta );
      if ( hMaxTrkEta.isValid() ) MaxTrkEta = *hMaxTrkEta;
      result &= run.getByLabel( tMaxTrkNChi2, hMaxTrkNChi2 );
      if ( hMaxTrkNChi2.isValid() ) MaxTrkNChi2 = *hMaxTrkNChi2;
      result &= run.getByLabel( tMinEBRechitE, hMinEBRechitE );
      if ( hMinEBRechitE.isValid() ) MinEBRechitE = *hMinEBRechitE;
      result &= run.getByLabel( tMinElPt, hMinElPt );
      if ( hMinElPt.isValid() ) MinElPt = *hMinElPt;
      result &= run.getByLabel( tMinGenJetPt, hMinGenJetPt );
      if ( hMinGenJetPt.isValid() ) MinGenJetPt = *hMinGenJetPt;
      result &= run.getByLabel( tMinGenLeptPt, hMinGenLeptPt );
      if ( hMinGenLeptPt.isValid() ) MinGenLeptPt = *hMinGenLeptPt;
      result &= run.getByLabel( tMinGenPhotPt, hMinGenPhotPt );
      if ( hMinGenPhotPt.isValid() ) MinGenPhotPt = *hMinGenPhotPt;
      result &= run.getByLabel( tMinJEMfrac, hMinJEMfrac );
      if ( hMinJEMfrac.isValid() ) MinJEMfrac = *hMinJEMfrac;
      result &= run.getByLabel( tMinJPt, hMinJPt );
      if ( hMinJPt.isValid() ) MinJPt = *hMinJPt;
      result &= run.getByLabel( tMinMuPt, hMinMuPt );
      if ( hMinMuPt.isValid() ) MinMuPt = *hMinMuPt;
      result &= run.getByLabel( tMinPhotonPt, hMinPhotonPt );
      if ( hMinPhotonPt.isValid() ) MinPhotonPt = *hMinPhotonPt;
      result &= run.getByLabel( tMinRawJPt, hMinRawJPt );
      if ( hMinRawJPt.isValid() ) MinRawJPt = *hMinRawJPt;
      result &= run.getByLabel( tMinSCraw, hMinSCraw );
      if ( hMinSCraw.isValid() ) MinSCraw = *hMinSCraw;
      result &= run.getByLabel( tMinTrkNHits, hMinTrkNHits );
      if ( hMinTrkNHits.isValid() ) MinTrkNHits = *hMinTrkNHits;
      result &= run.getByLabel( tMinTrkPt, hMinTrkPt );
      if ( hMinTrkPt.isValid() ) MinTrkPt = *hMinTrkPt;
      result &= run.getByLabel( tPileUpData, hPileUpData );
      if ( hPileUpData.isValid() ) PileUpData = *hPileUpData;
      result &= run.getByLabel( tPileUpMC, hPileUpMC );
      if ( hPileUpMC.isValid() ) PileUpMC = *hPileUpMC;


    }

    // Get all event handles and assign to members
    result &= event->getByLabel( tA0, hA0 );
    if ( hA0.isValid() ) A0 = *hA0;
    result &= event->getByLabel( tBeamspotx, hBeamspotx );
    if ( hBeamspotx.isValid() ) Beamspotx = *hBeamspotx;
    result &= event->getByLabel( tBeamspoty, hBeamspoty );
    if ( hBeamspoty.isValid() ) Beamspoty = *hBeamspoty;
    result &= event->getByLabel( tBeamspotz, hBeamspotz );
    if ( hBeamspotz.isValid() ) Beamspotz = *hBeamspotz;
    result &= event->getByLabel( tCSCTightHaloID, hCSCTightHaloID );
    if ( hCSCTightHaloID.isValid() ) CSCTightHaloID = *hCSCTightHaloID;
    result &= event->getByLabel( tEBrechitChi2, hEBrechitChi2 );
    if ( hEBrechitChi2.isValid() ) EBrechitChi2 = *hEBrechitChi2;
    result &= event->getByLabel( tEBrechitE, hEBrechitE );
    if ( hEBrechitE.isValid() ) EBrechitE = *hEBrechitE;
    result &= event->getByLabel( tEBrechitE2oE9, hEBrechitE2oE9 );
    if ( hEBrechitE2oE9.isValid() ) EBrechitE2oE9 = *hEBrechitE2oE9;
    result &= event->getByLabel( tEBrechitE4oE1, hEBrechitE4oE1 );
    if ( hEBrechitE4oE1.isValid() ) EBrechitE4oE1 = *hEBrechitE4oE1;
    result &= event->getByLabel( tEBrechitEta, hEBrechitEta );
    if ( hEBrechitEta.isValid() ) EBrechitEta = *hEBrechitEta;
    result &= event->getByLabel( tEBrechitPhi, hEBrechitPhi );
    if ( hEBrechitPhi.isValid() ) EBrechitPhi = *hEBrechitPhi;
    result &= event->getByLabel( tEBrechitPt, hEBrechitPt );
    if ( hEBrechitPt.isValid() ) EBrechitPt = *hEBrechitPt;
    result &= event->getByLabel( tEBrechitTime, hEBrechitTime );
    if ( hEBrechitTime.isValid() ) EBrechitTime = *hEBrechitTime;
    result &= event->getByLabel( tECALEsumx, hECALEsumx );
    if ( hECALEsumx.isValid() ) ECALEsumx = *hECALEsumx;
    result &= event->getByLabel( tECALEsumy, hECALEsumy );
    if ( hECALEsumy.isValid() ) ECALEsumy = *hECALEsumy;
    result &= event->getByLabel( tECALEsumz, hECALEsumz );
    if ( hECALEsumz.isValid() ) ECALEsumz = *hECALEsumz;
    result &= event->getByLabel( tECALMET, hECALMET );
    if ( hECALMET.isValid() ) ECALMET = *hECALMET;
    result &= event->getByLabel( tECALMETEta, hECALMETEta );
    if ( hECALMETEta.isValid() ) ECALMETEta = *hECALMETEta;
    result &= event->getByLabel( tECALMETPhi, hECALMETPhi );
    if ( hECALMETPhi.isValid() ) ECALMETPhi = *hECALMETPhi;
    result &= event->getByLabel( tECALSumEt, hECALSumEt );
    if ( hECALSumEt.isValid() ) ECALSumEt = *hECALSumEt;
    result &= event->getByLabel( tEcalDeadTPFilterFlag, hEcalDeadTPFilterFlag );
    if ( hEcalDeadTPFilterFlag.isValid() ) EcalDeadTPFilterFlag = *hEcalDeadTPFilterFlag;
    result &= event->getByLabel( tElBasicClustersSize, hElBasicClustersSize );
    if ( hElBasicClustersSize.isValid() ) ElBasicClustersSize = *hElBasicClustersSize;
    result &= event->getByLabel( tElCInfoIsGsfCtfCons, hElCInfoIsGsfCtfCons );
    if ( hElCInfoIsGsfCtfCons.isValid() ) ElCInfoIsGsfCtfCons = *hElCInfoIsGsfCtfCons;
    result &= event->getByLabel( tElCInfoIsGsfCtfScPixCons, hElCInfoIsGsfCtfScPixCons );
    if ( hElCInfoIsGsfCtfScPixCons.isValid() ) ElCInfoIsGsfCtfScPixCons = *hElCInfoIsGsfCtfScPixCons;
    result &= event->getByLabel( tElCInfoIsGsfScPixCons, hElCInfoIsGsfScPixCons );
    if ( hElCInfoIsGsfScPixCons.isValid() ) ElCInfoIsGsfScPixCons = *hElCInfoIsGsfScPixCons;
    result &= event->getByLabel( tElCaloEnergy, hElCaloEnergy );
    if ( hElCaloEnergy.isValid() ) ElCaloEnergy = *hElCaloEnergy;
    result &= event->getByLabel( tElCharge, hElCharge );
    if ( hElCharge.isValid() ) ElCharge = *hElCharge;
    result &= event->getByLabel( tElChargeMisIDProb, hElChargeMisIDProb );
    if ( hElChargeMisIDProb.isValid() ) ElChargeMisIDProb = *hElChargeMisIDProb;
    result &= event->getByLabel( tElClosestCtfTrackCharge, hElClosestCtfTrackCharge );
    if ( hElClosestCtfTrackCharge.isValid() ) ElClosestCtfTrackCharge = *hElClosestCtfTrackCharge;
    result &= event->getByLabel( tElClosestCtfTrackEta, hElClosestCtfTrackEta );
    if ( hElClosestCtfTrackEta.isValid() ) ElClosestCtfTrackEta = *hElClosestCtfTrackEta;
    result &= event->getByLabel( tElClosestCtfTrackPhi, hElClosestCtfTrackPhi );
    if ( hElClosestCtfTrackPhi.isValid() ) ElClosestCtfTrackPhi = *hElClosestCtfTrackPhi;
    result &= event->getByLabel( tElClosestCtfTrackPt, hElClosestCtfTrackPt );
    if ( hElClosestCtfTrackPt.isValid() ) ElClosestCtfTrackPt = *hElClosestCtfTrackPt;
    result &= event->getByLabel( tElConvPartnerTrkCharge, hElConvPartnerTrkCharge );
    if ( hElConvPartnerTrkCharge.isValid() ) ElConvPartnerTrkCharge = *hElConvPartnerTrkCharge;
    result &= event->getByLabel( tElConvPartnerTrkDCot, hElConvPartnerTrkDCot );
    if ( hElConvPartnerTrkDCot.isValid() ) ElConvPartnerTrkDCot = *hElConvPartnerTrkDCot;
    result &= event->getByLabel( tElConvPartnerTrkDist, hElConvPartnerTrkDist );
    if ( hElConvPartnerTrkDist.isValid() ) ElConvPartnerTrkDist = *hElConvPartnerTrkDist;
    result &= event->getByLabel( tElConvPartnerTrkEta, hElConvPartnerTrkEta );
    if ( hElConvPartnerTrkEta.isValid() ) ElConvPartnerTrkEta = *hElConvPartnerTrkEta;
    result &= event->getByLabel( tElConvPartnerTrkPhi, hElConvPartnerTrkPhi );
    if ( hElConvPartnerTrkPhi.isValid() ) ElConvPartnerTrkPhi = *hElConvPartnerTrkPhi;
    result &= event->getByLabel( tElConvPartnerTrkPt, hElConvPartnerTrkPt );
    if ( hElConvPartnerTrkPt.isValid() ) ElConvPartnerTrkPt = *hElConvPartnerTrkPt;
    result &= event->getByLabel( tElD0BS, hElD0BS );
    if ( hElD0BS.isValid() ) ElD0BS = *hElD0BS;
    result &= event->getByLabel( tElD0E, hElD0E );
    if ( hElD0E.isValid() ) ElD0E = *hElD0E;
    result &= event->getByLabel( tElD0PV, hElD0PV );
    if ( hElD0PV.isValid() ) ElD0PV = *hElD0PV;
    result &= event->getByLabel( tElDR03EcalRecHitSumEt, hElDR03EcalRecHitSumEt );
    if ( hElDR03EcalRecHitSumEt.isValid() ) ElDR03EcalRecHitSumEt = *hElDR03EcalRecHitSumEt;
    result &= event->getByLabel( tElDR03HcalTowerSumEt, hElDR03HcalTowerSumEt );
    if ( hElDR03HcalTowerSumEt.isValid() ) ElDR03HcalTowerSumEt = *hElDR03HcalTowerSumEt;
    result &= event->getByLabel( tElDR03TkSumPt, hElDR03TkSumPt );
    if ( hElDR03TkSumPt.isValid() ) ElDR03TkSumPt = *hElDR03TkSumPt;
    result &= event->getByLabel( tElDR04EcalRecHitSumEt, hElDR04EcalRecHitSumEt );
    if ( hElDR04EcalRecHitSumEt.isValid() ) ElDR04EcalRecHitSumEt = *hElDR04EcalRecHitSumEt;
    result &= event->getByLabel( tElDR04HcalTowerSumEt, hElDR04HcalTowerSumEt );
    if ( hElDR04HcalTowerSumEt.isValid() ) ElDR04HcalTowerSumEt = *hElDR04HcalTowerSumEt;
    result &= event->getByLabel( tElDR04TkSumPt, hElDR04TkSumPt );
    if ( hElDR04TkSumPt.isValid() ) ElDR04TkSumPt = *hElDR04TkSumPt;
    result &= event->getByLabel( tElDeltaEtaSeedClusterAtCalo, hElDeltaEtaSeedClusterAtCalo );
    if ( hElDeltaEtaSeedClusterAtCalo.isValid() ) ElDeltaEtaSeedClusterAtCalo = *hElDeltaEtaSeedClusterAtCalo;
    result &= event->getByLabel( tElDeltaEtaSuperClusterAtVtx, hElDeltaEtaSuperClusterAtVtx );
    if ( hElDeltaEtaSuperClusterAtVtx.isValid() ) ElDeltaEtaSuperClusterAtVtx = *hElDeltaEtaSuperClusterAtVtx;
    result &= event->getByLabel( tElDeltaPhiSeedClusterAtCalo, hElDeltaPhiSeedClusterAtCalo );
    if ( hElDeltaPhiSeedClusterAtCalo.isValid() ) ElDeltaPhiSeedClusterAtCalo = *hElDeltaPhiSeedClusterAtCalo;
    result &= event->getByLabel( tElDeltaPhiSuperClusterAtVtx, hElDeltaPhiSuperClusterAtVtx );
    if ( hElDeltaPhiSuperClusterAtVtx.isValid() ) ElDeltaPhiSuperClusterAtVtx = *hElDeltaPhiSuperClusterAtVtx;
    result &= event->getByLabel( tElDzBS, hElDzBS );
    if ( hElDzBS.isValid() ) ElDzBS = *hElDzBS;
    result &= event->getByLabel( tElDzE, hElDzE );
    if ( hElDzE.isValid() ) ElDzE = *hElDzE;
    result &= event->getByLabel( tElDzPV, hElDzPV );
    if ( hElDzPV.isValid() ) ElDzPV = *hElDzPV;
    result &= event->getByLabel( tElE, hElE );
    if ( hElE.isValid() ) ElE = *hElE;
    result &= event->getByLabel( tElE1OverE9, hElE1OverE9 );
    if ( hElE1OverE9.isValid() ) ElE1OverE9 = *hElE1OverE9;
    result &= event->getByLabel( tElE1x5, hElE1x5 );
    if ( hElE1x5.isValid() ) ElE1x5 = *hElE1x5;
    result &= event->getByLabel( tElE2x5Max, hElE2x5Max );
    if ( hElE2x5Max.isValid() ) ElE2x5Max = *hElE2x5Max;
    result &= event->getByLabel( tElE5x5, hElE5x5 );
    if ( hElE5x5.isValid() ) ElE5x5 = *hElE5x5;
    result &= event->getByLabel( tElESuperClusterOverP, hElESuperClusterOverP );
    if ( hElESuperClusterOverP.isValid() ) ElESuperClusterOverP = *hElESuperClusterOverP;
    result &= event->getByLabel( tElEcalDriven, hElEcalDriven );
    if ( hElEcalDriven.isValid() ) ElEcalDriven = *hElEcalDriven;
    result &= event->getByLabel( tElEcalEnergyError, hElEcalEnergyError );
    if ( hElEcalEnergyError.isValid() ) ElEcalEnergyError = *hElEcalEnergyError;
    result &= event->getByLabel( tElEleMomentumError, hElEleMomentumError );
    if ( hElEleMomentumError.isValid() ) ElEleMomentumError = *hElEleMomentumError;
    result &= event->getByLabel( tElEt, hElEt );
    if ( hElEt.isValid() ) ElEt = *hElEt;
    result &= event->getByLabel( tElEta, hElEta );
    if ( hElEta.isValid() ) ElEta = *hElEta;
    result &= event->getByLabel( tElGenE, hElGenE );
    if ( hElGenE.isValid() ) ElGenE = *hElGenE;
    result &= event->getByLabel( tElGenEta, hElGenEta );
    if ( hElGenEta.isValid() ) ElGenEta = *hElGenEta;
    result &= event->getByLabel( tElGenGME, hElGenGME );
    if ( hElGenGME.isValid() ) ElGenGME = *hElGenGME;
    result &= event->getByLabel( tElGenGMEta, hElGenGMEta );
    if ( hElGenGMEta.isValid() ) ElGenGMEta = *hElGenGMEta;
    result &= event->getByLabel( tElGenGMID, hElGenGMID );
    if ( hElGenGMID.isValid() ) ElGenGMID = *hElGenGMID;
    result &= event->getByLabel( tElGenGMPhi, hElGenGMPhi );
    if ( hElGenGMPhi.isValid() ) ElGenGMPhi = *hElGenGMPhi;
    result &= event->getByLabel( tElGenGMPt, hElGenGMPt );
    if ( hElGenGMPt.isValid() ) ElGenGMPt = *hElGenGMPt;
    result &= event->getByLabel( tElGenGMStatus, hElGenGMStatus );
    if ( hElGenGMStatus.isValid() ) ElGenGMStatus = *hElGenGMStatus;
    result &= event->getByLabel( tElGenID, hElGenID );
    if ( hElGenID.isValid() ) ElGenID = *hElGenID;
    result &= event->getByLabel( tElGenME, hElGenME );
    if ( hElGenME.isValid() ) ElGenME = *hElGenME;
    result &= event->getByLabel( tElGenMEta, hElGenMEta );
    if ( hElGenMEta.isValid() ) ElGenMEta = *hElGenMEta;
    result &= event->getByLabel( tElGenMID, hElGenMID );
    if ( hElGenMID.isValid() ) ElGenMID = *hElGenMID;
    result &= event->getByLabel( tElGenMPhi, hElGenMPhi );
    if ( hElGenMPhi.isValid() ) ElGenMPhi = *hElGenMPhi;
    result &= event->getByLabel( tElGenMPt, hElGenMPt );
    if ( hElGenMPt.isValid() ) ElGenMPt = *hElGenMPt;
    result &= event->getByLabel( tElGenMStatus, hElGenMStatus );
    if ( hElGenMStatus.isValid() ) ElGenMStatus = *hElGenMStatus;
    result &= event->getByLabel( tElGenPhi, hElGenPhi );
    if ( hElGenPhi.isValid() ) ElGenPhi = *hElGenPhi;
    result &= event->getByLabel( tElGenPt, hElGenPt );
    if ( hElGenPt.isValid() ) ElGenPt = *hElGenPt;
    result &= event->getByLabel( tElGenStatus, hElGenStatus );
    if ( hElGenStatus.isValid() ) ElGenStatus = *hElGenStatus;
    result &= event->getByLabel( tElGood, hElGood );
    if ( hElGood.isValid() ) ElGood = *hElGood;
    result &= event->getByLabel( tElGsfTkEta, hElGsfTkEta );
    if ( hElGsfTkEta.isValid() ) ElGsfTkEta = *hElGsfTkEta;
    result &= event->getByLabel( tElGsfTkPhi, hElGsfTkPhi );
    if ( hElGsfTkPhi.isValid() ) ElGsfTkPhi = *hElGsfTkPhi;
    result &= event->getByLabel( tElGsfTkPt, hElGsfTkPt );
    if ( hElGsfTkPt.isValid() ) ElGsfTkPt = *hElGsfTkPt;
    result &= event->getByLabel( tElHcalOverEcal, hElHcalOverEcal );
    if ( hElHcalOverEcal.isValid() ) ElHcalOverEcal = *hElHcalOverEcal;
    result &= event->getByLabel( tElIDLoose, hElIDLoose );
    if ( hElIDLoose.isValid() ) ElIDLoose = *hElIDLoose;
    result &= event->getByLabel( tElIDMva, hElIDMva );
    if ( hElIDMva.isValid() ) ElIDMva = *hElIDMva;
    result &= event->getByLabel( tElIDRobustLoose, hElIDRobustLoose );
    if ( hElIDRobustLoose.isValid() ) ElIDRobustLoose = *hElIDRobustLoose;
    result &= event->getByLabel( tElIDRobustTight, hElIDRobustTight );
    if ( hElIDRobustTight.isValid() ) ElIDRobustTight = *hElIDRobustTight;
    result &= event->getByLabel( tElIDTight, hElIDTight );
    if ( hElIDTight.isValid() ) ElIDTight = *hElIDTight;
    result &= event->getByLabel( tElIDsimpleWP80relIso, hElIDsimpleWP80relIso );
    if ( hElIDsimpleWP80relIso.isValid() ) ElIDsimpleWP80relIso = *hElIDsimpleWP80relIso;
    result &= event->getByLabel( tElIDsimpleWP85relIso, hElIDsimpleWP85relIso );
    if ( hElIDsimpleWP85relIso.isValid() ) ElIDsimpleWP85relIso = *hElIDsimpleWP85relIso;
    result &= event->getByLabel( tElIDsimpleWP90relIso, hElIDsimpleWP90relIso );
    if ( hElIDsimpleWP90relIso.isValid() ) ElIDsimpleWP90relIso = *hElIDsimpleWP90relIso;
    result &= event->getByLabel( tElIDsimpleWP95relIso, hElIDsimpleWP95relIso );
    if ( hElIDsimpleWP95relIso.isValid() ) ElIDsimpleWP95relIso = *hElIDsimpleWP95relIso;
    result &= event->getByLabel( tElIDsimpleWPrelIso, hElIDsimpleWPrelIso );
    if ( hElIDsimpleWPrelIso.isValid() ) ElIDsimpleWPrelIso = *hElIDsimpleWPrelIso;
    result &= event->getByLabel( tElInGap, hElInGap );
    if ( hElInGap.isValid() ) ElInGap = *hElInGap;
    result &= event->getByLabel( tElIsIso, hElIsIso );
    if ( hElIsIso.isValid() ) ElIsIso = *hElIsIso;
    result &= event->getByLabel( tElNBrems, hElNBrems );
    if ( hElNBrems.isValid() ) ElNBrems = *hElNBrems;
    result &= event->getByLabel( tElNChi2, hElNChi2 );
    if ( hElNChi2.isValid() ) ElNChi2 = *hElNChi2;
    result &= event->getByLabel( tElNumberOfMissingInnerHits, hElNumberOfMissingInnerHits );
    if ( hElNumberOfMissingInnerHits.isValid() ) ElNumberOfMissingInnerHits = *hElNumberOfMissingInnerHits;
    result &= event->getByLabel( tElPhi, hElPhi );
    if ( hElPhi.isValid() ) ElPhi = *hElPhi;
    result &= event->getByLabel( tElPt, hElPt );
    if ( hElPt.isValid() ) ElPt = *hElPt;
    result &= event->getByLabel( tElPtE, hElPtE );
    if ( hElPtE.isValid() ) ElPtE = *hElPtE;
    result &= event->getByLabel( tElPx, hElPx );
    if ( hElPx.isValid() ) ElPx = *hElPx;
    result &= event->getByLabel( tElPy, hElPy );
    if ( hElPy.isValid() ) ElPy = *hElPy;
    result &= event->getByLabel( tElPz, hElPz );
    if ( hElPz.isValid() ) ElPz = *hElPz;
    result &= event->getByLabel( tElRelIso03, hElRelIso03 );
    if ( hElRelIso03.isValid() ) ElRelIso03 = *hElRelIso03;
    result &= event->getByLabel( tElRelIso04, hElRelIso04 );
    if ( hElRelIso04.isValid() ) ElRelIso04 = *hElRelIso04;
    result &= event->getByLabel( tElS4OverS1, hElS4OverS1 );
    if ( hElS4OverS1.isValid() ) ElS4OverS1 = *hElS4OverS1;
    result &= event->getByLabel( tElSCEta, hElSCEta );
    if ( hElSCEta.isValid() ) ElSCEta = *hElSCEta;
    result &= event->getByLabel( tElSCindex, hElSCindex );
    if ( hElSCindex.isValid() ) ElSCindex = *hElSCindex;
    result &= event->getByLabel( tElScPixCharge, hElScPixCharge );
    if ( hElScPixCharge.isValid() ) ElScPixCharge = *hElScPixCharge;
    result &= event->getByLabel( tElScSeedSeverity, hElScSeedSeverity );
    if ( hElScSeedSeverity.isValid() ) ElScSeedSeverity = *hElScSeedSeverity;
    result &= event->getByLabel( tElSigmaIetaIeta, hElSigmaIetaIeta );
    if ( hElSigmaIetaIeta.isValid() ) ElSigmaIetaIeta = *hElSigmaIetaIeta;
    result &= event->getByLabel( tElTheta, hElTheta );
    if ( hElTheta.isValid() ) ElTheta = *hElTheta;
    result &= event->getByLabel( tElTrackerDriven, hElTrackerDriven );
    if ( hElTrackerDriven.isValid() ) ElTrackerDriven = *hElTrackerDriven;
    result &= event->getByLabel( tElTrkMomAtVtx, hElTrkMomAtVtx );
    if ( hElTrkMomAtVtx.isValid() ) ElTrkMomAtVtx = *hElTrkMomAtVtx;
    result &= event->getByLabel( tElTrkMomentumError, hElTrkMomentumError );
    if ( hElTrkMomentumError.isValid() ) ElTrkMomentumError = *hElTrkMomentumError;
    result &= event->getByLabel( tElfbrem, hElfbrem );
    if ( hElfbrem.isValid() ) Elfbrem = *hElfbrem;
    result &= event->getByLabel( tEvent, hEvent );
    if ( hEvent.isValid() ) Event = *hEvent;
    result &= event->getByLabel( tGenJetE, hGenJetE );
    if ( hGenJetE.isValid() ) GenJetE = *hGenJetE;
    result &= event->getByLabel( tGenJetEmE, hGenJetEmE );
    if ( hGenJetEmE.isValid() ) GenJetEmE = *hGenJetEmE;
    result &= event->getByLabel( tGenJetEta, hGenJetEta );
    if ( hGenJetEta.isValid() ) GenJetEta = *hGenJetEta;
    result &= event->getByLabel( tGenJetHadE, hGenJetHadE );
    if ( hGenJetHadE.isValid() ) GenJetHadE = *hGenJetHadE;
    result &= event->getByLabel( tGenJetInvE, hGenJetInvE );
    if ( hGenJetInvE.isValid() ) GenJetInvE = *hGenJetInvE;
    result &= event->getByLabel( tGenJetPhi, hGenJetPhi );
    if ( hGenJetPhi.isValid() ) GenJetPhi = *hGenJetPhi;
    result &= event->getByLabel( tGenJetPt, hGenJetPt );
    if ( hGenJetPt.isValid() ) GenJetPt = *hGenJetPt;
    result &= event->getByLabel( tGenLeptonEta, hGenLeptonEta );
    if ( hGenLeptonEta.isValid() ) GenLeptonEta = *hGenLeptonEta;
    result &= event->getByLabel( tGenLeptonGMEta, hGenLeptonGMEta );
    if ( hGenLeptonGMEta.isValid() ) GenLeptonGMEta = *hGenLeptonGMEta;
    result &= event->getByLabel( tGenLeptonGMID, hGenLeptonGMID );
    if ( hGenLeptonGMID.isValid() ) GenLeptonGMID = *hGenLeptonGMID;
    result &= event->getByLabel( tGenLeptonGMPhi, hGenLeptonGMPhi );
    if ( hGenLeptonGMPhi.isValid() ) GenLeptonGMPhi = *hGenLeptonGMPhi;
    result &= event->getByLabel( tGenLeptonGMPt, hGenLeptonGMPt );
    if ( hGenLeptonGMPt.isValid() ) GenLeptonGMPt = *hGenLeptonGMPt;
    result &= event->getByLabel( tGenLeptonGMStatus, hGenLeptonGMStatus );
    if ( hGenLeptonGMStatus.isValid() ) GenLeptonGMStatus = *hGenLeptonGMStatus;
    result &= event->getByLabel( tGenLeptonID, hGenLeptonID );
    if ( hGenLeptonID.isValid() ) GenLeptonID = *hGenLeptonID;
    result &= event->getByLabel( tGenLeptonMEta, hGenLeptonMEta );
    if ( hGenLeptonMEta.isValid() ) GenLeptonMEta = *hGenLeptonMEta;
    result &= event->getByLabel( tGenLeptonMID, hGenLeptonMID );
    if ( hGenLeptonMID.isValid() ) GenLeptonMID = *hGenLeptonMID;
    result &= event->getByLabel( tGenLeptonMPhi, hGenLeptonMPhi );
    if ( hGenLeptonMPhi.isValid() ) GenLeptonMPhi = *hGenLeptonMPhi;
    result &= event->getByLabel( tGenLeptonMPt, hGenLeptonMPt );
    if ( hGenLeptonMPt.isValid() ) GenLeptonMPt = *hGenLeptonMPt;
    result &= event->getByLabel( tGenLeptonMStatus, hGenLeptonMStatus );
    if ( hGenLeptonMStatus.isValid() ) GenLeptonMStatus = *hGenLeptonMStatus;
    result &= event->getByLabel( tGenLeptonPhi, hGenLeptonPhi );
    if ( hGenLeptonPhi.isValid() ) GenLeptonPhi = *hGenLeptonPhi;
    result &= event->getByLabel( tGenLeptonPt, hGenLeptonPt );
    if ( hGenLeptonPt.isValid() ) GenLeptonPt = *hGenLeptonPt;
    result &= event->getByLabel( tGenMET, hGenMET );
    if ( hGenMET.isValid() ) GenMET = *hGenMET;
    result &= event->getByLabel( tGenMETphi, hGenMETphi );
    if ( hGenMETphi.isValid() ) GenMETphi = *hGenMETphi;
    result &= event->getByLabel( tGenMETpx, hGenMETpx );
    if ( hGenMETpx.isValid() ) GenMETpx = *hGenMETpx;
    result &= event->getByLabel( tGenMETpy, hGenMETpy );
    if ( hGenMETpy.isValid() ) GenMETpy = *hGenMETpy;
    result &= event->getByLabel( tGenPhotonEta, hGenPhotonEta );
    if ( hGenPhotonEta.isValid() ) GenPhotonEta = *hGenPhotonEta;
    result &= event->getByLabel( tGenPhotonMotherID, hGenPhotonMotherID );
    if ( hGenPhotonMotherID.isValid() ) GenPhotonMotherID = *hGenPhotonMotherID;
    result &= event->getByLabel( tGenPhotonMotherStatus, hGenPhotonMotherStatus );
    if ( hGenPhotonMotherStatus.isValid() ) GenPhotonMotherStatus = *hGenPhotonMotherStatus;
    result &= event->getByLabel( tGenPhotonPartonMindR, hGenPhotonPartonMindR );
    if ( hGenPhotonPartonMindR.isValid() ) GenPhotonPartonMindR = *hGenPhotonPartonMindR;
    result &= event->getByLabel( tGenPhotonPhi, hGenPhotonPhi );
    if ( hGenPhotonPhi.isValid() ) GenPhotonPhi = *hGenPhotonPhi;
    result &= event->getByLabel( tGenPhotonPt, hGenPhotonPt );
    if ( hGenPhotonPt.isValid() ) GenPhotonPt = *hGenPhotonPt;
    result &= event->getByLabel( tGenWeight, hGenWeight );
    if ( hGenWeight.isValid() ) GenWeight = *hGenWeight;
    result &= event->getByLabel( tGoodEvent, hGoodEvent );
    if ( hGoodEvent.isValid() ) GoodEvent = *hGoodEvent;
    result &= event->getByLabel( tHBHENoiseFlag, hHBHENoiseFlag );
    if ( hHBHENoiseFlag.isValid() ) HBHENoiseFlag = *hHBHENoiseFlag;
    result &= event->getByLabel( tHBHENoiseFlagIso, hHBHENoiseFlagIso );
    if ( hHBHENoiseFlagIso.isValid() ) HBHENoiseFlagIso = *hHBHENoiseFlagIso;
    result &= event->getByLabel( tHCALEsumx, hHCALEsumx );
    if ( hHCALEsumx.isValid() ) HCALEsumx = *hHCALEsumx;
    result &= event->getByLabel( tHCALEsumy, hHCALEsumy );
    if ( hHCALEsumy.isValid() ) HCALEsumy = *hHCALEsumy;
    result &= event->getByLabel( tHCALEsumz, hHCALEsumz );
    if ( hHCALEsumz.isValid() ) HCALEsumz = *hHCALEsumz;
    result &= event->getByLabel( tHCALMET, hHCALMET );
    if ( hHCALMET.isValid() ) HCALMET = *hHCALMET;
    result &= event->getByLabel( tHCALMETPhi, hHCALMETPhi );
    if ( hHCALMETPhi.isValid() ) HCALMETPhi = *hHCALMETPhi;
    result &= event->getByLabel( tHCALMETeta, hHCALMETeta );
    if ( hHCALMETeta.isValid() ) HCALMETeta = *hHCALMETeta;
    result &= event->getByLabel( tHCALSumEt, hHCALSumEt );
    if ( hHCALSumEt.isValid() ) HCALSumEt = *hHCALSumEt;
    result &= event->getByLabel( tHLTObjectEta0, hHLTObjectEta0 );
    if ( hHLTObjectEta0.isValid() ) HLTObjectEta0 = *hHLTObjectEta0;
    result &= event->getByLabel( tHLTObjectEta1, hHLTObjectEta1 );
    if ( hHLTObjectEta1.isValid() ) HLTObjectEta1 = *hHLTObjectEta1;
    result &= event->getByLabel( tHLTObjectEta2, hHLTObjectEta2 );
    if ( hHLTObjectEta2.isValid() ) HLTObjectEta2 = *hHLTObjectEta2;
    result &= event->getByLabel( tHLTObjectEta3, hHLTObjectEta3 );
    if ( hHLTObjectEta3.isValid() ) HLTObjectEta3 = *hHLTObjectEta3;
    result &= event->getByLabel( tHLTObjectEta4, hHLTObjectEta4 );
    if ( hHLTObjectEta4.isValid() ) HLTObjectEta4 = *hHLTObjectEta4;
    result &= event->getByLabel( tHLTObjectEta5, hHLTObjectEta5 );
    if ( hHLTObjectEta5.isValid() ) HLTObjectEta5 = *hHLTObjectEta5;
    result &= event->getByLabel( tHLTObjectEta6, hHLTObjectEta6 );
    if ( hHLTObjectEta6.isValid() ) HLTObjectEta6 = *hHLTObjectEta6;
    result &= event->getByLabel( tHLTObjectEta7, hHLTObjectEta7 );
    if ( hHLTObjectEta7.isValid() ) HLTObjectEta7 = *hHLTObjectEta7;
    result &= event->getByLabel( tHLTObjectEta8, hHLTObjectEta8 );
    if ( hHLTObjectEta8.isValid() ) HLTObjectEta8 = *hHLTObjectEta8;
    result &= event->getByLabel( tHLTObjectEta9, hHLTObjectEta9 );
    if ( hHLTObjectEta9.isValid() ) HLTObjectEta9 = *hHLTObjectEta9;
    result &= event->getByLabel( tHLTObjectID0, hHLTObjectID0 );
    if ( hHLTObjectID0.isValid() ) HLTObjectID0 = *hHLTObjectID0;
    result &= event->getByLabel( tHLTObjectID1, hHLTObjectID1 );
    if ( hHLTObjectID1.isValid() ) HLTObjectID1 = *hHLTObjectID1;
    result &= event->getByLabel( tHLTObjectID2, hHLTObjectID2 );
    if ( hHLTObjectID2.isValid() ) HLTObjectID2 = *hHLTObjectID2;
    result &= event->getByLabel( tHLTObjectID3, hHLTObjectID3 );
    if ( hHLTObjectID3.isValid() ) HLTObjectID3 = *hHLTObjectID3;
    result &= event->getByLabel( tHLTObjectID4, hHLTObjectID4 );
    if ( hHLTObjectID4.isValid() ) HLTObjectID4 = *hHLTObjectID4;
    result &= event->getByLabel( tHLTObjectID5, hHLTObjectID5 );
    if ( hHLTObjectID5.isValid() ) HLTObjectID5 = *hHLTObjectID5;
    result &= event->getByLabel( tHLTObjectID6, hHLTObjectID6 );
    if ( hHLTObjectID6.isValid() ) HLTObjectID6 = *hHLTObjectID6;
    result &= event->getByLabel( tHLTObjectID7, hHLTObjectID7 );
    if ( hHLTObjectID7.isValid() ) HLTObjectID7 = *hHLTObjectID7;
    result &= event->getByLabel( tHLTObjectID8, hHLTObjectID8 );
    if ( hHLTObjectID8.isValid() ) HLTObjectID8 = *hHLTObjectID8;
    result &= event->getByLabel( tHLTObjectID9, hHLTObjectID9 );
    if ( hHLTObjectID9.isValid() ) HLTObjectID9 = *hHLTObjectID9;
    result &= event->getByLabel( tHLTObjectPhi0, hHLTObjectPhi0 );
    if ( hHLTObjectPhi0.isValid() ) HLTObjectPhi0 = *hHLTObjectPhi0;
    result &= event->getByLabel( tHLTObjectPhi1, hHLTObjectPhi1 );
    if ( hHLTObjectPhi1.isValid() ) HLTObjectPhi1 = *hHLTObjectPhi1;
    result &= event->getByLabel( tHLTObjectPhi2, hHLTObjectPhi2 );
    if ( hHLTObjectPhi2.isValid() ) HLTObjectPhi2 = *hHLTObjectPhi2;
    result &= event->getByLabel( tHLTObjectPhi3, hHLTObjectPhi3 );
    if ( hHLTObjectPhi3.isValid() ) HLTObjectPhi3 = *hHLTObjectPhi3;
    result &= event->getByLabel( tHLTObjectPhi4, hHLTObjectPhi4 );
    if ( hHLTObjectPhi4.isValid() ) HLTObjectPhi4 = *hHLTObjectPhi4;
    result &= event->getByLabel( tHLTObjectPhi5, hHLTObjectPhi5 );
    if ( hHLTObjectPhi5.isValid() ) HLTObjectPhi5 = *hHLTObjectPhi5;
    result &= event->getByLabel( tHLTObjectPhi6, hHLTObjectPhi6 );
    if ( hHLTObjectPhi6.isValid() ) HLTObjectPhi6 = *hHLTObjectPhi6;
    result &= event->getByLabel( tHLTObjectPhi7, hHLTObjectPhi7 );
    if ( hHLTObjectPhi7.isValid() ) HLTObjectPhi7 = *hHLTObjectPhi7;
    result &= event->getByLabel( tHLTObjectPhi8, hHLTObjectPhi8 );
    if ( hHLTObjectPhi8.isValid() ) HLTObjectPhi8 = *hHLTObjectPhi8;
    result &= event->getByLabel( tHLTObjectPhi9, hHLTObjectPhi9 );
    if ( hHLTObjectPhi9.isValid() ) HLTObjectPhi9 = *hHLTObjectPhi9;
    result &= event->getByLabel( tHLTObjectPt0, hHLTObjectPt0 );
    if ( hHLTObjectPt0.isValid() ) HLTObjectPt0 = *hHLTObjectPt0;
    result &= event->getByLabel( tHLTObjectPt1, hHLTObjectPt1 );
    if ( hHLTObjectPt1.isValid() ) HLTObjectPt1 = *hHLTObjectPt1;
    result &= event->getByLabel( tHLTObjectPt2, hHLTObjectPt2 );
    if ( hHLTObjectPt2.isValid() ) HLTObjectPt2 = *hHLTObjectPt2;
    result &= event->getByLabel( tHLTObjectPt3, hHLTObjectPt3 );
    if ( hHLTObjectPt3.isValid() ) HLTObjectPt3 = *hHLTObjectPt3;
    result &= event->getByLabel( tHLTObjectPt4, hHLTObjectPt4 );
    if ( hHLTObjectPt4.isValid() ) HLTObjectPt4 = *hHLTObjectPt4;
    result &= event->getByLabel( tHLTObjectPt5, hHLTObjectPt5 );
    if ( hHLTObjectPt5.isValid() ) HLTObjectPt5 = *hHLTObjectPt5;
    result &= event->getByLabel( tHLTObjectPt6, hHLTObjectPt6 );
    if ( hHLTObjectPt6.isValid() ) HLTObjectPt6 = *hHLTObjectPt6;
    result &= event->getByLabel( tHLTObjectPt7, hHLTObjectPt7 );
    if ( hHLTObjectPt7.isValid() ) HLTObjectPt7 = *hHLTObjectPt7;
    result &= event->getByLabel( tHLTObjectPt8, hHLTObjectPt8 );
    if ( hHLTObjectPt8.isValid() ) HLTObjectPt8 = *hHLTObjectPt8;
    result &= event->getByLabel( tHLTObjectPt9, hHLTObjectPt9 );
    if ( hHLTObjectPt9.isValid() ) HLTObjectPt9 = *hHLTObjectPt9;
    result &= event->getByLabel( tHLTPrescale, hHLTPrescale );
    if ( hHLTPrescale.isValid() ) HLTPrescale = *hHLTPrescale;
    result &= event->getByLabel( tHLTResults, hHLTResults );
    if ( hHLTResults.isValid() ) HLTResults = *hHLTResults;
    result &= event->getByLabel( tJArea, hJArea );
    if ( hJArea.isValid() ) JArea = *hJArea;
    result &= event->getByLabel( tJChargedEmFrac, hJChargedEmFrac );
    if ( hJChargedEmFrac.isValid() ) JChargedEmFrac = *hJChargedEmFrac;
    result &= event->getByLabel( tJChargedHadFrac, hJChargedHadFrac );
    if ( hJChargedHadFrac.isValid() ) JChargedHadFrac = *hJChargedHadFrac;
    result &= event->getByLabel( tJChargedMuEnergyFrac, hJChargedMuEnergyFrac );
    if ( hJChargedMuEnergyFrac.isValid() ) JChargedMuEnergyFrac = *hJChargedMuEnergyFrac;
    result &= event->getByLabel( tJE, hJE );
    if ( hJE.isValid() ) JE = *hJE;
    result &= event->getByLabel( tJEcorr, hJEcorr );
    if ( hJEcorr.isValid() ) JEcorr = *hJEcorr;
    result &= event->getByLabel( tJEt, hJEt );
    if ( hJEt.isValid() ) JEt = *hJEt;
    result &= event->getByLabel( tJEta, hJEta );
    if ( hJEta.isValid() ) JEta = *hJEta;
    result &= event->getByLabel( tJEtaRms, hJEtaRms );
    if ( hJEtaRms.isValid() ) JEtaRms = *hJEtaRms;
    result &= event->getByLabel( tJGenJetIndex, hJGenJetIndex );
    if ( hJGenJetIndex.isValid() ) JGenJetIndex = *hJGenJetIndex;
    result &= event->getByLabel( tJGood, hJGood );
    if ( hJGood.isValid() ) JGood = *hJGood;
    result &= event->getByLabel( tJMass, hJMass );
    if ( hJMass.isValid() ) JMass = *hJMass;
    result &= event->getByLabel( tJNAssoTracks, hJNAssoTracks );
    if ( hJNAssoTracks.isValid() ) JNAssoTracks = *hJNAssoTracks;
    result &= event->getByLabel( tJNConstituents, hJNConstituents );
    if ( hJNConstituents.isValid() ) JNConstituents = *hJNConstituents;
    result &= event->getByLabel( tJNNeutrals, hJNNeutrals );
    if ( hJNNeutrals.isValid() ) JNNeutrals = *hJNNeutrals;
    result &= event->getByLabel( tJNeutralEmFrac, hJNeutralEmFrac );
    if ( hJNeutralEmFrac.isValid() ) JNeutralEmFrac = *hJNeutralEmFrac;
    result &= event->getByLabel( tJNeutralHadFrac, hJNeutralHadFrac );
    if ( hJNeutralHadFrac.isValid() ) JNeutralHadFrac = *hJNeutralHadFrac;
    result &= event->getByLabel( tJPhi, hJPhi );
    if ( hJPhi.isValid() ) JPhi = *hJPhi;
    result &= event->getByLabel( tJPhiRms, hJPhiRms );
    if ( hJPhiRms.isValid() ) JPhiRms = *hJPhiRms;
    result &= event->getByLabel( tJPt, hJPt );
    if ( hJPt.isValid() ) JPt = *hJPt;
    result &= event->getByLabel( tJPx, hJPx );
    if ( hJPx.isValid() ) JPx = *hJPx;
    result &= event->getByLabel( tJPy, hJPy );
    if ( hJPy.isValid() ) JPy = *hJPy;
    result &= event->getByLabel( tJPz, hJPz );
    if ( hJPz.isValid() ) JPz = *hJPz;
    result &= event->getByLabel( tJVtxExx, hJVtxExx );
    if ( hJVtxExx.isValid() ) JVtxExx = *hJVtxExx;
    result &= event->getByLabel( tJVtxEyx, hJVtxEyx );
    if ( hJVtxEyx.isValid() ) JVtxEyx = *hJVtxEyx;
    result &= event->getByLabel( tJVtxEyy, hJVtxEyy );
    if ( hJVtxEyy.isValid() ) JVtxEyy = *hJVtxEyy;
    result &= event->getByLabel( tJVtxEzx, hJVtxEzx );
    if ( hJVtxEzx.isValid() ) JVtxEzx = *hJVtxEzx;
    result &= event->getByLabel( tJVtxEzy, hJVtxEzy );
    if ( hJVtxEzy.isValid() ) JVtxEzy = *hJVtxEzy;
    result &= event->getByLabel( tJVtxEzz, hJVtxEzz );
    if ( hJVtxEzz.isValid() ) JVtxEzz = *hJVtxEzz;
    result &= event->getByLabel( tJVtxNChi2, hJVtxNChi2 );
    if ( hJVtxNChi2.isValid() ) JVtxNChi2 = *hJVtxNChi2;
    result &= event->getByLabel( tJVtxx, hJVtxx );
    if ( hJVtxx.isValid() ) JVtxx = *hJVtxx;
    result &= event->getByLabel( tJVtxy, hJVtxy );
    if ( hJVtxy.isValid() ) JVtxy = *hJVtxy;
    result &= event->getByLabel( tJVtxz, hJVtxz );
    if ( hJVtxz.isValid() ) JVtxz = *hJVtxz;
    result &= event->getByLabel( tJbTagProbSimpSVHighEff, hJbTagProbSimpSVHighEff );
    if ( hJbTagProbSimpSVHighEff.isValid() ) JbTagProbSimpSVHighEff = *hJbTagProbSimpSVHighEff;
    result &= event->getByLabel( tJbTagProbSimpSVHighPur, hJbTagProbSimpSVHighPur );
    if ( hJbTagProbSimpSVHighPur.isValid() ) JbTagProbSimpSVHighPur = *hJbTagProbSimpSVHighPur;
    result &= event->getByLabel( tJbTagProbTkCntHighEff, hJbTagProbTkCntHighEff );
    if ( hJbTagProbTkCntHighEff.isValid() ) JbTagProbTkCntHighEff = *hJbTagProbTkCntHighEff;
    result &= event->getByLabel( tJbTagProbTkCntHighPur, hJbTagProbTkCntHighPur );
    if ( hJbTagProbTkCntHighPur.isValid() ) JbTagProbTkCntHighPur = *hJbTagProbTkCntHighPur;
    result &= event->getByLabel( tJeMinDR, hJeMinDR );
    if ( hJeMinDR.isValid() ) JeMinDR = *hJeMinDR;
    result &= event->getByLabel( tJtrk1px, hJtrk1px );
    if ( hJtrk1px.isValid() ) Jtrk1px = *hJtrk1px;
    result &= event->getByLabel( tJtrk1py, hJtrk1py );
    if ( hJtrk1py.isValid() ) Jtrk1py = *hJtrk1py;
    result &= event->getByLabel( tJtrk1pz, hJtrk1pz );
    if ( hJtrk1pz.isValid() ) Jtrk1pz = *hJtrk1pz;
    result &= event->getByLabel( tJtrk2px, hJtrk2px );
    if ( hJtrk2px.isValid() ) Jtrk2px = *hJtrk2px;
    result &= event->getByLabel( tJtrk2py, hJtrk2py );
    if ( hJtrk2py.isValid() ) Jtrk2py = *hJtrk2py;
    result &= event->getByLabel( tJtrk2pz, hJtrk2pz );
    if ( hJtrk2pz.isValid() ) Jtrk2pz = *hJtrk2pz;
    result &= event->getByLabel( tJtrk3px, hJtrk3px );
    if ( hJtrk3px.isValid() ) Jtrk3px = *hJtrk3px;
    result &= event->getByLabel( tJtrk3py, hJtrk3py );
    if ( hJtrk3py.isValid() ) Jtrk3py = *hJtrk3py;
    result &= event->getByLabel( tJtrk3pz, hJtrk3pz );
    if ( hJtrk3pz.isValid() ) Jtrk3pz = *hJtrk3pz;
    result &= event->getByLabel( tL1PhysResults, hL1PhysResults );
    if ( hL1PhysResults.isValid() ) L1PhysResults = *hL1PhysResults;
    result &= event->getByLabel( tL1TechResults, hL1TechResults );
    if ( hL1TechResults.isValid() ) L1TechResults = *hL1TechResults;
    result &= event->getByLabel( tLumiSection, hLumiSection );
    if ( hLumiSection.isValid() ) LumiSection = *hLumiSection;
    result &= event->getByLabel( tM0, hM0 );
    if ( hM0.isValid() ) M0 = *hM0;
    result &= event->getByLabel( tM12, hM12 );
    if ( hM12.isValid() ) M12 = *hM12;
    result &= event->getByLabel( tMETR12, hMETR12 );
    if ( hMETR12.isValid() ) METR12 = *hMETR12;
    result &= event->getByLabel( tMETR21, hMETR21 );
    if ( hMETR21.isValid() ) METR21 = *hMETR21;
    result &= event->getByLabel( tMassChi, hMassChi );
    if ( hMassChi.isValid() ) MassChi = *hMassChi;
    result &= event->getByLabel( tMassGlu, hMassGlu );
    if ( hMassGlu.isValid() ) MassGlu = *hMassGlu;
    result &= event->getByLabel( tMassLSP, hMassLSP );
    if ( hMassLSP.isValid() ) MassLSP = *hMassLSP;
    result &= event->getByLabel( tMaxElExceed, hMaxElExceed );
    if ( hMaxElExceed.isValid() ) MaxElExceed = *hMaxElExceed;
    result &= event->getByLabel( tMaxGenJetExceed, hMaxGenJetExceed );
    if ( hMaxGenJetExceed.isValid() ) MaxGenJetExceed = *hMaxGenJetExceed;
    result &= event->getByLabel( tMaxGenLepExceed, hMaxGenLepExceed );
    if ( hMaxGenLepExceed.isValid() ) MaxGenLepExceed = *hMaxGenLepExceed;
    result &= event->getByLabel( tMaxGenPhoExceed, hMaxGenPhoExceed );
    if ( hMaxGenPhoExceed.isValid() ) MaxGenPhoExceed = *hMaxGenPhoExceed;
    result &= event->getByLabel( tMaxJetExceed, hMaxJetExceed );
    if ( hMaxJetExceed.isValid() ) MaxJetExceed = *hMaxJetExceed;
    result &= event->getByLabel( tMaxMuExceed, hMaxMuExceed );
    if ( hMaxMuExceed.isValid() ) MaxMuExceed = *hMaxMuExceed;
    result &= event->getByLabel( tMaxPhotonsExceed, hMaxPhotonsExceed );
    if ( hMaxPhotonsExceed.isValid() ) MaxPhotonsExceed = *hMaxPhotonsExceed;
    result &= event->getByLabel( tMaxTrkExceed, hMaxTrkExceed );
    if ( hMaxTrkExceed.isValid() ) MaxTrkExceed = *hMaxTrkExceed;
    result &= event->getByLabel( tMaxUncJetExceed, hMaxUncJetExceed );
    if ( hMaxUncJetExceed.isValid() ) MaxUncJetExceed = *hMaxUncJetExceed;
    result &= event->getByLabel( tMaxVerticesExceed, hMaxVerticesExceed );
    if ( hMaxVerticesExceed.isValid() ) MaxVerticesExceed = *hMaxVerticesExceed;
    result &= event->getByLabel( tMuCaloComp, hMuCaloComp );
    if ( hMuCaloComp.isValid() ) MuCaloComp = *hMuCaloComp;
    result &= event->getByLabel( tMuCharge, hMuCharge );
    if ( hMuCharge.isValid() ) MuCharge = *hMuCharge;
    result &= event->getByLabel( tMuD0BS, hMuD0BS );
    if ( hMuD0BS.isValid() ) MuD0BS = *hMuD0BS;
    result &= event->getByLabel( tMuD0E, hMuD0E );
    if ( hMuD0E.isValid() ) MuD0E = *hMuD0E;
    result &= event->getByLabel( tMuD0PV, hMuD0PV );
    if ( hMuD0PV.isValid() ) MuD0PV = *hMuD0PV;
    result &= event->getByLabel( tMuDzBS, hMuDzBS );
    if ( hMuDzBS.isValid() ) MuDzBS = *hMuDzBS;
    result &= event->getByLabel( tMuDzE, hMuDzE );
    if ( hMuDzE.isValid() ) MuDzE = *hMuDzE;
    result &= event->getByLabel( tMuDzPV, hMuDzPV );
    if ( hMuDzPV.isValid() ) MuDzPV = *hMuDzPV;
    result &= event->getByLabel( tMuE, hMuE );
    if ( hMuE.isValid() ) MuE = *hMuE;
    result &= event->getByLabel( tMuEem, hMuEem );
    if ( hMuEem.isValid() ) MuEem = *hMuEem;
    result &= event->getByLabel( tMuEhad, hMuEhad );
    if ( hMuEhad.isValid() ) MuEhad = *hMuEhad;
    result &= event->getByLabel( tMuEt, hMuEt );
    if ( hMuEt.isValid() ) MuEt = *hMuEt;
    result &= event->getByLabel( tMuEta, hMuEta );
    if ( hMuEta.isValid() ) MuEta = *hMuEta;
    result &= event->getByLabel( tMuGenE, hMuGenE );
    if ( hMuGenE.isValid() ) MuGenE = *hMuGenE;
    result &= event->getByLabel( tMuGenEta, hMuGenEta );
    if ( hMuGenEta.isValid() ) MuGenEta = *hMuGenEta;
    result &= event->getByLabel( tMuGenGME, hMuGenGME );
    if ( hMuGenGME.isValid() ) MuGenGME = *hMuGenGME;
    result &= event->getByLabel( tMuGenGMEta, hMuGenGMEta );
    if ( hMuGenGMEta.isValid() ) MuGenGMEta = *hMuGenGMEta;
    result &= event->getByLabel( tMuGenGMID, hMuGenGMID );
    if ( hMuGenGMID.isValid() ) MuGenGMID = *hMuGenGMID;
    result &= event->getByLabel( tMuGenGMPhi, hMuGenGMPhi );
    if ( hMuGenGMPhi.isValid() ) MuGenGMPhi = *hMuGenGMPhi;
    result &= event->getByLabel( tMuGenGMPt, hMuGenGMPt );
    if ( hMuGenGMPt.isValid() ) MuGenGMPt = *hMuGenGMPt;
    result &= event->getByLabel( tMuGenGMStatus, hMuGenGMStatus );
    if ( hMuGenGMStatus.isValid() ) MuGenGMStatus = *hMuGenGMStatus;
    result &= event->getByLabel( tMuGenID, hMuGenID );
    if ( hMuGenID.isValid() ) MuGenID = *hMuGenID;
    result &= event->getByLabel( tMuGenME, hMuGenME );
    if ( hMuGenME.isValid() ) MuGenME = *hMuGenME;
    result &= event->getByLabel( tMuGenMEta, hMuGenMEta );
    if ( hMuGenMEta.isValid() ) MuGenMEta = *hMuGenMEta;
    result &= event->getByLabel( tMuGenMID, hMuGenMID );
    if ( hMuGenMID.isValid() ) MuGenMID = *hMuGenMID;
    result &= event->getByLabel( tMuGenMPhi, hMuGenMPhi );
    if ( hMuGenMPhi.isValid() ) MuGenMPhi = *hMuGenMPhi;
    result &= event->getByLabel( tMuGenMPt, hMuGenMPt );
    if ( hMuGenMPt.isValid() ) MuGenMPt = *hMuGenMPt;
    result &= event->getByLabel( tMuGenMStatus, hMuGenMStatus );
    if ( hMuGenMStatus.isValid() ) MuGenMStatus = *hMuGenMStatus;
    result &= event->getByLabel( tMuGenPhi, hMuGenPhi );
    if ( hMuGenPhi.isValid() ) MuGenPhi = *hMuGenPhi;
    result &= event->getByLabel( tMuGenPt, hMuGenPt );
    if ( hMuGenPt.isValid() ) MuGenPt = *hMuGenPt;
    result &= event->getByLabel( tMuGenStatus, hMuGenStatus );
    if ( hMuGenStatus.isValid() ) MuGenStatus = *hMuGenStatus;
    result &= event->getByLabel( tMuGood, hMuGood );
    if ( hMuGood.isValid() ) MuGood = *hMuGood;
    result &= event->getByLabel( tMuInnerTkNChi2, hMuInnerTkNChi2 );
    if ( hMuInnerTkNChi2.isValid() ) MuInnerTkNChi2 = *hMuInnerTkNChi2;
    result &= event->getByLabel( tMuInnerTkPt, hMuInnerTkPt );
    if ( hMuInnerTkPt.isValid() ) MuInnerTkPt = *hMuInnerTkPt;
    result &= event->getByLabel( tMuIsAllArbitrated, hMuIsAllArbitrated );
    if ( hMuIsAllArbitrated.isValid() ) MuIsAllArbitrated = *hMuIsAllArbitrated;
    result &= event->getByLabel( tMuIsAllStaMuons, hMuIsAllStaMuons );
    if ( hMuIsAllStaMuons.isValid() ) MuIsAllStaMuons = *hMuIsAllStaMuons;
    result &= event->getByLabel( tMuIsAllTrkMuons, hMuIsAllTrkMuons );
    if ( hMuIsAllTrkMuons.isValid() ) MuIsAllTrkMuons = *hMuIsAllTrkMuons;
    result &= event->getByLabel( tMuIsGMPT, hMuIsGMPT );
    if ( hMuIsGMPT.isValid() ) MuIsGMPT = *hMuIsGMPT;
    result &= event->getByLabel( tMuIsGMStaChiComp, hMuIsGMStaChiComp );
    if ( hMuIsGMStaChiComp.isValid() ) MuIsGMStaChiComp = *hMuIsGMStaChiComp;
    result &= event->getByLabel( tMuIsGMTkChiComp, hMuIsGMTkChiComp );
    if ( hMuIsGMTkChiComp.isValid() ) MuIsGMTkChiComp = *hMuIsGMTkChiComp;
    result &= event->getByLabel( tMuIsGMTkKinkTight, hMuIsGMTkKinkTight );
    if ( hMuIsGMTkKinkTight.isValid() ) MuIsGMTkKinkTight = *hMuIsGMTkKinkTight;
    result &= event->getByLabel( tMuIsGlobalMuon, hMuIsGlobalMuon );
    if ( hMuIsGlobalMuon.isValid() ) MuIsGlobalMuon = *hMuIsGlobalMuon;
    result &= event->getByLabel( tMuIsIso, hMuIsIso );
    if ( hMuIsIso.isValid() ) MuIsIso = *hMuIsIso;
    result &= event->getByLabel( tMuIsTM2DCompLoose, hMuIsTM2DCompLoose );
    if ( hMuIsTM2DCompLoose.isValid() ) MuIsTM2DCompLoose = *hMuIsTM2DCompLoose;
    result &= event->getByLabel( tMuIsTM2DCompTight, hMuIsTM2DCompTight );
    if ( hMuIsTM2DCompTight.isValid() ) MuIsTM2DCompTight = *hMuIsTM2DCompTight;
    result &= event->getByLabel( tMuIsTMLSAngLoose, hMuIsTMLSAngLoose );
    if ( hMuIsTMLSAngLoose.isValid() ) MuIsTMLSAngLoose = *hMuIsTMLSAngLoose;
    result &= event->getByLabel( tMuIsTMLSAngTight, hMuIsTMLSAngTight );
    if ( hMuIsTMLSAngTight.isValid() ) MuIsTMLSAngTight = *hMuIsTMLSAngTight;
    result &= event->getByLabel( tMuIsTMLSLoose, hMuIsTMLSLoose );
    if ( hMuIsTMLSLoose.isValid() ) MuIsTMLSLoose = *hMuIsTMLSLoose;
    result &= event->getByLabel( tMuIsTMLSOptLowPtLoose, hMuIsTMLSOptLowPtLoose );
    if ( hMuIsTMLSOptLowPtLoose.isValid() ) MuIsTMLSOptLowPtLoose = *hMuIsTMLSOptLowPtLoose;
    result &= event->getByLabel( tMuIsTMLSTight, hMuIsTMLSTight );
    if ( hMuIsTMLSTight.isValid() ) MuIsTMLSTight = *hMuIsTMLSTight;
    result &= event->getByLabel( tMuIsTMOneStationAngLoose, hMuIsTMOneStationAngLoose );
    if ( hMuIsTMOneStationAngLoose.isValid() ) MuIsTMOneStationAngLoose = *hMuIsTMOneStationAngLoose;
    result &= event->getByLabel( tMuIsTMOneStationAngTight, hMuIsTMOneStationAngTight );
    if ( hMuIsTMOneStationAngTight.isValid() ) MuIsTMOneStationAngTight = *hMuIsTMOneStationAngTight;
    result &= event->getByLabel( tMuIsTMOneStationLoose, hMuIsTMOneStationLoose );
    if ( hMuIsTMOneStationLoose.isValid() ) MuIsTMOneStationLoose = *hMuIsTMOneStationLoose;
    result &= event->getByLabel( tMuIsTMOneStationTight, hMuIsTMOneStationTight );
    if ( hMuIsTMOneStationTight.isValid() ) MuIsTMOneStationTight = *hMuIsTMOneStationTight;
    result &= event->getByLabel( tMuIsTrackerMuon, hMuIsTrackerMuon );
    if ( hMuIsTrackerMuon.isValid() ) MuIsTrackerMuon = *hMuIsTrackerMuon;
    result &= event->getByLabel( tMuIsTrkMuonArbitrated, hMuIsTrkMuonArbitrated );
    if ( hMuIsTrkMuonArbitrated.isValid() ) MuIsTrkMuonArbitrated = *hMuIsTrkMuonArbitrated;
    result &= event->getByLabel( tMuIso03EMVetoEt, hMuIso03EMVetoEt );
    if ( hMuIso03EMVetoEt.isValid() ) MuIso03EMVetoEt = *hMuIso03EMVetoEt;
    result &= event->getByLabel( tMuIso03EmEt, hMuIso03EmEt );
    if ( hMuIso03EmEt.isValid() ) MuIso03EmEt = *hMuIso03EmEt;
    result &= event->getByLabel( tMuIso03HadEt, hMuIso03HadEt );
    if ( hMuIso03HadEt.isValid() ) MuIso03HadEt = *hMuIso03HadEt;
    result &= event->getByLabel( tMuIso03HadVetoEt, hMuIso03HadVetoEt );
    if ( hMuIso03HadVetoEt.isValid() ) MuIso03HadVetoEt = *hMuIso03HadVetoEt;
    result &= event->getByLabel( tMuIso03SumPt, hMuIso03SumPt );
    if ( hMuIso03SumPt.isValid() ) MuIso03SumPt = *hMuIso03SumPt;
    result &= event->getByLabel( tMuIso05EmEt, hMuIso05EmEt );
    if ( hMuIso05EmEt.isValid() ) MuIso05EmEt = *hMuIso05EmEt;
    result &= event->getByLabel( tMuIso05HadEt, hMuIso05HadEt );
    if ( hMuIso05HadEt.isValid() ) MuIso05HadEt = *hMuIso05HadEt;
    result &= event->getByLabel( tMuIso05SumPt, hMuIso05SumPt );
    if ( hMuIso05SumPt.isValid() ) MuIso05SumPt = *hMuIso05SumPt;
    result &= event->getByLabel( tMuJESCorrMET, hMuJESCorrMET );
    if ( hMuJESCorrMET.isValid() ) MuJESCorrMET = *hMuJESCorrMET;
    result &= event->getByLabel( tMuJESCorrMETphi, hMuJESCorrMETphi );
    if ( hMuJESCorrMETphi.isValid() ) MuJESCorrMETphi = *hMuJESCorrMETphi;
    result &= event->getByLabel( tMuJESCorrMETpx, hMuJESCorrMETpx );
    if ( hMuJESCorrMETpx.isValid() ) MuJESCorrMETpx = *hMuJESCorrMETpx;
    result &= event->getByLabel( tMuJESCorrMETpy, hMuJESCorrMETpy );
    if ( hMuJESCorrMETpy.isValid() ) MuJESCorrMETpy = *hMuJESCorrMETpy;
    result &= event->getByLabel( tMuNChambers, hMuNChambers );
    if ( hMuNChambers.isValid() ) MuNChambers = *hMuNChambers;
    result &= event->getByLabel( tMuNChi2, hMuNChi2 );
    if ( hMuNChi2.isValid() ) MuNChi2 = *hMuNChi2;
    result &= event->getByLabel( tMuNGlHits, hMuNGlHits );
    if ( hMuNGlHits.isValid() ) MuNGlHits = *hMuNGlHits;
    result &= event->getByLabel( tMuNMatches, hMuNMatches );
    if ( hMuNMatches.isValid() ) MuNMatches = *hMuNMatches;
    result &= event->getByLabel( tMuNMuHits, hMuNMuHits );
    if ( hMuNMuHits.isValid() ) MuNMuHits = *hMuNMuHits;
    result &= event->getByLabel( tMuNPxHits, hMuNPxHits );
    if ( hMuNPxHits.isValid() ) MuNPxHits = *hMuNPxHits;
    result &= event->getByLabel( tMuNTkHits, hMuNTkHits );
    if ( hMuNTkHits.isValid() ) MuNTkHits = *hMuNTkHits;
    result &= event->getByLabel( tMuPhi, hMuPhi );
    if ( hMuPhi.isValid() ) MuPhi = *hMuPhi;
    result &= event->getByLabel( tMuPt, hMuPt );
    if ( hMuPt.isValid() ) MuPt = *hMuPt;
    result &= event->getByLabel( tMuPtE, hMuPtE );
    if ( hMuPtE.isValid() ) MuPtE = *hMuPtE;
    result &= event->getByLabel( tMuPx, hMuPx );
    if ( hMuPx.isValid() ) MuPx = *hMuPx;
    result &= event->getByLabel( tMuPy, hMuPy );
    if ( hMuPy.isValid() ) MuPy = *hMuPy;
    result &= event->getByLabel( tMuPz, hMuPz );
    if ( hMuPz.isValid() ) MuPz = *hMuPz;
    result &= event->getByLabel( tMuRelIso03, hMuRelIso03 );
    if ( hMuRelIso03.isValid() ) MuRelIso03 = *hMuRelIso03;
    result &= event->getByLabel( tMuSegmComp, hMuSegmComp );
    if ( hMuSegmComp.isValid() ) MuSegmComp = *hMuSegmComp;
    result &= event->getByLabel( tNCaloTowers, hNCaloTowers );
    if ( hNCaloTowers.isValid() ) NCaloTowers = *hNCaloTowers;
    result &= event->getByLabel( tNEBhits, hNEBhits );
    if ( hNEBhits.isValid() ) NEBhits = *hNEBhits;
    result &= event->getByLabel( tNEles, hNEles );
    if ( hNEles.isValid() ) NEles = *hNEles;
    result &= event->getByLabel( tNElesTot, hNElesTot );
    if ( hNElesTot.isValid() ) NElesTot = *hNElesTot;
    result &= event->getByLabel( tNGMus, hNGMus );
    if ( hNGMus.isValid() ) NGMus = *hNGMus;
    result &= event->getByLabel( tNGenJets, hNGenJets );
    if ( hNGenJets.isValid() ) NGenJets = *hNGenJets;
    result &= event->getByLabel( tNGenLeptons, hNGenLeptons );
    if ( hNGenLeptons.isValid() ) NGenLeptons = *hNGenLeptons;
    result &= event->getByLabel( tNGenPhotons, hNGenPhotons );
    if ( hNGenPhotons.isValid() ) NGenPhotons = *hNGenPhotons;
    result &= event->getByLabel( tNHLTObjs, hNHLTObjs );
    if ( hNHLTObjs.isValid() ) NHLTObjs = *hNHLTObjs;
    result &= event->getByLabel( tNJets, hNJets );
    if ( hNJets.isValid() ) NJets = *hNJets;
    result &= event->getByLabel( tNJetsTot, hNJetsTot );
    if ( hNJetsTot.isValid() ) NJetsTot = *hNJetsTot;
    result &= event->getByLabel( tNMus, hNMus );
    if ( hNMus.isValid() ) NMus = *hNMus;
    result &= event->getByLabel( tNMusTot, hNMusTot );
    if ( hNMusTot.isValid() ) NMusTot = *hNMusTot;
    result &= event->getByLabel( tNPdfs, hNPdfs );
    if ( hNPdfs.isValid() ) NPdfs = *hNPdfs;
    result &= event->getByLabel( tNPhotons, hNPhotons );
    if ( hNPhotons.isValid() ) NPhotons = *hNPhotons;
    result &= event->getByLabel( tNPhotonsTot, hNPhotonsTot );
    if ( hNPhotonsTot.isValid() ) NPhotonsTot = *hNPhotonsTot;
    result &= event->getByLabel( tNSuperClusters, hNSuperClusters );
    if ( hNSuperClusters.isValid() ) NSuperClusters = *hNSuperClusters;
    result &= event->getByLabel( tNTMus, hNTMus );
    if ( hNTMus.isValid() ) NTMus = *hNTMus;
    result &= event->getByLabel( tNTracks, hNTracks );
    if ( hNTracks.isValid() ) NTracks = *hNTracks;
    result &= event->getByLabel( tNTracksTot, hNTracksTot );
    if ( hNTracksTot.isValid() ) NTracksTot = *hNTracksTot;
    result &= event->getByLabel( tNVrtx, hNVrtx );
    if ( hNVrtx.isValid() ) NVrtx = *hNVrtx;
    result &= event->getByLabel( tPDFID1, hPDFID1 );
    if ( hPDFID1.isValid() ) PDFID1 = *hPDFID1;
    result &= event->getByLabel( tPDFID2, hPDFID2 );
    if ( hPDFID2.isValid() ) PDFID2 = *hPDFID2;
    result &= event->getByLabel( tPDFScalePDF, hPDFScalePDF );
    if ( hPDFScalePDF.isValid() ) PDFScalePDF = *hPDFScalePDF;
    result &= event->getByLabel( tPDFx1, hPDFx1 );
    if ( hPDFx1.isValid() ) PDFx1 = *hPDFx1;
    result &= event->getByLabel( tPDFx2, hPDFx2 );
    if ( hPDFx2.isValid() ) PDFx2 = *hPDFx2;
    result &= event->getByLabel( tPDFxPDF1, hPDFxPDF1 );
    if ( hPDFxPDF1.isValid() ) PDFxPDF1 = *hPDFxPDF1;
    result &= event->getByLabel( tPDFxPDF2, hPDFxPDF2 );
    if ( hPDFxPDF2.isValid() ) PDFxPDF2 = *hPDFxPDF2;
    result &= event->getByLabel( tPFMET, hPFMET );
    if ( hPFMET.isValid() ) PFMET = *hPFMET;
    result &= event->getByLabel( tPFMETPAT, hPFMETPAT );
    if ( hPFMETPAT.isValid() ) PFMETPAT = *hPFMETPAT;
    result &= event->getByLabel( tPFMETPATSignificance, hPFMETPATSignificance );
    if ( hPFMETPATSignificance.isValid() ) PFMETPATSignificance = *hPFMETPATSignificance;
    result &= event->getByLabel( tPFMETPATphi, hPFMETPATphi );
    if ( hPFMETPATphi.isValid() ) PFMETPATphi = *hPFMETPATphi;
    result &= event->getByLabel( tPFMETPATpx, hPFMETPATpx );
    if ( hPFMETPATpx.isValid() ) PFMETPATpx = *hPFMETPATpx;
    result &= event->getByLabel( tPFMETPATpy, hPFMETPATpy );
    if ( hPFMETPATpy.isValid() ) PFMETPATpy = *hPFMETPATpy;
    result &= event->getByLabel( tPFMETSignificance, hPFMETSignificance );
    if ( hPFMETSignificance.isValid() ) PFMETSignificance = *hPFMETSignificance;
    result &= event->getByLabel( tPFMETphi, hPFMETphi );
    if ( hPFMETphi.isValid() ) PFMETphi = *hPFMETphi;
    result &= event->getByLabel( tPFMETpx, hPFMETpx );
    if ( hPFMETpx.isValid() ) PFMETpx = *hPFMETpx;
    result &= event->getByLabel( tPFMETpy, hPFMETpy );
    if ( hPFMETpy.isValid() ) PFMETpy = *hPFMETpy;
    result &= event->getByLabel( tPFSumEt, hPFSumEt );
    if ( hPFSumEt.isValid() ) PFSumEt = *hPFSumEt;
    result &= event->getByLabel( tPUOOTnumInteractionsEarly, hPUOOTnumInteractionsEarly );
    if ( hPUOOTnumInteractionsEarly.isValid() ) PUOOTnumInteractionsEarly = *hPUOOTnumInteractionsEarly;
    result &= event->getByLabel( tPUOOTnumInteractionsLate, hPUOOTnumInteractionsLate );
    if ( hPUOOTnumInteractionsLate.isValid() ) PUOOTnumInteractionsLate = *hPUOOTnumInteractionsLate;
    result &= event->getByLabel( tPUWeightInTime, hPUWeightInTime );
    if ( hPUWeightInTime.isValid() ) PUWeightInTime = *hPUWeightInTime;
    result &= event->getByLabel( tPUWeightTotal, hPUWeightTotal );
    if ( hPUWeightTotal.isValid() ) PUWeightTotal = *hPUWeightTotal;
    result &= event->getByLabel( tPUnTrksHighPt, hPUnTrksHighPt );
    if ( hPUnTrksHighPt.isValid() ) PUnTrksHighPt = *hPUnTrksHighPt;
    result &= event->getByLabel( tPUnTrksLowPt, hPUnTrksLowPt );
    if ( hPUnTrksLowPt.isValid() ) PUnTrksLowPt = *hPUnTrksLowPt;
    result &= event->getByLabel( tPUnumFilled, hPUnumFilled );
    if ( hPUnumFilled.isValid() ) PUnumFilled = *hPUnumFilled;
    result &= event->getByLabel( tPUnumInteractions, hPUnumInteractions );
    if ( hPUnumInteractions.isValid() ) PUnumInteractions = *hPUnumInteractions;
    result &= event->getByLabel( tPUnumTrueInteractions, hPUnumTrueInteractions );
    if ( hPUnumTrueInteractions.isValid() ) PUnumTrueInteractions = *hPUnumTrueInteractions;
    result &= event->getByLabel( tPUsumPtHighPt, hPUsumPtHighPt );
    if ( hPUsumPtHighPt.isValid() ) PUsumPtHighPt = *hPUsumPtHighPt;
    result &= event->getByLabel( tPUsumPtLowPt, hPUsumPtLowPt );
    if ( hPUsumPtLowPt.isValid() ) PUsumPtLowPt = *hPUsumPtLowPt;
    result &= event->getByLabel( tPUzPositions, hPUzPositions );
    if ( hPUzPositions.isValid() ) PUzPositions = *hPUzPositions;
    result &= event->getByLabel( tPhoCaloPositionX, hPhoCaloPositionX );
    if ( hPhoCaloPositionX.isValid() ) PhoCaloPositionX = *hPhoCaloPositionX;
    result &= event->getByLabel( tPhoCaloPositionY, hPhoCaloPositionY );
    if ( hPhoCaloPositionY.isValid() ) PhoCaloPositionY = *hPhoCaloPositionY;
    result &= event->getByLabel( tPhoCaloPositionZ, hPhoCaloPositionZ );
    if ( hPhoCaloPositionZ.isValid() ) PhoCaloPositionZ = *hPhoCaloPositionZ;
    result &= event->getByLabel( tPhoChargedHadronIso, hPhoChargedHadronIso );
    if ( hPhoChargedHadronIso.isValid() ) PhoChargedHadronIso = *hPhoChargedHadronIso;
    result &= event->getByLabel( tPhoCone01ChargedHadronIsodR015dEta0pt0PFnoPU, hPhoCone01ChargedHadronIsodR015dEta0pt0PFnoPU );
    if ( hPhoCone01ChargedHadronIsodR015dEta0pt0PFnoPU.isValid() ) PhoCone01ChargedHadronIsodR015dEta0pt0PFnoPU = *hPhoCone01ChargedHadronIsodR015dEta0pt0PFnoPU;
    result &= event->getByLabel( tPhoCone01ChargedHadronIsodR015dEta0pt0dz0, hPhoCone01ChargedHadronIsodR015dEta0pt0dz0 );
    if ( hPhoCone01ChargedHadronIsodR015dEta0pt0dz0.isValid() ) PhoCone01ChargedHadronIsodR015dEta0pt0dz0 = *hPhoCone01ChargedHadronIsodR015dEta0pt0dz0;
    result &= event->getByLabel( tPhoCone01ChargedHadronIsodR015dEta0pt0dz1dxy01, hPhoCone01ChargedHadronIsodR015dEta0pt0dz1dxy01 );
    if ( hPhoCone01ChargedHadronIsodR015dEta0pt0dz1dxy01.isValid() ) PhoCone01ChargedHadronIsodR015dEta0pt0dz1dxy01 = *hPhoCone01ChargedHadronIsodR015dEta0pt0dz1dxy01;
    result &= event->getByLabel( tPhoCone01ChargedHadronIsodR0dEta0pt0PFnoPU, hPhoCone01ChargedHadronIsodR0dEta0pt0PFnoPU );
    if ( hPhoCone01ChargedHadronIsodR0dEta0pt0PFnoPU.isValid() ) PhoCone01ChargedHadronIsodR0dEta0pt0PFnoPU = *hPhoCone01ChargedHadronIsodR0dEta0pt0PFnoPU;
    result &= event->getByLabel( tPhoCone01ChargedHadronIsodR0dEta0pt0dz0, hPhoCone01ChargedHadronIsodR0dEta0pt0dz0 );
    if ( hPhoCone01ChargedHadronIsodR0dEta0pt0dz0.isValid() ) PhoCone01ChargedHadronIsodR0dEta0pt0dz0 = *hPhoCone01ChargedHadronIsodR0dEta0pt0dz0;
    result &= event->getByLabel( tPhoCone01ChargedHadronIsodR0dEta0pt0dz1dxy01, hPhoCone01ChargedHadronIsodR0dEta0pt0dz1dxy01 );
    if ( hPhoCone01ChargedHadronIsodR0dEta0pt0dz1dxy01.isValid() ) PhoCone01ChargedHadronIsodR0dEta0pt0dz1dxy01 = *hPhoCone01ChargedHadronIsodR0dEta0pt0dz1dxy01;
    result &= event->getByLabel( tPhoCone01NeutralHadronIsodR0dEta0pt0mvVtx, hPhoCone01NeutralHadronIsodR0dEta0pt0mvVtx );
    if ( hPhoCone01NeutralHadronIsodR0dEta0pt0mvVtx.isValid() ) PhoCone01NeutralHadronIsodR0dEta0pt0mvVtx = *hPhoCone01NeutralHadronIsodR0dEta0pt0mvVtx;
    result &= event->getByLabel( tPhoCone01PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx, hPhoCone01PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx );
    if ( hPhoCone01PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx.isValid() ) PhoCone01PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx = *hPhoCone01PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx;
    result &= event->getByLabel( tPhoCone02ChargedHadronIsodR015dEta0pt0PFnoPU, hPhoCone02ChargedHadronIsodR015dEta0pt0PFnoPU );
    if ( hPhoCone02ChargedHadronIsodR015dEta0pt0PFnoPU.isValid() ) PhoCone02ChargedHadronIsodR015dEta0pt0PFnoPU = *hPhoCone02ChargedHadronIsodR015dEta0pt0PFnoPU;
    result &= event->getByLabel( tPhoCone02ChargedHadronIsodR015dEta0pt0dz0, hPhoCone02ChargedHadronIsodR015dEta0pt0dz0 );
    if ( hPhoCone02ChargedHadronIsodR015dEta0pt0dz0.isValid() ) PhoCone02ChargedHadronIsodR015dEta0pt0dz0 = *hPhoCone02ChargedHadronIsodR015dEta0pt0dz0;
    result &= event->getByLabel( tPhoCone02ChargedHadronIsodR015dEta0pt0dz1dxy01, hPhoCone02ChargedHadronIsodR015dEta0pt0dz1dxy01 );
    if ( hPhoCone02ChargedHadronIsodR015dEta0pt0dz1dxy01.isValid() ) PhoCone02ChargedHadronIsodR015dEta0pt0dz1dxy01 = *hPhoCone02ChargedHadronIsodR015dEta0pt0dz1dxy01;
    result &= event->getByLabel( tPhoCone02ChargedHadronIsodR0dEta0pt0PFnoPU, hPhoCone02ChargedHadronIsodR0dEta0pt0PFnoPU );
    if ( hPhoCone02ChargedHadronIsodR0dEta0pt0PFnoPU.isValid() ) PhoCone02ChargedHadronIsodR0dEta0pt0PFnoPU = *hPhoCone02ChargedHadronIsodR0dEta0pt0PFnoPU;
    result &= event->getByLabel( tPhoCone02ChargedHadronIsodR0dEta0pt0dz0, hPhoCone02ChargedHadronIsodR0dEta0pt0dz0 );
    if ( hPhoCone02ChargedHadronIsodR0dEta0pt0dz0.isValid() ) PhoCone02ChargedHadronIsodR0dEta0pt0dz0 = *hPhoCone02ChargedHadronIsodR0dEta0pt0dz0;
    result &= event->getByLabel( tPhoCone02ChargedHadronIsodR0dEta0pt0dz1dxy01, hPhoCone02ChargedHadronIsodR0dEta0pt0dz1dxy01 );
    if ( hPhoCone02ChargedHadronIsodR0dEta0pt0dz1dxy01.isValid() ) PhoCone02ChargedHadronIsodR0dEta0pt0dz1dxy01 = *hPhoCone02ChargedHadronIsodR0dEta0pt0dz1dxy01;
    result &= event->getByLabel( tPhoCone02NeutralHadronIsodR0dEta0pt0mvVtx, hPhoCone02NeutralHadronIsodR0dEta0pt0mvVtx );
    if ( hPhoCone02NeutralHadronIsodR0dEta0pt0mvVtx.isValid() ) PhoCone02NeutralHadronIsodR0dEta0pt0mvVtx = *hPhoCone02NeutralHadronIsodR0dEta0pt0mvVtx;
    result &= event->getByLabel( tPhoCone02PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx, hPhoCone02PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx );
    if ( hPhoCone02PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx.isValid() ) PhoCone02PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx = *hPhoCone02PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx;
    result &= event->getByLabel( tPhoCone03ChargedHadronIsodR015dEta0pt0PFnoPU, hPhoCone03ChargedHadronIsodR015dEta0pt0PFnoPU );
    if ( hPhoCone03ChargedHadronIsodR015dEta0pt0PFnoPU.isValid() ) PhoCone03ChargedHadronIsodR015dEta0pt0PFnoPU = *hPhoCone03ChargedHadronIsodR015dEta0pt0PFnoPU;
    result &= event->getByLabel( tPhoCone03ChargedHadronIsodR015dEta0pt0dz0, hPhoCone03ChargedHadronIsodR015dEta0pt0dz0 );
    if ( hPhoCone03ChargedHadronIsodR015dEta0pt0dz0.isValid() ) PhoCone03ChargedHadronIsodR015dEta0pt0dz0 = *hPhoCone03ChargedHadronIsodR015dEta0pt0dz0;
    result &= event->getByLabel( tPhoCone03ChargedHadronIsodR015dEta0pt0dz1dxy01, hPhoCone03ChargedHadronIsodR015dEta0pt0dz1dxy01 );
    if ( hPhoCone03ChargedHadronIsodR015dEta0pt0dz1dxy01.isValid() ) PhoCone03ChargedHadronIsodR015dEta0pt0dz1dxy01 = *hPhoCone03ChargedHadronIsodR015dEta0pt0dz1dxy01;
    result &= event->getByLabel( tPhoCone03ChargedHadronIsodR0dEta0pt0PFnoPU, hPhoCone03ChargedHadronIsodR0dEta0pt0PFnoPU );
    if ( hPhoCone03ChargedHadronIsodR0dEta0pt0PFnoPU.isValid() ) PhoCone03ChargedHadronIsodR0dEta0pt0PFnoPU = *hPhoCone03ChargedHadronIsodR0dEta0pt0PFnoPU;
    result &= event->getByLabel( tPhoCone03ChargedHadronIsodR0dEta0pt0dz0, hPhoCone03ChargedHadronIsodR0dEta0pt0dz0 );
    if ( hPhoCone03ChargedHadronIsodR0dEta0pt0dz0.isValid() ) PhoCone03ChargedHadronIsodR0dEta0pt0dz0 = *hPhoCone03ChargedHadronIsodR0dEta0pt0dz0;
    result &= event->getByLabel( tPhoCone03ChargedHadronIsodR0dEta0pt0dz1dxy01, hPhoCone03ChargedHadronIsodR0dEta0pt0dz1dxy01 );
    if ( hPhoCone03ChargedHadronIsodR0dEta0pt0dz1dxy01.isValid() ) PhoCone03ChargedHadronIsodR0dEta0pt0dz1dxy01 = *hPhoCone03ChargedHadronIsodR0dEta0pt0dz1dxy01;
    result &= event->getByLabel( tPhoCone03NeutralHadronIsodR0dEta0pt0mvVtx, hPhoCone03NeutralHadronIsodR0dEta0pt0mvVtx );
    if ( hPhoCone03NeutralHadronIsodR0dEta0pt0mvVtx.isValid() ) PhoCone03NeutralHadronIsodR0dEta0pt0mvVtx = *hPhoCone03NeutralHadronIsodR0dEta0pt0mvVtx;
    result &= event->getByLabel( tPhoCone03PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx, hPhoCone03PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx );
    if ( hPhoCone03PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx.isValid() ) PhoCone03PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx = *hPhoCone03PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPU, hPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPU );
    if ( hPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPU.isValid() ) PhoCone04ChargedHadronIsodR015dEta0pt0PFnoPU = *hPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPU;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPUold, hPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPUold );
    if ( hPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPUold.isValid() ) PhoCone04ChargedHadronIsodR015dEta0pt0PFnoPUold = *hPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPUold;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR015dEta0pt0dz0, hPhoCone04ChargedHadronIsodR015dEta0pt0dz0 );
    if ( hPhoCone04ChargedHadronIsodR015dEta0pt0dz0.isValid() ) PhoCone04ChargedHadronIsodR015dEta0pt0dz0 = *hPhoCone04ChargedHadronIsodR015dEta0pt0dz0;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR015dEta0pt0dz0old, hPhoCone04ChargedHadronIsodR015dEta0pt0dz0old );
    if ( hPhoCone04ChargedHadronIsodR015dEta0pt0dz0old.isValid() ) PhoCone04ChargedHadronIsodR015dEta0pt0dz0old = *hPhoCone04ChargedHadronIsodR015dEta0pt0dz0old;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR015dEta0pt0dz1dxy01, hPhoCone04ChargedHadronIsodR015dEta0pt0dz1dxy01 );
    if ( hPhoCone04ChargedHadronIsodR015dEta0pt0dz1dxy01.isValid() ) PhoCone04ChargedHadronIsodR015dEta0pt0dz1dxy01 = *hPhoCone04ChargedHadronIsodR015dEta0pt0dz1dxy01;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPU, hPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPU );
    if ( hPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPU.isValid() ) PhoCone04ChargedHadronIsodR0dEta0pt0PFnoPU = *hPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPU;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPUold, hPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPUold );
    if ( hPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPUold.isValid() ) PhoCone04ChargedHadronIsodR0dEta0pt0PFnoPUold = *hPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPUold;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR0dEta0pt0dz0, hPhoCone04ChargedHadronIsodR0dEta0pt0dz0 );
    if ( hPhoCone04ChargedHadronIsodR0dEta0pt0dz0.isValid() ) PhoCone04ChargedHadronIsodR0dEta0pt0dz0 = *hPhoCone04ChargedHadronIsodR0dEta0pt0dz0;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR0dEta0pt0dz0old, hPhoCone04ChargedHadronIsodR0dEta0pt0dz0old );
    if ( hPhoCone04ChargedHadronIsodR0dEta0pt0dz0old.isValid() ) PhoCone04ChargedHadronIsodR0dEta0pt0dz0old = *hPhoCone04ChargedHadronIsodR0dEta0pt0dz0old;
    result &= event->getByLabel( tPhoCone04ChargedHadronIsodR0dEta0pt0dz1dxy01, hPhoCone04ChargedHadronIsodR0dEta0pt0dz1dxy01 );
    if ( hPhoCone04ChargedHadronIsodR0dEta0pt0dz1dxy01.isValid() ) PhoCone04ChargedHadronIsodR0dEta0pt0dz1dxy01 = *hPhoCone04ChargedHadronIsodR0dEta0pt0dz1dxy01;
    result &= event->getByLabel( tPhoCone04NeutralHadronIsodR0dEta0pt0, hPhoCone04NeutralHadronIsodR0dEta0pt0 );
    if ( hPhoCone04NeutralHadronIsodR0dEta0pt0.isValid() ) PhoCone04NeutralHadronIsodR0dEta0pt0 = *hPhoCone04NeutralHadronIsodR0dEta0pt0;
    result &= event->getByLabel( tPhoCone04NeutralHadronIsodR0dEta0pt0mvVtx, hPhoCone04NeutralHadronIsodR0dEta0pt0mvVtx );
    if ( hPhoCone04NeutralHadronIsodR0dEta0pt0mvVtx.isValid() ) PhoCone04NeutralHadronIsodR0dEta0pt0mvVtx = *hPhoCone04NeutralHadronIsodR0dEta0pt0mvVtx;
    result &= event->getByLabel( tPhoCone04NeutralHadronIsodR0dEta0pt0nocracks, hPhoCone04NeutralHadronIsodR0dEta0pt0nocracks );
    if ( hPhoCone04NeutralHadronIsodR0dEta0pt0nocracks.isValid() ) PhoCone04NeutralHadronIsodR0dEta0pt0nocracks = *hPhoCone04NeutralHadronIsodR0dEta0pt0nocracks;
    result &= event->getByLabel( tPhoCone04NeutralHadronIsodR0dEta0pt5, hPhoCone04NeutralHadronIsodR0dEta0pt5 );
    if ( hPhoCone04NeutralHadronIsodR0dEta0pt5.isValid() ) PhoCone04NeutralHadronIsodR0dEta0pt5 = *hPhoCone04NeutralHadronIsodR0dEta0pt5;
    result &= event->getByLabel( tPhoCone04NeutralHadronIsodR0dEta0pt5nocracks, hPhoCone04NeutralHadronIsodR0dEta0pt5nocracks );
    if ( hPhoCone04NeutralHadronIsodR0dEta0pt5nocracks.isValid() ) PhoCone04NeutralHadronIsodR0dEta0pt5nocracks = *hPhoCone04NeutralHadronIsodR0dEta0pt5nocracks;
    result &= event->getByLabel( tPhoCone04NeutralHadronIsodR7dEta0pt0, hPhoCone04NeutralHadronIsodR7dEta0pt0 );
    if ( hPhoCone04NeutralHadronIsodR7dEta0pt0.isValid() ) PhoCone04NeutralHadronIsodR7dEta0pt0 = *hPhoCone04NeutralHadronIsodR7dEta0pt0;
    result &= event->getByLabel( tPhoCone04NeutralHadronIsodR7dEta0pt5, hPhoCone04NeutralHadronIsodR7dEta0pt5 );
    if ( hPhoCone04NeutralHadronIsodR7dEta0pt5.isValid() ) PhoCone04NeutralHadronIsodR7dEta0pt5 = *hPhoCone04NeutralHadronIsodR7dEta0pt5;
    result &= event->getByLabel( tPhoCone04PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx, hPhoCone04PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx );
    if ( hPhoCone04PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx.isValid() ) PhoCone04PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx = *hPhoCone04PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx;
    result &= event->getByLabel( tPhoCone04PhotonIsodR0dEta0pt0, hPhoCone04PhotonIsodR0dEta0pt0 );
    if ( hPhoCone04PhotonIsodR0dEta0pt0.isValid() ) PhoCone04PhotonIsodR0dEta0pt0 = *hPhoCone04PhotonIsodR0dEta0pt0;
    result &= event->getByLabel( tPhoCone04PhotonIsodR0dEta0pt5, hPhoCone04PhotonIsodR0dEta0pt5 );
    if ( hPhoCone04PhotonIsodR0dEta0pt5.isValid() ) PhoCone04PhotonIsodR0dEta0pt5 = *hPhoCone04PhotonIsodR0dEta0pt5;
    result &= event->getByLabel( tPhoCone04PhotonIsodR8dEta0pt0, hPhoCone04PhotonIsodR8dEta0pt0 );
    if ( hPhoCone04PhotonIsodR8dEta0pt0.isValid() ) PhoCone04PhotonIsodR8dEta0pt0 = *hPhoCone04PhotonIsodR8dEta0pt0;
    result &= event->getByLabel( tPhoCone04PhotonIsodR8dEta0pt5, hPhoCone04PhotonIsodR8dEta0pt5 );
    if ( hPhoCone04PhotonIsodR8dEta0pt5.isValid() ) PhoCone04PhotonIsodR8dEta0pt5 = *hPhoCone04PhotonIsodR8dEta0pt5;
    result &= event->getByLabel( tPhoE1OverE9, hPhoE1OverE9 );
    if ( hPhoE1OverE9.isValid() ) PhoE1OverE9 = *hPhoE1OverE9;
    result &= event->getByLabel( tPhoE1x5, hPhoE1x5 );
    if ( hPhoE1x5.isValid() ) PhoE1x5 = *hPhoE1x5;
    result &= event->getByLabel( tPhoE2x5, hPhoE2x5 );
    if ( hPhoE2x5.isValid() ) PhoE2x5 = *hPhoE2x5;
    result &= event->getByLabel( tPhoE3x3, hPhoE3x3 );
    if ( hPhoE3x3.isValid() ) PhoE3x3 = *hPhoE3x3;
    result &= event->getByLabel( tPhoE5x5, hPhoE5x5 );
    if ( hPhoE5x5.isValid() ) PhoE5x5 = *hPhoE5x5;
    result &= event->getByLabel( tPhoEnergy, hPhoEnergy );
    if ( hPhoEnergy.isValid() ) PhoEnergy = *hPhoEnergy;
    result &= event->getByLabel( tPhoEta, hPhoEta );
    if ( hPhoEta.isValid() ) PhoEta = *hPhoEta;
    result &= event->getByLabel( tPhoGood, hPhoGood );
    if ( hPhoGood.isValid() ) PhoGood = *hPhoGood;
    result &= event->getByLabel( tPhoH1overE, hPhoH1overE );
    if ( hPhoH1overE.isValid() ) PhoH1overE = *hPhoH1overE;
    result &= event->getByLabel( tPhoH2overE, hPhoH2overE );
    if ( hPhoH2overE.isValid() ) PhoH2overE = *hPhoH2overE;
    result &= event->getByLabel( tPhoHasConvTrks, hPhoHasConvTrks );
    if ( hPhoHasConvTrks.isValid() ) PhoHasConvTrks = *hPhoHasConvTrks;
    result &= event->getByLabel( tPhoHasPixSeed, hPhoHasPixSeed );
    if ( hPhoHasPixSeed.isValid() ) PhoHasPixSeed = *hPhoHasPixSeed;
    result &= event->getByLabel( tPhoHoverE, hPhoHoverE );
    if ( hPhoHoverE.isValid() ) PhoHoverE = *hPhoHoverE;
    result &= event->getByLabel( tPhoIsIso, hPhoIsIso );
    if ( hPhoIsIso.isValid() ) PhoIsIso = *hPhoIsIso;
    result &= event->getByLabel( tPhoIso03, hPhoIso03 );
    if ( hPhoIso03.isValid() ) PhoIso03 = *hPhoIso03;
    result &= event->getByLabel( tPhoIso03Ecal, hPhoIso03Ecal );
    if ( hPhoIso03Ecal.isValid() ) PhoIso03Ecal = *hPhoIso03Ecal;
    result &= event->getByLabel( tPhoIso03Hcal, hPhoIso03Hcal );
    if ( hPhoIso03Hcal.isValid() ) PhoIso03Hcal = *hPhoIso03Hcal;
    result &= event->getByLabel( tPhoIso03HcalDepth1, hPhoIso03HcalDepth1 );
    if ( hPhoIso03HcalDepth1.isValid() ) PhoIso03HcalDepth1 = *hPhoIso03HcalDepth1;
    result &= event->getByLabel( tPhoIso03HcalDepth2, hPhoIso03HcalDepth2 );
    if ( hPhoIso03HcalDepth2.isValid() ) PhoIso03HcalDepth2 = *hPhoIso03HcalDepth2;
    result &= event->getByLabel( tPhoIso03TrkHollow, hPhoIso03TrkHollow );
    if ( hPhoIso03TrkHollow.isValid() ) PhoIso03TrkHollow = *hPhoIso03TrkHollow;
    result &= event->getByLabel( tPhoIso03TrkSolid, hPhoIso03TrkSolid );
    if ( hPhoIso03TrkSolid.isValid() ) PhoIso03TrkSolid = *hPhoIso03TrkSolid;
    result &= event->getByLabel( tPhoIso03nTrksHollow, hPhoIso03nTrksHollow );
    if ( hPhoIso03nTrksHollow.isValid() ) PhoIso03nTrksHollow = *hPhoIso03nTrksHollow;
    result &= event->getByLabel( tPhoIso03nTrksSolid, hPhoIso03nTrksSolid );
    if ( hPhoIso03nTrksSolid.isValid() ) PhoIso03nTrksSolid = *hPhoIso03nTrksSolid;
    result &= event->getByLabel( tPhoIso04, hPhoIso04 );
    if ( hPhoIso04.isValid() ) PhoIso04 = *hPhoIso04;
    result &= event->getByLabel( tPhoIso04Ecal, hPhoIso04Ecal );
    if ( hPhoIso04Ecal.isValid() ) PhoIso04Ecal = *hPhoIso04Ecal;
    result &= event->getByLabel( tPhoIso04Hcal, hPhoIso04Hcal );
    if ( hPhoIso04Hcal.isValid() ) PhoIso04Hcal = *hPhoIso04Hcal;
    result &= event->getByLabel( tPhoIso04HcalDepth1, hPhoIso04HcalDepth1 );
    if ( hPhoIso04HcalDepth1.isValid() ) PhoIso04HcalDepth1 = *hPhoIso04HcalDepth1;
    result &= event->getByLabel( tPhoIso04HcalDepth2, hPhoIso04HcalDepth2 );
    if ( hPhoIso04HcalDepth2.isValid() ) PhoIso04HcalDepth2 = *hPhoIso04HcalDepth2;
    result &= event->getByLabel( tPhoIso04TrkHollow, hPhoIso04TrkHollow );
    if ( hPhoIso04TrkHollow.isValid() ) PhoIso04TrkHollow = *hPhoIso04TrkHollow;
    result &= event->getByLabel( tPhoIso04TrkSolid, hPhoIso04TrkSolid );
    if ( hPhoIso04TrkSolid.isValid() ) PhoIso04TrkSolid = *hPhoIso04TrkSolid;
    result &= event->getByLabel( tPhoIso04nTrksHollow, hPhoIso04nTrksHollow );
    if ( hPhoIso04nTrksHollow.isValid() ) PhoIso04nTrksHollow = *hPhoIso04nTrksHollow;
    result &= event->getByLabel( tPhoIso04nTrksSolid, hPhoIso04nTrksSolid );
    if ( hPhoIso04nTrksSolid.isValid() ) PhoIso04nTrksSolid = *hPhoIso04nTrksSolid;
    result &= event->getByLabel( tPhoMCmatchexitcode, hPhoMCmatchexitcode );
    if ( hPhoMCmatchexitcode.isValid() ) PhoMCmatchexitcode = *hPhoMCmatchexitcode;
    result &= event->getByLabel( tPhoMCmatchindex, hPhoMCmatchindex );
    if ( hPhoMCmatchindex.isValid() ) PhoMCmatchindex = *hPhoMCmatchindex;
    result &= event->getByLabel( tPhoNeutralHadronIso, hPhoNeutralHadronIso );
    if ( hPhoNeutralHadronIso.isValid() ) PhoNeutralHadronIso = *hPhoNeutralHadronIso;
    result &= event->getByLabel( tPhoPhi, hPhoPhi );
    if ( hPhoPhi.isValid() ) PhoPhi = *hPhoPhi;
    result &= event->getByLabel( tPhoPhotonIso, hPhoPhotonIso );
    if ( hPhoPhotonIso.isValid() ) PhoPhotonIso = *hPhoPhotonIso;
    result &= event->getByLabel( tPhoPt, hPhoPt );
    if ( hPhoPt.isValid() ) PhoPt = *hPhoPt;
    result &= event->getByLabel( tPhoPx, hPhoPx );
    if ( hPhoPx.isValid() ) PhoPx = *hPhoPx;
    result &= event->getByLabel( tPhoPy, hPhoPy );
    if ( hPhoPy.isValid() ) PhoPy = *hPhoPy;
    result &= event->getByLabel( tPhoPz, hPhoPz );
    if ( hPhoPz.isValid() ) PhoPz = *hPhoPz;
    result &= event->getByLabel( tPhoR9, hPhoR9 );
    if ( hPhoR9.isValid() ) PhoR9 = *hPhoR9;
    result &= event->getByLabel( tPhoS4OverS1, hPhoS4OverS1 );
    if ( hPhoS4OverS1.isValid() ) PhoS4OverS1 = *hPhoS4OverS1;
    result &= event->getByLabel( tPhoSCEtaWidth, hPhoSCEtaWidth );
    if ( hPhoSCEtaWidth.isValid() ) PhoSCEtaWidth = *hPhoSCEtaWidth;
    result &= event->getByLabel( tPhoSCRawEnergy, hPhoSCRawEnergy );
    if ( hPhoSCRawEnergy.isValid() ) PhoSCRawEnergy = *hPhoSCRawEnergy;
    result &= event->getByLabel( tPhoSCSigmaPhiPhi, hPhoSCSigmaPhiPhi );
    if ( hPhoSCSigmaPhiPhi.isValid() ) PhoSCSigmaPhiPhi = *hPhoSCSigmaPhiPhi;
    result &= event->getByLabel( tPhoScSeedSeverity, hPhoScSeedSeverity );
    if ( hPhoScSeedSeverity.isValid() ) PhoScSeedSeverity = *hPhoScSeedSeverity;
    result &= event->getByLabel( tPhoSigmaEtaEta, hPhoSigmaEtaEta );
    if ( hPhoSigmaEtaEta.isValid() ) PhoSigmaEtaEta = *hPhoSigmaEtaEta;
    result &= event->getByLabel( tPhoSigmaIetaIeta, hPhoSigmaIetaIeta );
    if ( hPhoSigmaIetaIeta.isValid() ) PhoSigmaIetaIeta = *hPhoSigmaIetaIeta;
    result &= event->getByLabel( tPhoisEB, hPhoisEB );
    if ( hPhoisEB.isValid() ) PhoisEB = *hPhoisEB;
    result &= event->getByLabel( tPhoisEBEEGap, hPhoisEBEEGap );
    if ( hPhoisEBEEGap.isValid() ) PhoisEBEEGap = *hPhoisEBEEGap;
    result &= event->getByLabel( tPhoisEBEtaGap, hPhoisEBEtaGap );
    if ( hPhoisEBEtaGap.isValid() ) PhoisEBEtaGap = *hPhoisEBEtaGap;
    result &= event->getByLabel( tPhoisEBPhiGap, hPhoisEBPhiGap );
    if ( hPhoisEBPhiGap.isValid() ) PhoisEBPhiGap = *hPhoisEBPhiGap;
    result &= event->getByLabel( tPhoisEE, hPhoisEE );
    if ( hPhoisEE.isValid() ) PhoisEE = *hPhoisEE;
    result &= event->getByLabel( tPhoisEEDeeGap, hPhoisEEDeeGap );
    if ( hPhoisEEDeeGap.isValid() ) PhoisEEDeeGap = *hPhoisEEDeeGap;
    result &= event->getByLabel( tPhoisEERingGap, hPhoisEERingGap );
    if ( hPhoisEERingGap.isValid() ) PhoisEERingGap = *hPhoisEERingGap;
    result &= event->getByLabel( tPhoisPFElectron, hPhoisPFElectron );
    if ( hPhoisPFElectron.isValid() ) PhoisPFElectron = *hPhoisPFElectron;
    result &= event->getByLabel( tPhoisPFPhoton, hPhoisPFPhoton );
    if ( hPhoisPFPhoton.isValid() ) PhoisPFPhoton = *hPhoisPFPhoton;
    result &= event->getByLabel( tPhoisPFlowPhoton, hPhoisPFlowPhoton );
    if ( hPhoisPFlowPhoton.isValid() ) PhoisPFlowPhoton = *hPhoisPFlowPhoton;
    result &= event->getByLabel( tPhoisStandardPhoton, hPhoisStandardPhoton );
    if ( hPhoisStandardPhoton.isValid() ) PhoisStandardPhoton = *hPhoisStandardPhoton;
    result &= event->getByLabel( tPhomaxEnergyXtal, hPhomaxEnergyXtal );
    if ( hPhomaxEnergyXtal.isValid() ) PhomaxEnergyXtal = *hPhomaxEnergyXtal;
    result &= event->getByLabel( tPhotSCindex, hPhotSCindex );
    if ( hPhotSCindex.isValid() ) PhotSCindex = *hPhotSCindex;
    result &= event->getByLabel( tPrimVtxGood, hPrimVtxGood );
    if ( hPrimVtxGood.isValid() ) PrimVtxGood = *hPrimVtxGood;
    result &= event->getByLabel( tPrimVtxIsFake, hPrimVtxIsFake );
    if ( hPrimVtxIsFake.isValid() ) PrimVtxIsFake = *hPrimVtxIsFake;
    result &= event->getByLabel( tPrimVtxNChi2, hPrimVtxNChi2 );
    if ( hPrimVtxNChi2.isValid() ) PrimVtxNChi2 = *hPrimVtxNChi2;
    result &= event->getByLabel( tPrimVtxNdof, hPrimVtxNdof );
    if ( hPrimVtxNdof.isValid() ) PrimVtxNdof = *hPrimVtxNdof;
    result &= event->getByLabel( tPrimVtxPtSum, hPrimVtxPtSum );
    if ( hPrimVtxPtSum.isValid() ) PrimVtxPtSum = *hPrimVtxPtSum;
    result &= event->getByLabel( tPrimVtxRho, hPrimVtxRho );
    if ( hPrimVtxRho.isValid() ) PrimVtxRho = *hPrimVtxRho;
    result &= event->getByLabel( tPrimVtxx, hPrimVtxx );
    if ( hPrimVtxx.isValid() ) PrimVtxx = *hPrimVtxx;
    result &= event->getByLabel( tPrimVtxxE, hPrimVtxxE );
    if ( hPrimVtxxE.isValid() ) PrimVtxxE = *hPrimVtxxE;
    result &= event->getByLabel( tPrimVtxy, hPrimVtxy );
    if ( hPrimVtxy.isValid() ) PrimVtxy = *hPrimVtxy;
    result &= event->getByLabel( tPrimVtxyE, hPrimVtxyE );
    if ( hPrimVtxyE.isValid() ) PrimVtxyE = *hPrimVtxyE;
    result &= event->getByLabel( tPrimVtxz, hPrimVtxz );
    if ( hPrimVtxz.isValid() ) PrimVtxz = *hPrimVtxz;
    result &= event->getByLabel( tPrimVtxzE, hPrimVtxzE );
    if ( hPrimVtxzE.isValid() ) PrimVtxzE = *hPrimVtxzE;
    result &= event->getByLabel( tPtHat, hPtHat );
    if ( hPtHat.isValid() ) PtHat = *hPtHat;
    result &= event->getByLabel( tQCDPartonicHT, hQCDPartonicHT );
    if ( hQCDPartonicHT.isValid() ) QCDPartonicHT = *hQCDPartonicHT;
    result &= event->getByLabel( tRawMET, hRawMET );
    if ( hRawMET.isValid() ) RawMET = *hRawMET;
    result &= event->getByLabel( tRawMETSignificance, hRawMETSignificance );
    if ( hRawMETSignificance.isValid() ) RawMETSignificance = *hRawMETSignificance;
    result &= event->getByLabel( tRawMETemEtFrac, hRawMETemEtFrac );
    if ( hRawMETemEtFrac.isValid() ) RawMETemEtFrac = *hRawMETemEtFrac;
    result &= event->getByLabel( tRawMETemEtInEB, hRawMETemEtInEB );
    if ( hRawMETemEtInEB.isValid() ) RawMETemEtInEB = *hRawMETemEtInEB;
    result &= event->getByLabel( tRawMETemEtInEE, hRawMETemEtInEE );
    if ( hRawMETemEtInEE.isValid() ) RawMETemEtInEE = *hRawMETemEtInEE;
    result &= event->getByLabel( tRawMETemEtInHF, hRawMETemEtInHF );
    if ( hRawMETemEtInHF.isValid() ) RawMETemEtInHF = *hRawMETemEtInHF;
    result &= event->getByLabel( tRawMEThadEtFrac, hRawMEThadEtFrac );
    if ( hRawMEThadEtFrac.isValid() ) RawMEThadEtFrac = *hRawMEThadEtFrac;
    result &= event->getByLabel( tRawMEThadEtInHB, hRawMEThadEtInHB );
    if ( hRawMEThadEtInHB.isValid() ) RawMEThadEtInHB = *hRawMEThadEtInHB;
    result &= event->getByLabel( tRawMEThadEtInHE, hRawMEThadEtInHE );
    if ( hRawMEThadEtInHE.isValid() ) RawMEThadEtInHE = *hRawMEThadEtInHE;
    result &= event->getByLabel( tRawMEThadEtInHF, hRawMEThadEtInHF );
    if ( hRawMEThadEtInHF.isValid() ) RawMEThadEtInHF = *hRawMEThadEtInHF;
    result &= event->getByLabel( tRawMETphi, hRawMETphi );
    if ( hRawMETphi.isValid() ) RawMETphi = *hRawMETphi;
    result &= event->getByLabel( tRawMETpx, hRawMETpx );
    if ( hRawMETpx.isValid() ) RawMETpx = *hRawMETpx;
    result &= event->getByLabel( tRawMETpy, hRawMETpy );
    if ( hRawMETpy.isValid() ) RawMETpy = *hRawMETpy;
    result &= event->getByLabel( tRecovRecHitFilterFlag, hRecovRecHitFilterFlag );
    if ( hRecovRecHitFilterFlag.isValid() ) RecovRecHitFilterFlag = *hRecovRecHitFilterFlag;
    result &= event->getByLabel( tRho, hRho );
    if ( hRho.isValid() ) Rho = *hRho;
    result &= event->getByLabel( tRhoPFnoPU, hRhoPFnoPU );
    if ( hRhoPFnoPU.isValid() ) RhoPFnoPU = *hRhoPFnoPU;
    result &= event->getByLabel( tRun, hRun );
    if ( hRun.isValid() ) Run = *hRun;
    result &= event->getByLabel( tSCBrem, hSCBrem );
    if ( hSCBrem.isValid() ) SCBrem = *hSCBrem;
    result &= event->getByLabel( tSCEnergy, hSCEnergy );
    if ( hSCEnergy.isValid() ) SCEnergy = *hSCEnergy;
    result &= event->getByLabel( tSCEta, hSCEta );
    if ( hSCEta.isValid() ) SCEta = *hSCEta;
    result &= event->getByLabel( tSCEtaWidth, hSCEtaWidth );
    if ( hSCEtaWidth.isValid() ) SCEtaWidth = *hSCEtaWidth;
    result &= event->getByLabel( tSCPhi, hSCPhi );
    if ( hSCPhi.isValid() ) SCPhi = *hSCPhi;
    result &= event->getByLabel( tSCPhiWidth, hSCPhiWidth );
    if ( hSCPhiWidth.isValid() ) SCPhiWidth = *hSCPhiWidth;
    result &= event->getByLabel( tSCPre, hSCPre );
    if ( hSCPre.isValid() ) SCPre = *hSCPre;
    result &= event->getByLabel( tSCR9, hSCR9 );
    if ( hSCR9.isValid() ) SCR9 = *hSCR9;
    result &= event->getByLabel( tSCRaw, hSCRaw );
    if ( hSCRaw.isValid() ) SCRaw = *hSCRaw;
    result &= event->getByLabel( tSCcrackcorr, hSCcrackcorr );
    if ( hSCcrackcorr.isValid() ) SCcrackcorr = *hSCcrackcorr;
    result &= event->getByLabel( tSCcrackcorrseed, hSCcrackcorrseed );
    if ( hSCcrackcorrseed.isValid() ) SCcrackcorrseed = *hSCcrackcorrseed;
    result &= event->getByLabel( tSCcrackcorrseedfactor, hSCcrackcorrseedfactor );
    if ( hSCcrackcorrseedfactor.isValid() ) SCcrackcorrseedfactor = *hSCcrackcorrseedfactor;
    result &= event->getByLabel( tSClocalcorr, hSClocalcorr );
    if ( hSClocalcorr.isValid() ) SClocalcorr = *hSClocalcorr;
    result &= event->getByLabel( tSClocalcorrseed, hSClocalcorrseed );
    if ( hSClocalcorrseed.isValid() ) SClocalcorrseed = *hSClocalcorrseed;
    result &= event->getByLabel( tSClocalcorrseedfactor, hSClocalcorrseedfactor );
    if ( hSClocalcorrseedfactor.isValid() ) SClocalcorrseedfactor = *hSClocalcorrseedfactor;
    result &= event->getByLabel( tSigProcID, hSigProcID );
    if ( hSigProcID.isValid() ) SigProcID = *hSigProcID;
    result &= event->getByLabel( tSumEt, hSumEt );
    if ( hSumEt.isValid() ) SumEt = *hSumEt;
    result &= event->getByLabel( tTCMET, hTCMET );
    if ( hTCMET.isValid() ) TCMET = *hTCMET;
    result &= event->getByLabel( tTCMETSignificance, hTCMETSignificance );
    if ( hTCMETSignificance.isValid() ) TCMETSignificance = *hTCMETSignificance;
    result &= event->getByLabel( tTCMETphi, hTCMETphi );
    if ( hTCMETphi.isValid() ) TCMETphi = *hTCMETphi;
    result &= event->getByLabel( tTCMETpx, hTCMETpx );
    if ( hTCMETpx.isValid() ) TCMETpx = *hTCMETpx;
    result &= event->getByLabel( tTCMETpy, hTCMETpy );
    if ( hTCMETpy.isValid() ) TCMETpy = *hTCMETpy;
    result &= event->getByLabel( tTrkEta, hTrkEta );
    if ( hTrkEta.isValid() ) TrkEta = *hTrkEta;
    result &= event->getByLabel( tTrkGood, hTrkGood );
    if ( hTrkGood.isValid() ) TrkGood = *hTrkGood;
    result &= event->getByLabel( tTrkNChi2, hTrkNChi2 );
    if ( hTrkNChi2.isValid() ) TrkNChi2 = *hTrkNChi2;
    result &= event->getByLabel( tTrkNHits, hTrkNHits );
    if ( hTrkNHits.isValid() ) TrkNHits = *hTrkNHits;
    result &= event->getByLabel( tTrkPhi, hTrkPhi );
    if ( hTrkPhi.isValid() ) TrkPhi = *hTrkPhi;
    result &= event->getByLabel( tTrkPt, hTrkPt );
    if ( hTrkPt.isValid() ) TrkPt = *hTrkPt;
    result &= event->getByLabel( tTrkPtSum, hTrkPtSum );
    if ( hTrkPtSum.isValid() ) TrkPtSum = *hTrkPtSum;
    result &= event->getByLabel( tTrkPtSumPhi, hTrkPtSumPhi );
    if ( hTrkPtSumPhi.isValid() ) TrkPtSumPhi = *hTrkPtSumPhi;
    result &= event->getByLabel( tTrkPtSumx, hTrkPtSumx );
    if ( hTrkPtSumx.isValid() ) TrkPtSumx = *hTrkPtSumx;
    result &= event->getByLabel( tTrkPtSumy, hTrkPtSumy );
    if ( hTrkPtSumy.isValid() ) TrkPtSumy = *hTrkPtSumy;
    result &= event->getByLabel( tTrkVtxDxy, hTrkVtxDxy );
    if ( hTrkVtxDxy.isValid() ) TrkVtxDxy = *hTrkVtxDxy;
    result &= event->getByLabel( tTrkVtxDz, hTrkVtxDz );
    if ( hTrkVtxDz.isValid() ) TrkVtxDz = *hTrkVtxDz;
    result &= event->getByLabel( tVrtxChi2, hVrtxChi2 );
    if ( hVrtxChi2.isValid() ) VrtxChi2 = *hVrtxChi2;
    result &= event->getByLabel( tVrtxIsFake, hVrtxIsFake );
    if ( hVrtxIsFake.isValid() ) VrtxIsFake = *hVrtxIsFake;
    result &= event->getByLabel( tVrtxNdof, hVrtxNdof );
    if ( hVrtxNdof.isValid() ) VrtxNdof = *hVrtxNdof;
    result &= event->getByLabel( tVrtxNtrks, hVrtxNtrks );
    if ( hVrtxNtrks.isValid() ) VrtxNtrks = *hVrtxNtrks;
    result &= event->getByLabel( tVrtxSumPt, hVrtxSumPt );
    if ( hVrtxSumPt.isValid() ) VrtxSumPt = *hVrtxSumPt;
    result &= event->getByLabel( tVrtxX, hVrtxX );
    if ( hVrtxX.isValid() ) VrtxX = *hVrtxX;
    result &= event->getByLabel( tVrtxXE, hVrtxXE );
    if ( hVrtxXE.isValid() ) VrtxXE = *hVrtxXE;
    result &= event->getByLabel( tVrtxY, hVrtxY );
    if ( hVrtxY.isValid() ) VrtxY = *hVrtxY;
    result &= event->getByLabel( tVrtxYE, hVrtxYE );
    if ( hVrtxYE.isValid() ) VrtxYE = *hVrtxYE;
    result &= event->getByLabel( tVrtxZ, hVrtxZ );
    if ( hVrtxZ.isValid() ) VrtxZ = *hVrtxZ;
    result &= event->getByLabel( tVrtxZE, hVrtxZE );
    if ( hVrtxZE.isValid() ) VrtxZE = *hVrtxZE;
    result &= event->getByLabel( tWeight, hWeight );
    if ( hWeight.isValid() ) Weight = *hWeight;
    result &= event->getByLabel( tpdfW, hpdfW );
    if ( hpdfW.isValid() ) pdfW = *hpdfW;
    result &= event->getByLabel( tpdfWsum, hpdfWsum );
    if ( hpdfWsum.isValid() ) pdfWsum = *hpdfWsum;
    result &= event->getByLabel( tprocess, hprocess );
    if ( hprocess.isValid() ) process = *hprocess;
    result &= event->getByLabel( tsignMu, hsignMu );
    if ( hsignMu.isValid() ) signMu = *hsignMu;

    return result;
    
}


//____________________________________________________________________
// Called at init: define "tags"
void TreeClassBase::Init(void)
{

    tBtagMatchDeltaR           = edm::InputTag("analyze","BtagMatchDeltaR");
    tExtXSecLO                 = edm::InputTag("analyze","ExtXSecLO");
    tExtXSecNLO                = edm::InputTag("analyze","ExtXSecNLO");
    tHLTLabels                 = edm::InputTag("analyze","HLTLabels");
    tHLTNames                  = edm::InputTag("analyze","HLTNames");
    tIntXSec                   = edm::InputTag("analyze","IntXSec");
    tL1PhysMenu                = edm::InputTag("analyze","L1PhysMenu");
    tMaxElEta                  = edm::InputTag("analyze","MaxElEta");
    tMaxGenJetEta              = edm::InputTag("analyze","MaxGenJetEta");
    tMaxGenLeptEta             = edm::InputTag("analyze","MaxGenLeptEta");
    tMaxGenPhotEta             = edm::InputTag("analyze","MaxGenPhotEta");
    tMaxJEta                   = edm::InputTag("analyze","MaxJEta");
    tMaxMuEta                  = edm::InputTag("analyze","MaxMuEta");
    tMaxNEBhits                = edm::InputTag("analyze","MaxNEBhits");
    tMaxNEles                  = edm::InputTag("analyze","MaxNEles");
    tMaxNGenJet                = edm::InputTag("analyze","MaxNGenJet");
    tMaxNGenLep                = edm::InputTag("analyze","MaxNGenLep");
    tMaxNGenPho                = edm::InputTag("analyze","MaxNGenPho");
    tMaxNJets                  = edm::InputTag("analyze","MaxNJets");
    tMaxNMus                   = edm::InputTag("analyze","MaxNMus");
    tMaxNPhotons               = edm::InputTag("analyze","MaxNPhotons");
    tMaxNPileup                = edm::InputTag("analyze","MaxNPileup");
    tMaxNSC                    = edm::InputTag("analyze","MaxNSC");
    tMaxNTrks                  = edm::InputTag("analyze","MaxNTrks");
    tMaxNVrtx                  = edm::InputTag("analyze","MaxNVrtx");
    tMaxPhotonEta              = edm::InputTag("analyze","MaxPhotonEta");
    tMaxTrkEta                 = edm::InputTag("analyze","MaxTrkEta");
    tMaxTrkNChi2               = edm::InputTag("analyze","MaxTrkNChi2");
    tMinEBRechitE              = edm::InputTag("analyze","MinEBRechitE");
    tMinElPt                   = edm::InputTag("analyze","MinElPt");
    tMinGenJetPt               = edm::InputTag("analyze","MinGenJetPt");
    tMinGenLeptPt              = edm::InputTag("analyze","MinGenLeptPt");
    tMinGenPhotPt              = edm::InputTag("analyze","MinGenPhotPt");
    tMinJEMfrac                = edm::InputTag("analyze","MinJEMfrac");
    tMinJPt                    = edm::InputTag("analyze","MinJPt");
    tMinMuPt                   = edm::InputTag("analyze","MinMuPt");
    tMinPhotonPt               = edm::InputTag("analyze","MinPhotonPt");
    tMinRawJPt                 = edm::InputTag("analyze","MinRawJPt");
    tMinSCraw                  = edm::InputTag("analyze","MinSCraw");
    tMinTrkNHits               = edm::InputTag("analyze","MinTrkNHits");
    tMinTrkPt                  = edm::InputTag("analyze","MinTrkPt");
    tPileUpData                = edm::InputTag("analyze","PileUpData");
    tPileUpMC                  = edm::InputTag("analyze","PileUpMC");
    tA0                        = edm::InputTag("analyze","A0");
    tBeamspotx                 = edm::InputTag("analyze","Beamspotx");
    tBeamspoty                 = edm::InputTag("analyze","Beamspoty");
    tBeamspotz                 = edm::InputTag("analyze","Beamspotz");
    tCSCTightHaloID            = edm::InputTag("analyze","CSCTightHaloID");
    tEBrechitChi2              = edm::InputTag("analyze","EBrechitChi2");
    tEBrechitE                 = edm::InputTag("analyze","EBrechitE");
    tEBrechitE2oE9             = edm::InputTag("analyze","EBrechitE2oE9");
    tEBrechitE4oE1             = edm::InputTag("analyze","EBrechitE4oE1");
    tEBrechitEta               = edm::InputTag("analyze","EBrechitEta");
    tEBrechitPhi               = edm::InputTag("analyze","EBrechitPhi");
    tEBrechitPt                = edm::InputTag("analyze","EBrechitPt");
    tEBrechitTime              = edm::InputTag("analyze","EBrechitTime");
    tECALEsumx                 = edm::InputTag("analyze","ECALEsumx");
    tECALEsumy                 = edm::InputTag("analyze","ECALEsumy");
    tECALEsumz                 = edm::InputTag("analyze","ECALEsumz");
    tECALMET                   = edm::InputTag("analyze","ECALMET");
    tECALMETEta                = edm::InputTag("analyze","ECALMETEta");
    tECALMETPhi                = edm::InputTag("analyze","ECALMETPhi");
    tECALSumEt                 = edm::InputTag("analyze","ECALSumEt");
    tEcalDeadTPFilterFlag      = edm::InputTag("analyze","EcalDeadTPFilterFlag");
    tElBasicClustersSize       = edm::InputTag("analyze","ElBasicClustersSize");
    tElCInfoIsGsfCtfCons       = edm::InputTag("analyze","ElCInfoIsGsfCtfCons");
    tElCInfoIsGsfCtfScPixCons  = edm::InputTag("analyze","ElCInfoIsGsfCtfScPixCons");
    tElCInfoIsGsfScPixCons     = edm::InputTag("analyze","ElCInfoIsGsfScPixCons");
    tElCaloEnergy              = edm::InputTag("analyze","ElCaloEnergy");
    tElCharge                  = edm::InputTag("analyze","ElCharge");
    tElChargeMisIDProb         = edm::InputTag("analyze","ElChargeMisIDProb");
    tElClosestCtfTrackCharge   = edm::InputTag("analyze","ElClosestCtfTrackCharge");
    tElClosestCtfTrackEta      = edm::InputTag("analyze","ElClosestCtfTrackEta");
    tElClosestCtfTrackPhi      = edm::InputTag("analyze","ElClosestCtfTrackPhi");
    tElClosestCtfTrackPt       = edm::InputTag("analyze","ElClosestCtfTrackPt");
    tElConvPartnerTrkCharge    = edm::InputTag("analyze","ElConvPartnerTrkCharge");
    tElConvPartnerTrkDCot      = edm::InputTag("analyze","ElConvPartnerTrkDCot");
    tElConvPartnerTrkDist      = edm::InputTag("analyze","ElConvPartnerTrkDist");
    tElConvPartnerTrkEta       = edm::InputTag("analyze","ElConvPartnerTrkEta");
    tElConvPartnerTrkPhi       = edm::InputTag("analyze","ElConvPartnerTrkPhi");
    tElConvPartnerTrkPt        = edm::InputTag("analyze","ElConvPartnerTrkPt");
    tElD0BS                    = edm::InputTag("analyze","ElD0BS");
    tElD0E                     = edm::InputTag("analyze","ElD0E");
    tElD0PV                    = edm::InputTag("analyze","ElD0PV");
    tElDR03EcalRecHitSumEt     = edm::InputTag("analyze","ElDR03EcalRecHitSumEt");
    tElDR03HcalTowerSumEt      = edm::InputTag("analyze","ElDR03HcalTowerSumEt");
    tElDR03TkSumPt             = edm::InputTag("analyze","ElDR03TkSumPt");
    tElDR04EcalRecHitSumEt     = edm::InputTag("analyze","ElDR04EcalRecHitSumEt");
    tElDR04HcalTowerSumEt      = edm::InputTag("analyze","ElDR04HcalTowerSumEt");
    tElDR04TkSumPt             = edm::InputTag("analyze","ElDR04TkSumPt");
    tElDeltaEtaSeedClusterAtCalo = edm::InputTag("analyze","ElDeltaEtaSeedClusterAtCalo");
    tElDeltaEtaSuperClusterAtVtx = edm::InputTag("analyze","ElDeltaEtaSuperClusterAtVtx");
    tElDeltaPhiSeedClusterAtCalo = edm::InputTag("analyze","ElDeltaPhiSeedClusterAtCalo");
    tElDeltaPhiSuperClusterAtVtx = edm::InputTag("analyze","ElDeltaPhiSuperClusterAtVtx");
    tElDzBS                    = edm::InputTag("analyze","ElDzBS");
    tElDzE                     = edm::InputTag("analyze","ElDzE");
    tElDzPV                    = edm::InputTag("analyze","ElDzPV");
    tElE                       = edm::InputTag("analyze","ElE");
    tElE1OverE9                = edm::InputTag("analyze","ElE1OverE9");
    tElE1x5                    = edm::InputTag("analyze","ElE1x5");
    tElE2x5Max                 = edm::InputTag("analyze","ElE2x5Max");
    tElE5x5                    = edm::InputTag("analyze","ElE5x5");
    tElESuperClusterOverP      = edm::InputTag("analyze","ElESuperClusterOverP");
    tElEcalDriven              = edm::InputTag("analyze","ElEcalDriven");
    tElEcalEnergyError         = edm::InputTag("analyze","ElEcalEnergyError");
    tElEleMomentumError        = edm::InputTag("analyze","ElEleMomentumError");
    tElEt                      = edm::InputTag("analyze","ElEt");
    tElEta                     = edm::InputTag("analyze","ElEta");
    tElGenE                    = edm::InputTag("analyze","ElGenE");
    tElGenEta                  = edm::InputTag("analyze","ElGenEta");
    tElGenGME                  = edm::InputTag("analyze","ElGenGME");
    tElGenGMEta                = edm::InputTag("analyze","ElGenGMEta");
    tElGenGMID                 = edm::InputTag("analyze","ElGenGMID");
    tElGenGMPhi                = edm::InputTag("analyze","ElGenGMPhi");
    tElGenGMPt                 = edm::InputTag("analyze","ElGenGMPt");
    tElGenGMStatus             = edm::InputTag("analyze","ElGenGMStatus");
    tElGenID                   = edm::InputTag("analyze","ElGenID");
    tElGenME                   = edm::InputTag("analyze","ElGenME");
    tElGenMEta                 = edm::InputTag("analyze","ElGenMEta");
    tElGenMID                  = edm::InputTag("analyze","ElGenMID");
    tElGenMPhi                 = edm::InputTag("analyze","ElGenMPhi");
    tElGenMPt                  = edm::InputTag("analyze","ElGenMPt");
    tElGenMStatus              = edm::InputTag("analyze","ElGenMStatus");
    tElGenPhi                  = edm::InputTag("analyze","ElGenPhi");
    tElGenPt                   = edm::InputTag("analyze","ElGenPt");
    tElGenStatus               = edm::InputTag("analyze","ElGenStatus");
    tElGood                    = edm::InputTag("analyze","ElGood");
    tElGsfTkEta                = edm::InputTag("analyze","ElGsfTkEta");
    tElGsfTkPhi                = edm::InputTag("analyze","ElGsfTkPhi");
    tElGsfTkPt                 = edm::InputTag("analyze","ElGsfTkPt");
    tElHcalOverEcal            = edm::InputTag("analyze","ElHcalOverEcal");
    tElIDLoose                 = edm::InputTag("analyze","ElIDLoose");
    tElIDMva                   = edm::InputTag("analyze","ElIDMva");
    tElIDRobustLoose           = edm::InputTag("analyze","ElIDRobustLoose");
    tElIDRobustTight           = edm::InputTag("analyze","ElIDRobustTight");
    tElIDTight                 = edm::InputTag("analyze","ElIDTight");
    tElIDsimpleWP80relIso      = edm::InputTag("analyze","ElIDsimpleWP80relIso");
    tElIDsimpleWP85relIso      = edm::InputTag("analyze","ElIDsimpleWP85relIso");
    tElIDsimpleWP90relIso      = edm::InputTag("analyze","ElIDsimpleWP90relIso");
    tElIDsimpleWP95relIso      = edm::InputTag("analyze","ElIDsimpleWP95relIso");
    tElIDsimpleWPrelIso        = edm::InputTag("analyze","ElIDsimpleWPrelIso");
    tElInGap                   = edm::InputTag("analyze","ElInGap");
    tElIsIso                   = edm::InputTag("analyze","ElIsIso");
    tElNBrems                  = edm::InputTag("analyze","ElNBrems");
    tElNChi2                   = edm::InputTag("analyze","ElNChi2");
    tElNumberOfMissingInnerHits = edm::InputTag("analyze","ElNumberOfMissingInnerHits");
    tElPhi                     = edm::InputTag("analyze","ElPhi");
    tElPt                      = edm::InputTag("analyze","ElPt");
    tElPtE                     = edm::InputTag("analyze","ElPtE");
    tElPx                      = edm::InputTag("analyze","ElPx");
    tElPy                      = edm::InputTag("analyze","ElPy");
    tElPz                      = edm::InputTag("analyze","ElPz");
    tElRelIso03                = edm::InputTag("analyze","ElRelIso03");
    tElRelIso04                = edm::InputTag("analyze","ElRelIso04");
    tElS4OverS1                = edm::InputTag("analyze","ElS4OverS1");
    tElSCEta                   = edm::InputTag("analyze","ElSCEta");
    tElSCindex                 = edm::InputTag("analyze","ElSCindex");
    tElScPixCharge             = edm::InputTag("analyze","ElScPixCharge");
    tElScSeedSeverity          = edm::InputTag("analyze","ElScSeedSeverity");
    tElSigmaIetaIeta           = edm::InputTag("analyze","ElSigmaIetaIeta");
    tElTheta                   = edm::InputTag("analyze","ElTheta");
    tElTrackerDriven           = edm::InputTag("analyze","ElTrackerDriven");
    tElTrkMomAtVtx             = edm::InputTag("analyze","ElTrkMomAtVtx");
    tElTrkMomentumError        = edm::InputTag("analyze","ElTrkMomentumError");
    tElfbrem                   = edm::InputTag("analyze","Elfbrem");
    tEvent                     = edm::InputTag("analyze","Event");
    tGenJetE                   = edm::InputTag("analyze","GenJetE");
    tGenJetEmE                 = edm::InputTag("analyze","GenJetEmE");
    tGenJetEta                 = edm::InputTag("analyze","GenJetEta");
    tGenJetHadE                = edm::InputTag("analyze","GenJetHadE");
    tGenJetInvE                = edm::InputTag("analyze","GenJetInvE");
    tGenJetPhi                 = edm::InputTag("analyze","GenJetPhi");
    tGenJetPt                  = edm::InputTag("analyze","GenJetPt");
    tGenLeptonEta              = edm::InputTag("analyze","GenLeptonEta");
    tGenLeptonGMEta            = edm::InputTag("analyze","GenLeptonGMEta");
    tGenLeptonGMID             = edm::InputTag("analyze","GenLeptonGMID");
    tGenLeptonGMPhi            = edm::InputTag("analyze","GenLeptonGMPhi");
    tGenLeptonGMPt             = edm::InputTag("analyze","GenLeptonGMPt");
    tGenLeptonGMStatus         = edm::InputTag("analyze","GenLeptonGMStatus");
    tGenLeptonID               = edm::InputTag("analyze","GenLeptonID");
    tGenLeptonMEta             = edm::InputTag("analyze","GenLeptonMEta");
    tGenLeptonMID              = edm::InputTag("analyze","GenLeptonMID");
    tGenLeptonMPhi             = edm::InputTag("analyze","GenLeptonMPhi");
    tGenLeptonMPt              = edm::InputTag("analyze","GenLeptonMPt");
    tGenLeptonMStatus          = edm::InputTag("analyze","GenLeptonMStatus");
    tGenLeptonPhi              = edm::InputTag("analyze","GenLeptonPhi");
    tGenLeptonPt               = edm::InputTag("analyze","GenLeptonPt");
    tGenMET                    = edm::InputTag("analyze","GenMET");
    tGenMETphi                 = edm::InputTag("analyze","GenMETphi");
    tGenMETpx                  = edm::InputTag("analyze","GenMETpx");
    tGenMETpy                  = edm::InputTag("analyze","GenMETpy");
    tGenPhotonEta              = edm::InputTag("analyze","GenPhotonEta");
    tGenPhotonMotherID         = edm::InputTag("analyze","GenPhotonMotherID");
    tGenPhotonMotherStatus     = edm::InputTag("analyze","GenPhotonMotherStatus");
    tGenPhotonPartonMindR      = edm::InputTag("analyze","GenPhotonPartonMindR");
    tGenPhotonPhi              = edm::InputTag("analyze","GenPhotonPhi");
    tGenPhotonPt               = edm::InputTag("analyze","GenPhotonPt");
    tGenWeight                 = edm::InputTag("analyze","GenWeight");
    tGoodEvent                 = edm::InputTag("analyze","GoodEvent");
    tHBHENoiseFlag             = edm::InputTag("analyze","HBHENoiseFlag");
    tHBHENoiseFlagIso          = edm::InputTag("analyze","HBHENoiseFlagIso");
    tHCALEsumx                 = edm::InputTag("analyze","HCALEsumx");
    tHCALEsumy                 = edm::InputTag("analyze","HCALEsumy");
    tHCALEsumz                 = edm::InputTag("analyze","HCALEsumz");
    tHCALMET                   = edm::InputTag("analyze","HCALMET");
    tHCALMETPhi                = edm::InputTag("analyze","HCALMETPhi");
    tHCALMETeta                = edm::InputTag("analyze","HCALMETeta");
    tHCALSumEt                 = edm::InputTag("analyze","HCALSumEt");
    tHLTObjectEta0             = edm::InputTag("analyze","HLTObjectEta0");
    tHLTObjectEta1             = edm::InputTag("analyze","HLTObjectEta1");
    tHLTObjectEta2             = edm::InputTag("analyze","HLTObjectEta2");
    tHLTObjectEta3             = edm::InputTag("analyze","HLTObjectEta3");
    tHLTObjectEta4             = edm::InputTag("analyze","HLTObjectEta4");
    tHLTObjectEta5             = edm::InputTag("analyze","HLTObjectEta5");
    tHLTObjectEta6             = edm::InputTag("analyze","HLTObjectEta6");
    tHLTObjectEta7             = edm::InputTag("analyze","HLTObjectEta7");
    tHLTObjectEta8             = edm::InputTag("analyze","HLTObjectEta8");
    tHLTObjectEta9             = edm::InputTag("analyze","HLTObjectEta9");
    tHLTObjectID0              = edm::InputTag("analyze","HLTObjectID0");
    tHLTObjectID1              = edm::InputTag("analyze","HLTObjectID1");
    tHLTObjectID2              = edm::InputTag("analyze","HLTObjectID2");
    tHLTObjectID3              = edm::InputTag("analyze","HLTObjectID3");
    tHLTObjectID4              = edm::InputTag("analyze","HLTObjectID4");
    tHLTObjectID5              = edm::InputTag("analyze","HLTObjectID5");
    tHLTObjectID6              = edm::InputTag("analyze","HLTObjectID6");
    tHLTObjectID7              = edm::InputTag("analyze","HLTObjectID7");
    tHLTObjectID8              = edm::InputTag("analyze","HLTObjectID8");
    tHLTObjectID9              = edm::InputTag("analyze","HLTObjectID9");
    tHLTObjectPhi0             = edm::InputTag("analyze","HLTObjectPhi0");
    tHLTObjectPhi1             = edm::InputTag("analyze","HLTObjectPhi1");
    tHLTObjectPhi2             = edm::InputTag("analyze","HLTObjectPhi2");
    tHLTObjectPhi3             = edm::InputTag("analyze","HLTObjectPhi3");
    tHLTObjectPhi4             = edm::InputTag("analyze","HLTObjectPhi4");
    tHLTObjectPhi5             = edm::InputTag("analyze","HLTObjectPhi5");
    tHLTObjectPhi6             = edm::InputTag("analyze","HLTObjectPhi6");
    tHLTObjectPhi7             = edm::InputTag("analyze","HLTObjectPhi7");
    tHLTObjectPhi8             = edm::InputTag("analyze","HLTObjectPhi8");
    tHLTObjectPhi9             = edm::InputTag("analyze","HLTObjectPhi9");
    tHLTObjectPt0              = edm::InputTag("analyze","HLTObjectPt0");
    tHLTObjectPt1              = edm::InputTag("analyze","HLTObjectPt1");
    tHLTObjectPt2              = edm::InputTag("analyze","HLTObjectPt2");
    tHLTObjectPt3              = edm::InputTag("analyze","HLTObjectPt3");
    tHLTObjectPt4              = edm::InputTag("analyze","HLTObjectPt4");
    tHLTObjectPt5              = edm::InputTag("analyze","HLTObjectPt5");
    tHLTObjectPt6              = edm::InputTag("analyze","HLTObjectPt6");
    tHLTObjectPt7              = edm::InputTag("analyze","HLTObjectPt7");
    tHLTObjectPt8              = edm::InputTag("analyze","HLTObjectPt8");
    tHLTObjectPt9              = edm::InputTag("analyze","HLTObjectPt9");
    tHLTPrescale               = edm::InputTag("analyze","HLTPrescale");
    tHLTResults                = edm::InputTag("analyze","HLTResults");
    tJArea                     = edm::InputTag("analyze","JArea");
    tJChargedEmFrac            = edm::InputTag("analyze","JChargedEmFrac");
    tJChargedHadFrac           = edm::InputTag("analyze","JChargedHadFrac");
    tJChargedMuEnergyFrac      = edm::InputTag("analyze","JChargedMuEnergyFrac");
    tJE                        = edm::InputTag("analyze","JE");
    tJEcorr                    = edm::InputTag("analyze","JEcorr");
    tJEt                       = edm::InputTag("analyze","JEt");
    tJEta                      = edm::InputTag("analyze","JEta");
    tJEtaRms                   = edm::InputTag("analyze","JEtaRms");
    tJGenJetIndex              = edm::InputTag("analyze","JGenJetIndex");
    tJGood                     = edm::InputTag("analyze","JGood");
    tJMass                     = edm::InputTag("analyze","JMass");
    tJNAssoTracks              = edm::InputTag("analyze","JNAssoTracks");
    tJNConstituents            = edm::InputTag("analyze","JNConstituents");
    tJNNeutrals                = edm::InputTag("analyze","JNNeutrals");
    tJNeutralEmFrac            = edm::InputTag("analyze","JNeutralEmFrac");
    tJNeutralHadFrac           = edm::InputTag("analyze","JNeutralHadFrac");
    tJPhi                      = edm::InputTag("analyze","JPhi");
    tJPhiRms                   = edm::InputTag("analyze","JPhiRms");
    tJPt                       = edm::InputTag("analyze","JPt");
    tJPx                       = edm::InputTag("analyze","JPx");
    tJPy                       = edm::InputTag("analyze","JPy");
    tJPz                       = edm::InputTag("analyze","JPz");
    tJVtxExx                   = edm::InputTag("analyze","JVtxExx");
    tJVtxEyx                   = edm::InputTag("analyze","JVtxEyx");
    tJVtxEyy                   = edm::InputTag("analyze","JVtxEyy");
    tJVtxEzx                   = edm::InputTag("analyze","JVtxEzx");
    tJVtxEzy                   = edm::InputTag("analyze","JVtxEzy");
    tJVtxEzz                   = edm::InputTag("analyze","JVtxEzz");
    tJVtxNChi2                 = edm::InputTag("analyze","JVtxNChi2");
    tJVtxx                     = edm::InputTag("analyze","JVtxx");
    tJVtxy                     = edm::InputTag("analyze","JVtxy");
    tJVtxz                     = edm::InputTag("analyze","JVtxz");
    tJbTagProbSimpSVHighEff    = edm::InputTag("analyze","JbTagProbSimpSVHighEff");
    tJbTagProbSimpSVHighPur    = edm::InputTag("analyze","JbTagProbSimpSVHighPur");
    tJbTagProbTkCntHighEff     = edm::InputTag("analyze","JbTagProbTkCntHighEff");
    tJbTagProbTkCntHighPur     = edm::InputTag("analyze","JbTagProbTkCntHighPur");
    tJeMinDR                   = edm::InputTag("analyze","JeMinDR");
    tJtrk1px                   = edm::InputTag("analyze","Jtrk1px");
    tJtrk1py                   = edm::InputTag("analyze","Jtrk1py");
    tJtrk1pz                   = edm::InputTag("analyze","Jtrk1pz");
    tJtrk2px                   = edm::InputTag("analyze","Jtrk2px");
    tJtrk2py                   = edm::InputTag("analyze","Jtrk2py");
    tJtrk2pz                   = edm::InputTag("analyze","Jtrk2pz");
    tJtrk3px                   = edm::InputTag("analyze","Jtrk3px");
    tJtrk3py                   = edm::InputTag("analyze","Jtrk3py");
    tJtrk3pz                   = edm::InputTag("analyze","Jtrk3pz");
    tL1PhysResults             = edm::InputTag("analyze","L1PhysResults");
    tL1TechResults             = edm::InputTag("analyze","L1TechResults");
    tLumiSection               = edm::InputTag("analyze","LumiSection");
    tM0                        = edm::InputTag("analyze","M0");
    tM12                       = edm::InputTag("analyze","M12");
    tMETR12                    = edm::InputTag("analyze","METR12");
    tMETR21                    = edm::InputTag("analyze","METR21");
    tMassChi                   = edm::InputTag("analyze","MassChi");
    tMassGlu                   = edm::InputTag("analyze","MassGlu");
    tMassLSP                   = edm::InputTag("analyze","MassLSP");
    tMaxElExceed               = edm::InputTag("analyze","MaxElExceed");
    tMaxGenJetExceed           = edm::InputTag("analyze","MaxGenJetExceed");
    tMaxGenLepExceed           = edm::InputTag("analyze","MaxGenLepExceed");
    tMaxGenPhoExceed           = edm::InputTag("analyze","MaxGenPhoExceed");
    tMaxJetExceed              = edm::InputTag("analyze","MaxJetExceed");
    tMaxMuExceed               = edm::InputTag("analyze","MaxMuExceed");
    tMaxPhotonsExceed          = edm::InputTag("analyze","MaxPhotonsExceed");
    tMaxTrkExceed              = edm::InputTag("analyze","MaxTrkExceed");
    tMaxUncJetExceed           = edm::InputTag("analyze","MaxUncJetExceed");
    tMaxVerticesExceed         = edm::InputTag("analyze","MaxVerticesExceed");
    tMuCaloComp                = edm::InputTag("analyze","MuCaloComp");
    tMuCharge                  = edm::InputTag("analyze","MuCharge");
    tMuD0BS                    = edm::InputTag("analyze","MuD0BS");
    tMuD0E                     = edm::InputTag("analyze","MuD0E");
    tMuD0PV                    = edm::InputTag("analyze","MuD0PV");
    tMuDzBS                    = edm::InputTag("analyze","MuDzBS");
    tMuDzE                     = edm::InputTag("analyze","MuDzE");
    tMuDzPV                    = edm::InputTag("analyze","MuDzPV");
    tMuE                       = edm::InputTag("analyze","MuE");
    tMuEem                     = edm::InputTag("analyze","MuEem");
    tMuEhad                    = edm::InputTag("analyze","MuEhad");
    tMuEt                      = edm::InputTag("analyze","MuEt");
    tMuEta                     = edm::InputTag("analyze","MuEta");
    tMuGenE                    = edm::InputTag("analyze","MuGenE");
    tMuGenEta                  = edm::InputTag("analyze","MuGenEta");
    tMuGenGME                  = edm::InputTag("analyze","MuGenGME");
    tMuGenGMEta                = edm::InputTag("analyze","MuGenGMEta");
    tMuGenGMID                 = edm::InputTag("analyze","MuGenGMID");
    tMuGenGMPhi                = edm::InputTag("analyze","MuGenGMPhi");
    tMuGenGMPt                 = edm::InputTag("analyze","MuGenGMPt");
    tMuGenGMStatus             = edm::InputTag("analyze","MuGenGMStatus");
    tMuGenID                   = edm::InputTag("analyze","MuGenID");
    tMuGenME                   = edm::InputTag("analyze","MuGenME");
    tMuGenMEta                 = edm::InputTag("analyze","MuGenMEta");
    tMuGenMID                  = edm::InputTag("analyze","MuGenMID");
    tMuGenMPhi                 = edm::InputTag("analyze","MuGenMPhi");
    tMuGenMPt                  = edm::InputTag("analyze","MuGenMPt");
    tMuGenMStatus              = edm::InputTag("analyze","MuGenMStatus");
    tMuGenPhi                  = edm::InputTag("analyze","MuGenPhi");
    tMuGenPt                   = edm::InputTag("analyze","MuGenPt");
    tMuGenStatus               = edm::InputTag("analyze","MuGenStatus");
    tMuGood                    = edm::InputTag("analyze","MuGood");
    tMuInnerTkNChi2            = edm::InputTag("analyze","MuInnerTkNChi2");
    tMuInnerTkPt               = edm::InputTag("analyze","MuInnerTkPt");
    tMuIsAllArbitrated         = edm::InputTag("analyze","MuIsAllArbitrated");
    tMuIsAllStaMuons           = edm::InputTag("analyze","MuIsAllStaMuons");
    tMuIsAllTrkMuons           = edm::InputTag("analyze","MuIsAllTrkMuons");
    tMuIsGMPT                  = edm::InputTag("analyze","MuIsGMPT");
    tMuIsGMStaChiComp          = edm::InputTag("analyze","MuIsGMStaChiComp");
    tMuIsGMTkChiComp           = edm::InputTag("analyze","MuIsGMTkChiComp");
    tMuIsGMTkKinkTight         = edm::InputTag("analyze","MuIsGMTkKinkTight");
    tMuIsGlobalMuon            = edm::InputTag("analyze","MuIsGlobalMuon");
    tMuIsIso                   = edm::InputTag("analyze","MuIsIso");
    tMuIsTM2DCompLoose         = edm::InputTag("analyze","MuIsTM2DCompLoose");
    tMuIsTM2DCompTight         = edm::InputTag("analyze","MuIsTM2DCompTight");
    tMuIsTMLSAngLoose          = edm::InputTag("analyze","MuIsTMLSAngLoose");
    tMuIsTMLSAngTight          = edm::InputTag("analyze","MuIsTMLSAngTight");
    tMuIsTMLSLoose             = edm::InputTag("analyze","MuIsTMLSLoose");
    tMuIsTMLSOptLowPtLoose     = edm::InputTag("analyze","MuIsTMLSOptLowPtLoose");
    tMuIsTMLSTight             = edm::InputTag("analyze","MuIsTMLSTight");
    tMuIsTMOneStationAngLoose  = edm::InputTag("analyze","MuIsTMOneStationAngLoose");
    tMuIsTMOneStationAngTight  = edm::InputTag("analyze","MuIsTMOneStationAngTight");
    tMuIsTMOneStationLoose     = edm::InputTag("analyze","MuIsTMOneStationLoose");
    tMuIsTMOneStationTight     = edm::InputTag("analyze","MuIsTMOneStationTight");
    tMuIsTrackerMuon           = edm::InputTag("analyze","MuIsTrackerMuon");
    tMuIsTrkMuonArbitrated     = edm::InputTag("analyze","MuIsTrkMuonArbitrated");
    tMuIso03EMVetoEt           = edm::InputTag("analyze","MuIso03EMVetoEt");
    tMuIso03EmEt               = edm::InputTag("analyze","MuIso03EmEt");
    tMuIso03HadEt              = edm::InputTag("analyze","MuIso03HadEt");
    tMuIso03HadVetoEt          = edm::InputTag("analyze","MuIso03HadVetoEt");
    tMuIso03SumPt              = edm::InputTag("analyze","MuIso03SumPt");
    tMuIso05EmEt               = edm::InputTag("analyze","MuIso05EmEt");
    tMuIso05HadEt              = edm::InputTag("analyze","MuIso05HadEt");
    tMuIso05SumPt              = edm::InputTag("analyze","MuIso05SumPt");
    tMuJESCorrMET              = edm::InputTag("analyze","MuJESCorrMET");
    tMuJESCorrMETphi           = edm::InputTag("analyze","MuJESCorrMETphi");
    tMuJESCorrMETpx            = edm::InputTag("analyze","MuJESCorrMETpx");
    tMuJESCorrMETpy            = edm::InputTag("analyze","MuJESCorrMETpy");
    tMuNChambers               = edm::InputTag("analyze","MuNChambers");
    tMuNChi2                   = edm::InputTag("analyze","MuNChi2");
    tMuNGlHits                 = edm::InputTag("analyze","MuNGlHits");
    tMuNMatches                = edm::InputTag("analyze","MuNMatches");
    tMuNMuHits                 = edm::InputTag("analyze","MuNMuHits");
    tMuNPxHits                 = edm::InputTag("analyze","MuNPxHits");
    tMuNTkHits                 = edm::InputTag("analyze","MuNTkHits");
    tMuPhi                     = edm::InputTag("analyze","MuPhi");
    tMuPt                      = edm::InputTag("analyze","MuPt");
    tMuPtE                     = edm::InputTag("analyze","MuPtE");
    tMuPx                      = edm::InputTag("analyze","MuPx");
    tMuPy                      = edm::InputTag("analyze","MuPy");
    tMuPz                      = edm::InputTag("analyze","MuPz");
    tMuRelIso03                = edm::InputTag("analyze","MuRelIso03");
    tMuSegmComp                = edm::InputTag("analyze","MuSegmComp");
    tNCaloTowers               = edm::InputTag("analyze","NCaloTowers");
    tNEBhits                   = edm::InputTag("analyze","NEBhits");
    tNEles                     = edm::InputTag("analyze","NEles");
    tNElesTot                  = edm::InputTag("analyze","NElesTot");
    tNGMus                     = edm::InputTag("analyze","NGMus");
    tNGenJets                  = edm::InputTag("analyze","NGenJets");
    tNGenLeptons               = edm::InputTag("analyze","NGenLeptons");
    tNGenPhotons               = edm::InputTag("analyze","NGenPhotons");
    tNHLTObjs                  = edm::InputTag("analyze","NHLTObjs");
    tNJets                     = edm::InputTag("analyze","NJets");
    tNJetsTot                  = edm::InputTag("analyze","NJetsTot");
    tNMus                      = edm::InputTag("analyze","NMus");
    tNMusTot                   = edm::InputTag("analyze","NMusTot");
    tNPdfs                     = edm::InputTag("analyze","NPdfs");
    tNPhotons                  = edm::InputTag("analyze","NPhotons");
    tNPhotonsTot               = edm::InputTag("analyze","NPhotonsTot");
    tNSuperClusters            = edm::InputTag("analyze","NSuperClusters");
    tNTMus                     = edm::InputTag("analyze","NTMus");
    tNTracks                   = edm::InputTag("analyze","NTracks");
    tNTracksTot                = edm::InputTag("analyze","NTracksTot");
    tNVrtx                     = edm::InputTag("analyze","NVrtx");
    tPDFID1                    = edm::InputTag("analyze","PDFID1");
    tPDFID2                    = edm::InputTag("analyze","PDFID2");
    tPDFScalePDF               = edm::InputTag("analyze","PDFScalePDF");
    tPDFx1                     = edm::InputTag("analyze","PDFx1");
    tPDFx2                     = edm::InputTag("analyze","PDFx2");
    tPDFxPDF1                  = edm::InputTag("analyze","PDFxPDF1");
    tPDFxPDF2                  = edm::InputTag("analyze","PDFxPDF2");
    tPFMET                     = edm::InputTag("analyze","PFMET");
    tPFMETPAT                  = edm::InputTag("analyze","PFMETPAT");
    tPFMETPATSignificance      = edm::InputTag("analyze","PFMETPATSignificance");
    tPFMETPATphi               = edm::InputTag("analyze","PFMETPATphi");
    tPFMETPATpx                = edm::InputTag("analyze","PFMETPATpx");
    tPFMETPATpy                = edm::InputTag("analyze","PFMETPATpy");
    tPFMETSignificance         = edm::InputTag("analyze","PFMETSignificance");
    tPFMETphi                  = edm::InputTag("analyze","PFMETphi");
    tPFMETpx                   = edm::InputTag("analyze","PFMETpx");
    tPFMETpy                   = edm::InputTag("analyze","PFMETpy");
    tPFSumEt                   = edm::InputTag("analyze","PFSumEt");
    tPUOOTnumInteractionsEarly = edm::InputTag("analyze","PUOOTnumInteractionsEarly");
    tPUOOTnumInteractionsLate  = edm::InputTag("analyze","PUOOTnumInteractionsLate");
    tPUWeightInTime            = edm::InputTag("analyze","PUWeightInTime");
    tPUWeightTotal             = edm::InputTag("analyze","PUWeightTotal");
    tPUnTrksHighPt             = edm::InputTag("analyze","PUnTrksHighPt");
    tPUnTrksLowPt              = edm::InputTag("analyze","PUnTrksLowPt");
    tPUnumFilled               = edm::InputTag("analyze","PUnumFilled");
    tPUnumInteractions         = edm::InputTag("analyze","PUnumInteractions");
    tPUnumTrueInteractions     = edm::InputTag("analyze","PUnumTrueInteractions");
    tPUsumPtHighPt             = edm::InputTag("analyze","PUsumPtHighPt");
    tPUsumPtLowPt              = edm::InputTag("analyze","PUsumPtLowPt");
    tPUzPositions              = edm::InputTag("analyze","PUzPositions");
    tPhoCaloPositionX          = edm::InputTag("analyze","PhoCaloPositionX");
    tPhoCaloPositionY          = edm::InputTag("analyze","PhoCaloPositionY");
    tPhoCaloPositionZ          = edm::InputTag("analyze","PhoCaloPositionZ");
    tPhoChargedHadronIso       = edm::InputTag("analyze","PhoChargedHadronIso");
    tPhoCone01ChargedHadronIsodR015dEta0pt0PFnoPU = edm::InputTag("analyze","PhoCone01ChargedHadronIsodR015dEta0pt0PFnoPU");
    tPhoCone01ChargedHadronIsodR015dEta0pt0dz0 = edm::InputTag("analyze","PhoCone01ChargedHadronIsodR015dEta0pt0dz0");
    tPhoCone01ChargedHadronIsodR015dEta0pt0dz1dxy01 = edm::InputTag("analyze","PhoCone01ChargedHadronIsodR015dEta0pt0dz1dxy01");
    tPhoCone01ChargedHadronIsodR0dEta0pt0PFnoPU = edm::InputTag("analyze","PhoCone01ChargedHadronIsodR0dEta0pt0PFnoPU");
    tPhoCone01ChargedHadronIsodR0dEta0pt0dz0 = edm::InputTag("analyze","PhoCone01ChargedHadronIsodR0dEta0pt0dz0");
    tPhoCone01ChargedHadronIsodR0dEta0pt0dz1dxy01 = edm::InputTag("analyze","PhoCone01ChargedHadronIsodR0dEta0pt0dz1dxy01");
    tPhoCone01NeutralHadronIsodR0dEta0pt0mvVtx = edm::InputTag("analyze","PhoCone01NeutralHadronIsodR0dEta0pt0mvVtx");
    tPhoCone01PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx = edm::InputTag("analyze","PhoCone01PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx");
    tPhoCone02ChargedHadronIsodR015dEta0pt0PFnoPU = edm::InputTag("analyze","PhoCone02ChargedHadronIsodR015dEta0pt0PFnoPU");
    tPhoCone02ChargedHadronIsodR015dEta0pt0dz0 = edm::InputTag("analyze","PhoCone02ChargedHadronIsodR015dEta0pt0dz0");
    tPhoCone02ChargedHadronIsodR015dEta0pt0dz1dxy01 = edm::InputTag("analyze","PhoCone02ChargedHadronIsodR015dEta0pt0dz1dxy01");
    tPhoCone02ChargedHadronIsodR0dEta0pt0PFnoPU = edm::InputTag("analyze","PhoCone02ChargedHadronIsodR0dEta0pt0PFnoPU");
    tPhoCone02ChargedHadronIsodR0dEta0pt0dz0 = edm::InputTag("analyze","PhoCone02ChargedHadronIsodR0dEta0pt0dz0");
    tPhoCone02ChargedHadronIsodR0dEta0pt0dz1dxy01 = edm::InputTag("analyze","PhoCone02ChargedHadronIsodR0dEta0pt0dz1dxy01");
    tPhoCone02NeutralHadronIsodR0dEta0pt0mvVtx = edm::InputTag("analyze","PhoCone02NeutralHadronIsodR0dEta0pt0mvVtx");
    tPhoCone02PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx = edm::InputTag("analyze","PhoCone02PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx");
    tPhoCone03ChargedHadronIsodR015dEta0pt0PFnoPU = edm::InputTag("analyze","PhoCone03ChargedHadronIsodR015dEta0pt0PFnoPU");
    tPhoCone03ChargedHadronIsodR015dEta0pt0dz0 = edm::InputTag("analyze","PhoCone03ChargedHadronIsodR015dEta0pt0dz0");
    tPhoCone03ChargedHadronIsodR015dEta0pt0dz1dxy01 = edm::InputTag("analyze","PhoCone03ChargedHadronIsodR015dEta0pt0dz1dxy01");
    tPhoCone03ChargedHadronIsodR0dEta0pt0PFnoPU = edm::InputTag("analyze","PhoCone03ChargedHadronIsodR0dEta0pt0PFnoPU");
    tPhoCone03ChargedHadronIsodR0dEta0pt0dz0 = edm::InputTag("analyze","PhoCone03ChargedHadronIsodR0dEta0pt0dz0");
    tPhoCone03ChargedHadronIsodR0dEta0pt0dz1dxy01 = edm::InputTag("analyze","PhoCone03ChargedHadronIsodR0dEta0pt0dz1dxy01");
    tPhoCone03NeutralHadronIsodR0dEta0pt0mvVtx = edm::InputTag("analyze","PhoCone03NeutralHadronIsodR0dEta0pt0mvVtx");
    tPhoCone03PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx = edm::InputTag("analyze","PhoCone03PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx");
    tPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPU = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR015dEta0pt0PFnoPU");
    tPhoCone04ChargedHadronIsodR015dEta0pt0PFnoPUold = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR015dEta0pt0PFnoPUold");
    tPhoCone04ChargedHadronIsodR015dEta0pt0dz0 = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR015dEta0pt0dz0");
    tPhoCone04ChargedHadronIsodR015dEta0pt0dz0old = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR015dEta0pt0dz0old");
    tPhoCone04ChargedHadronIsodR015dEta0pt0dz1dxy01 = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR015dEta0pt0dz1dxy01");
    tPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPU = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR0dEta0pt0PFnoPU");
    tPhoCone04ChargedHadronIsodR0dEta0pt0PFnoPUold = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR0dEta0pt0PFnoPUold");
    tPhoCone04ChargedHadronIsodR0dEta0pt0dz0 = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR0dEta0pt0dz0");
    tPhoCone04ChargedHadronIsodR0dEta0pt0dz0old = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR0dEta0pt0dz0old");
    tPhoCone04ChargedHadronIsodR0dEta0pt0dz1dxy01 = edm::InputTag("analyze","PhoCone04ChargedHadronIsodR0dEta0pt0dz1dxy01");
    tPhoCone04NeutralHadronIsodR0dEta0pt0 = edm::InputTag("analyze","PhoCone04NeutralHadronIsodR0dEta0pt0");
    tPhoCone04NeutralHadronIsodR0dEta0pt0mvVtx = edm::InputTag("analyze","PhoCone04NeutralHadronIsodR0dEta0pt0mvVtx");
    tPhoCone04NeutralHadronIsodR0dEta0pt0nocracks = edm::InputTag("analyze","PhoCone04NeutralHadronIsodR0dEta0pt0nocracks");
    tPhoCone04NeutralHadronIsodR0dEta0pt5 = edm::InputTag("analyze","PhoCone04NeutralHadronIsodR0dEta0pt5");
    tPhoCone04NeutralHadronIsodR0dEta0pt5nocracks = edm::InputTag("analyze","PhoCone04NeutralHadronIsodR0dEta0pt5nocracks");
    tPhoCone04NeutralHadronIsodR7dEta0pt0 = edm::InputTag("analyze","PhoCone04NeutralHadronIsodR7dEta0pt0");
    tPhoCone04NeutralHadronIsodR7dEta0pt5 = edm::InputTag("analyze","PhoCone04NeutralHadronIsodR7dEta0pt5");
    tPhoCone04PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx = edm::InputTag("analyze","PhoCone04PhotonIsodR045EB070EEdEta015pt08EB1EEmvVtx");
    tPhoCone04PhotonIsodR0dEta0pt0 = edm::InputTag("analyze","PhoCone04PhotonIsodR0dEta0pt0");
    tPhoCone04PhotonIsodR0dEta0pt5 = edm::InputTag("analyze","PhoCone04PhotonIsodR0dEta0pt5");
    tPhoCone04PhotonIsodR8dEta0pt0 = edm::InputTag("analyze","PhoCone04PhotonIsodR8dEta0pt0");
    tPhoCone04PhotonIsodR8dEta0pt5 = edm::InputTag("analyze","PhoCone04PhotonIsodR8dEta0pt5");
    tPhoE1OverE9               = edm::InputTag("analyze","PhoE1OverE9");
    tPhoE1x5                   = edm::InputTag("analyze","PhoE1x5");
    tPhoE2x5                   = edm::InputTag("analyze","PhoE2x5");
    tPhoE3x3                   = edm::InputTag("analyze","PhoE3x3");
    tPhoE5x5                   = edm::InputTag("analyze","PhoE5x5");
    tPhoEnergy                 = edm::InputTag("analyze","PhoEnergy");
    tPhoEta                    = edm::InputTag("analyze","PhoEta");
    tPhoGood                   = edm::InputTag("analyze","PhoGood");
    tPhoH1overE                = edm::InputTag("analyze","PhoH1overE");
    tPhoH2overE                = edm::InputTag("analyze","PhoH2overE");
    tPhoHasConvTrks            = edm::InputTag("analyze","PhoHasConvTrks");
    tPhoHasPixSeed             = edm::InputTag("analyze","PhoHasPixSeed");
    tPhoHoverE                 = edm::InputTag("analyze","PhoHoverE");
    tPhoIsIso                  = edm::InputTag("analyze","PhoIsIso");
    tPhoIso03                  = edm::InputTag("analyze","PhoIso03");
    tPhoIso03Ecal              = edm::InputTag("analyze","PhoIso03Ecal");
    tPhoIso03Hcal              = edm::InputTag("analyze","PhoIso03Hcal");
    tPhoIso03HcalDepth1        = edm::InputTag("analyze","PhoIso03HcalDepth1");
    tPhoIso03HcalDepth2        = edm::InputTag("analyze","PhoIso03HcalDepth2");
    tPhoIso03TrkHollow         = edm::InputTag("analyze","PhoIso03TrkHollow");
    tPhoIso03TrkSolid          = edm::InputTag("analyze","PhoIso03TrkSolid");
    tPhoIso03nTrksHollow       = edm::InputTag("analyze","PhoIso03nTrksHollow");
    tPhoIso03nTrksSolid        = edm::InputTag("analyze","PhoIso03nTrksSolid");
    tPhoIso04                  = edm::InputTag("analyze","PhoIso04");
    tPhoIso04Ecal              = edm::InputTag("analyze","PhoIso04Ecal");
    tPhoIso04Hcal              = edm::InputTag("analyze","PhoIso04Hcal");
    tPhoIso04HcalDepth1        = edm::InputTag("analyze","PhoIso04HcalDepth1");
    tPhoIso04HcalDepth2        = edm::InputTag("analyze","PhoIso04HcalDepth2");
    tPhoIso04TrkHollow         = edm::InputTag("analyze","PhoIso04TrkHollow");
    tPhoIso04TrkSolid          = edm::InputTag("analyze","PhoIso04TrkSolid");
    tPhoIso04nTrksHollow       = edm::InputTag("analyze","PhoIso04nTrksHollow");
    tPhoIso04nTrksSolid        = edm::InputTag("analyze","PhoIso04nTrksSolid");
    tPhoMCmatchexitcode        = edm::InputTag("analyze","PhoMCmatchexitcode");
    tPhoMCmatchindex           = edm::InputTag("analyze","PhoMCmatchindex");
    tPhoNeutralHadronIso       = edm::InputTag("analyze","PhoNeutralHadronIso");
    tPhoPhi                    = edm::InputTag("analyze","PhoPhi");
    tPhoPhotonIso              = edm::InputTag("analyze","PhoPhotonIso");
    tPhoPt                     = edm::InputTag("analyze","PhoPt");
    tPhoPx                     = edm::InputTag("analyze","PhoPx");
    tPhoPy                     = edm::InputTag("analyze","PhoPy");
    tPhoPz                     = edm::InputTag("analyze","PhoPz");
    tPhoR9                     = edm::InputTag("analyze","PhoR9");
    tPhoS4OverS1               = edm::InputTag("analyze","PhoS4OverS1");
    tPhoSCEtaWidth             = edm::InputTag("analyze","PhoSCEtaWidth");
    tPhoSCRawEnergy            = edm::InputTag("analyze","PhoSCRawEnergy");
    tPhoSCSigmaPhiPhi          = edm::InputTag("analyze","PhoSCSigmaPhiPhi");
    tPhoScSeedSeverity         = edm::InputTag("analyze","PhoScSeedSeverity");
    tPhoSigmaEtaEta            = edm::InputTag("analyze","PhoSigmaEtaEta");
    tPhoSigmaIetaIeta          = edm::InputTag("analyze","PhoSigmaIetaIeta");
    tPhoisEB                   = edm::InputTag("analyze","PhoisEB");
    tPhoisEBEEGap              = edm::InputTag("analyze","PhoisEBEEGap");
    tPhoisEBEtaGap             = edm::InputTag("analyze","PhoisEBEtaGap");
    tPhoisEBPhiGap             = edm::InputTag("analyze","PhoisEBPhiGap");
    tPhoisEE                   = edm::InputTag("analyze","PhoisEE");
    tPhoisEEDeeGap             = edm::InputTag("analyze","PhoisEEDeeGap");
    tPhoisEERingGap            = edm::InputTag("analyze","PhoisEERingGap");
    tPhoisPFElectron           = edm::InputTag("analyze","PhoisPFElectron");
    tPhoisPFPhoton             = edm::InputTag("analyze","PhoisPFPhoton");
    tPhoisPFlowPhoton          = edm::InputTag("analyze","PhoisPFlowPhoton");
    tPhoisStandardPhoton       = edm::InputTag("analyze","PhoisStandardPhoton");
    tPhomaxEnergyXtal          = edm::InputTag("analyze","PhomaxEnergyXtal");
    tPhotSCindex               = edm::InputTag("analyze","PhotSCindex");
    tPrimVtxGood               = edm::InputTag("analyze","PrimVtxGood");
    tPrimVtxIsFake             = edm::InputTag("analyze","PrimVtxIsFake");
    tPrimVtxNChi2              = edm::InputTag("analyze","PrimVtxNChi2");
    tPrimVtxNdof               = edm::InputTag("analyze","PrimVtxNdof");
    tPrimVtxPtSum              = edm::InputTag("analyze","PrimVtxPtSum");
    tPrimVtxRho                = edm::InputTag("analyze","PrimVtxRho");
    tPrimVtxx                  = edm::InputTag("analyze","PrimVtxx");
    tPrimVtxxE                 = edm::InputTag("analyze","PrimVtxxE");
    tPrimVtxy                  = edm::InputTag("analyze","PrimVtxy");
    tPrimVtxyE                 = edm::InputTag("analyze","PrimVtxyE");
    tPrimVtxz                  = edm::InputTag("analyze","PrimVtxz");
    tPrimVtxzE                 = edm::InputTag("analyze","PrimVtxzE");
    tPtHat                     = edm::InputTag("analyze","PtHat");
    tQCDPartonicHT             = edm::InputTag("analyze","QCDPartonicHT");
    tRawMET                    = edm::InputTag("analyze","RawMET");
    tRawMETSignificance        = edm::InputTag("analyze","RawMETSignificance");
    tRawMETemEtFrac            = edm::InputTag("analyze","RawMETemEtFrac");
    tRawMETemEtInEB            = edm::InputTag("analyze","RawMETemEtInEB");
    tRawMETemEtInEE            = edm::InputTag("analyze","RawMETemEtInEE");
    tRawMETemEtInHF            = edm::InputTag("analyze","RawMETemEtInHF");
    tRawMEThadEtFrac           = edm::InputTag("analyze","RawMEThadEtFrac");
    tRawMEThadEtInHB           = edm::InputTag("analyze","RawMEThadEtInHB");
    tRawMEThadEtInHE           = edm::InputTag("analyze","RawMEThadEtInHE");
    tRawMEThadEtInHF           = edm::InputTag("analyze","RawMEThadEtInHF");
    tRawMETphi                 = edm::InputTag("analyze","RawMETphi");
    tRawMETpx                  = edm::InputTag("analyze","RawMETpx");
    tRawMETpy                  = edm::InputTag("analyze","RawMETpy");
    tRecovRecHitFilterFlag     = edm::InputTag("analyze","RecovRecHitFilterFlag");
    tRho                       = edm::InputTag("analyze","Rho");
    tRhoPFnoPU                 = edm::InputTag("analyze","RhoPFnoPU");
    tRun                       = edm::InputTag("analyze","Run");
    tSCBrem                    = edm::InputTag("analyze","SCBrem");
    tSCEnergy                  = edm::InputTag("analyze","SCEnergy");
    tSCEta                     = edm::InputTag("analyze","SCEta");
    tSCEtaWidth                = edm::InputTag("analyze","SCEtaWidth");
    tSCPhi                     = edm::InputTag("analyze","SCPhi");
    tSCPhiWidth                = edm::InputTag("analyze","SCPhiWidth");
    tSCPre                     = edm::InputTag("analyze","SCPre");
    tSCR9                      = edm::InputTag("analyze","SCR9");
    tSCRaw                     = edm::InputTag("analyze","SCRaw");
    tSCcrackcorr               = edm::InputTag("analyze","SCcrackcorr");
    tSCcrackcorrseed           = edm::InputTag("analyze","SCcrackcorrseed");
    tSCcrackcorrseedfactor     = edm::InputTag("analyze","SCcrackcorrseedfactor");
    tSClocalcorr               = edm::InputTag("analyze","SClocalcorr");
    tSClocalcorrseed           = edm::InputTag("analyze","SClocalcorrseed");
    tSClocalcorrseedfactor     = edm::InputTag("analyze","SClocalcorrseedfactor");
    tSigProcID                 = edm::InputTag("analyze","SigProcID");
    tSumEt                     = edm::InputTag("analyze","SumEt");
    tTCMET                     = edm::InputTag("analyze","TCMET");
    tTCMETSignificance         = edm::InputTag("analyze","TCMETSignificance");
    tTCMETphi                  = edm::InputTag("analyze","TCMETphi");
    tTCMETpx                   = edm::InputTag("analyze","TCMETpx");
    tTCMETpy                   = edm::InputTag("analyze","TCMETpy");
    tTrkEta                    = edm::InputTag("analyze","TrkEta");
    tTrkGood                   = edm::InputTag("analyze","TrkGood");
    tTrkNChi2                  = edm::InputTag("analyze","TrkNChi2");
    tTrkNHits                  = edm::InputTag("analyze","TrkNHits");
    tTrkPhi                    = edm::InputTag("analyze","TrkPhi");
    tTrkPt                     = edm::InputTag("analyze","TrkPt");
    tTrkPtSum                  = edm::InputTag("analyze","TrkPtSum");
    tTrkPtSumPhi               = edm::InputTag("analyze","TrkPtSumPhi");
    tTrkPtSumx                 = edm::InputTag("analyze","TrkPtSumx");
    tTrkPtSumy                 = edm::InputTag("analyze","TrkPtSumy");
    tTrkVtxDxy                 = edm::InputTag("analyze","TrkVtxDxy");
    tTrkVtxDz                  = edm::InputTag("analyze","TrkVtxDz");
    tVrtxChi2                  = edm::InputTag("analyze","VrtxChi2");
    tVrtxIsFake                = edm::InputTag("analyze","VrtxIsFake");
    tVrtxNdof                  = edm::InputTag("analyze","VrtxNdof");
    tVrtxNtrks                 = edm::InputTag("analyze","VrtxNtrks");
    tVrtxSumPt                 = edm::InputTag("analyze","VrtxSumPt");
    tVrtxX                     = edm::InputTag("analyze","VrtxX");
    tVrtxXE                    = edm::InputTag("analyze","VrtxXE");
    tVrtxY                     = edm::InputTag("analyze","VrtxY");
    tVrtxYE                    = edm::InputTag("analyze","VrtxYE");
    tVrtxZ                     = edm::InputTag("analyze","VrtxZ");
    tVrtxZE                    = edm::InputTag("analyze","VrtxZE");
    tWeight                    = edm::InputTag("analyze","Weight");
    tpdfW                      = edm::InputTag("analyze","pdfW");
    tpdfWsum                   = edm::InputTag("analyze","pdfWsum");
    tprocess                   = edm::InputTag("analyze","process");
    tsignMu                    = edm::InputTag("analyze","signMu");

}
